<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘lele</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gmle.github.io/"/>
  <updated>2017-12-18T09:39:05.000Z</updated>
  <id>http://gmle.github.io/</id>
  
  <author>
    <name>忘了</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++基本类中的构造函数，析构函数，拷贝构造器和运算符重载</title>
    <link href="http://gmle.github.io/2017/12/18/C++%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://gmle.github.io/2017/12/18/C++构造析构拷贝构造运算符重载/</id>
    <published>2017-12-18T02:56:52.978Z</published>
    <updated>2017-12-18T09:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这可能是一道笔试题。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Test() = <span class="keyword">default</span>;</div><div class="line">    <span class="keyword">virtual</span> ~Test() = <span class="number">0</span>;</div><div class="line">    Test(<span class="keyword">const</span> Test &amp;another);</div><div class="line">    Test &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Test &amp;another);</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这可能是一道笔试题。&lt;/p&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://gmle.github.io/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>不同编译器下C++的不同</title>
    <link href="http://gmle.github.io/2017/11/27/%E4%B8%8D%E5%90%8C%E7%BC%96%E8%AF%91%E5%99%A8%E5%AF%B9C++%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BD%B1%E5%93%8D/"/>
    <id>http://gmle.github.io/2017/11/27/不同编译器对C++的一些影响/</id>
    <published>2017-11-27T06:59:16.289Z</published>
    <updated>2017-12-18T09:38:59.927Z</updated>
    
    <content type="html"><![CDATA[<p>在学习C++的时候遇到了一些问题。<br>在不同编译器下 某些代码无法实现。<br><a id="more"></a></p><p>在Mac 默认的编译器 clang下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestType</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> TestType x = &#123;<span class="number">20</span>&#125;;</div><div class="line"></div><div class="line">    TestType *x1 = <span class="keyword">const_cast</span>&lt;TestType*&gt;(&amp;x);</div><div class="line">    x1-&gt;data = <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; x.data &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; x1-&gt;data&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span>&lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>编译通过 ，但是运行的时候会出问题。</p><p>检查原因，运行到赋值的地方：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x1-&gt;data = <span class="number">200</span>;</div></pre></td></tr></table></figure></p><p> 程序会退出。</p><p> 但是在msvc等其他编译器下执行则不会出现问题。</p><p> 其实，我们用const时为了提醒一下自己这个值是个常量，不要动了。但是事实证明 const 常量也是可以改变值的。<br> 但是这就完全没有必要了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习C++的时候遇到了一些问题。&lt;br&gt;在不同编译器下 某些代码无法实现。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer 读书笔记</title>
    <link href="http://gmle.github.io/2017/10/25/cpp_primer/"/>
    <id>http://gmle.github.io/2017/10/25/cpp_primer/</id>
    <published>2017-10-25T06:21:39.585Z</published>
    <updated>2018-03-09T01:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>做点什么吧</code></pre><a id="more"></a><h1 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h1><ul><li>最近感觉自己很浮躁，看看书让自己静下心。</li><li>我之前学过Java，对于C++这种面向对象的语言也有一定的了解</li><li>之前也模模糊糊的看过一点C++的东西，也不全面，我现在尝试以一个没有学过c语言的人去学习C++，并且拜读圣经，希望能得到不错的成果。</li><li>本书采用的C++版本为 C++11</li></ul><h2 id="编写一个简单的C-程序"><a href="#编写一个简单的C-程序" class="headerlink" title="编写一个简单的C++程序"></a>编写一个简单的C++程序</h2><ul><li>就像Java有程序入口一样，C++程序也有入口，它们的入口函数都是 <strong>main</strong> 函数。</li><li>在执行成程序的时候，系统会调用 <strong>main</strong> 来运行程序。</li></ul><p>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我保留了Java的书写习惯，将起始的大括号放在了 main 函数的一行，当然我感觉这样写好看一些吧（也可能是习惯）。</p><p>这是一个C++里最简单的函数，这段代码的作用是返回给操作系统一个值：0 。</p><p>C++函数构成包括四个部分：</p><ul><li>返回类型<ul><li>main函数的返回值类型必须为 <strong>int</strong>，即整数类型。 int类型是一种内置类型。</li></ul></li><li>函数名<ul><li>主函数名字为main函数，自定义的函数名字可以自行取。</li></ul></li><li>参数列表<ul><li>本例中没有带有任何参数。</li></ul></li><li>函数体<ul><li>大括号括起来的语句块即为函数体，此函数体中只包含一条语句。</li><li>此语句是结束词函数的执行，并向调用者返回一个值；此返回值类型必须与函数的返回值类型相同</li></ul></li></ul><hr><blockquote><p>重要概念：类型</p></blockquote><pre><code>因为Java是从C++演变而来，所以对于类型也有很深的认识，因为没有学过C++，没有具体了解到C++的所有类型，不方便发表自己的看法。(其实类型好像没什么看法)类型是程序设计的最基本的概念之一，一种类型不仅仅定义了数据元素的内容，还定义了这类数据上可以进行的运算程序所处理的数据都保存在变量中，而每个变量都有自己的类型。</code></pre><hr><h3 id="编译、运行程序"><a href="#编译、运行程序" class="headerlink" title="编译、运行程序"></a>编译、运行程序</h3><pre><code>编写好程序之后 我们就需要去编译它。</code></pre><p>编译环境我用的是<a href="http://cmake.org" target="_blank" rel="external">CMake</a>；CMake的使用，我参考了这份资料<a href="http://pan.baidu.com/s/1hrC3Ale" target="_blank" rel="external">CMake实践</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>C++并没有定义输入输出语句，但是它有一个全面的标准库(std)来提供IO机制以及其他操作。</p><h3 id="标准输入输出对象"><a href="#标准输入输出对象" class="headerlink" title="标准输入输出对象"></a>标准输入输出对象</h3><pre><code>本示例使用 iostream 库，iostream 库中包含两个基础类型 istream 和 ostream，分别表示输入流和输出流。‘流’想要表达的是：随着时间的推移，自复式顺序生成或者消耗的。</code></pre><p>标准库定义了四个IO对象。</p><ul><li><p>为了处理输入，我们使用一个名为<strong>cin</strong>的istream类型的对象。这个对象成为标准输入。</p></li><li><p>为了处理输出，我们使用一个名为<strong>cout</strong>的ostream类型的对象。这个对象成为标准输出。</p></li><li><p>为了处理警告和错误消息，我们使用一个名为<strong>cerr</strong>的ostream类型的对象，我们称之为标准错误</p></li><li>clog则用来输出程序运行时的一般性信息。</li></ul><p>一个使用 IO 库的程序<br>​<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> (iostream) <span class="comment">//告诉编译器我们要使用的库为 iostream</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" Enter two numbers: "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1 &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2 &lt;&lt; <span class="string">" is "</span> &lt;&lt;v1+v2 &lt;&lt; <span class="string">" ."</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>#include (iostream) # 告诉编译器我们要使用的库为 iostream</li><li>std指代库iostream中的命名空间。</li><li>endl 则被称之为 操纵符 的特殊值，写入endl的效果是结束当前行。并将与设备关联的缓冲区(buffer)刷到设备中。</li><li>缓冲刷新操作可以保证截至到目前的所有输出都写入到输出流中。</li><li>如果在调试的时候，我们不应该去执行endl将它写入到缓冲区中，应该一直使这个输出流报纸刷新。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释可以帮助人类读者理解带有注释的程序。在编译的时候，编译器会自动忽略注释。</p><p>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> (iostream)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 这是多行注释</span></div><div class="line"><span class="comment">  * 请注意 注释 界定符不能嵌套</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">      */</span></div><div class="line">      <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" Enter two numbers: "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 这是单行注释。 </span></div><div class="line">    <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1 &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2 &lt;&lt; <span class="string">" is "</span> &lt;&lt;v1+v2 &lt;&lt; <span class="string">" ."</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运算符：</p><ul><li>(&lt;&lt;)    输出运算符</li><li>(&gt;&gt;)    输入运算符</li><li>(&lt;=)    小于等于</li><li>(&gt;=)    大于等于</li></ul><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>字面意思：控制程序的运行路径。</p><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>while语句会反复执行一段带吗，直到给定的条件为假为止。<br>Example：<br>​<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, val = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (val &lt;= <span class="number">1000</span>) &#123;</div><div class="line">    <span class="comment">// 只要val的值小于10，循环就会持续执行，</span></div><div class="line">        sum += val;</div><div class="line">        <span class="comment">// 将sum+val赋值给sum</span></div><div class="line">        ++val;</div><div class="line">        <span class="comment">//val+1</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复合赋值运算符：</p><ul><li>+=    将右侧的运算对象加到左侧运算对象上。</li></ul><p>前缀递增运算符</p><ul><li>++    前缀++可以作为左值来使用，将运算的对象+1</li></ul><h3 id="1-4-2-for语句"><a href="#1-4-2-for语句" class="headerlink" title="1.4.2 for语句"></a>1.4.2 for语句</h3><p>上个while例子中的循环条件检测变量，再循环体中增加变量的模式使用非常频繁，所以C++专门定义了第二种循环语句：<strong>for</strong>语句。</p><p>使用for语句重写从1加到10的程序：<br>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">​    </div><div class="line">    <span class="keyword">int</span> num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入 num1： "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num1;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入 num2： "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num2; num2&gt;=num1; ++num1) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="读取数量不定的输入数据"><a href="#读取数量不定的输入数据" class="headerlink" title="读取数量不定的输入数据"></a>读取数量不定的输入数据</h3><p>如果我们预先不知道要对多少个数求和，这就需要不断读取数据直至没有新的数据输入为止。</p><p>​<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, value = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; value)&#123;</div><div class="line">        sum += value; </div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum is "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为 value定义为 int类型，所以如果你输入了别的类型的字符，就会导致判断失败，从而不会再次进行循环，然后返回你输入的值的和。</p><h3 id="1-4-4-if语句"><a href="#1-4-4-if语句" class="headerlink" title="1.4.4 if语句"></a>1.4.4 if语句</h3><p>与大多数语言一样，c++也提供了 <strong>if</strong>语句来支持条件执行。</p><p>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> isnums = <span class="number">0</span>, nums = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; isnums) &#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nums) &#123;</div><div class="line">            <span class="keyword">if</span> (isnums == nums) &#123;</div><div class="line">                ++count;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The "</span>&lt;&lt; isnums &lt;&lt; <span class="string">" occurs "</span>&lt;&lt; count &lt;&lt; <span class="string">" times."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">                isnums = nums;</div><div class="line">                count = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The "</span>&lt;&lt; isnums &lt;&lt; <span class="string">" occurs "</span>&lt;&lt; count &lt;&lt; <span class="string">" times."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="类简介"><a href="#类简介" class="headerlink" title="类简介"></a>类简介</h2><p>在C++中，我们铜鼓哦定义一个类来定义自己的数据结构。一个类定义了一个类型以及与其关联的一组操作。<br>类机制就是C++最重要的特性之一。<br>实际上，C++最初的一个设计焦点上就是能定义使用上像内置类型一样自然的类类型。<br>为了使用类，我们需要了解三件事情。</p><ul><li>类名是什么</li><li>它是在哪儿定义的</li><li>它支持什么操作</li></ul><p>对于我们即将写的书店程序来说，假定我们的类名为<strong>Sales_item</strong>，头文件 <strong>Sales_item.h</strong>中已经定义了这个类。</p><h3 id="Sales-item类"><a href="#Sales-item类" class="headerlink" title="Sales_item类"></a>Sales_item类</h3><p><strong>Sales_item</strong> 类的作用是表示一本书的总销售额、售出册数和平均售价。我们现在不关心这些数据如何存储、如何计算。为了使用一个雷，我们不必关心它是如何实现的，只需要知道类对象可以执行什么操作<br>每个类实际上都定义了一个新的类型，其类型名就是类名。<br>因此，我们的<strong>Sales_item</strong>类定义了一个名为<strong>Sales_item</strong>的类型，与内置类型一样，我们可以定义类类型的变量。<br>Example:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sales_item item;</div></pre></td></tr></table></figure></p><p>此语句是想表达item是一个<strong>Sales_item</strong>类型的对象，我们通常将 “item是一个<strong>Sales_item</strong>类型的对象” 简单说成 “一个<strong>Sales_item</strong>对象”或者更简单的说成“一个<strong>Sales_item</strong>”。</p><p>除了定义<strong>Sales_item</strong>类型的变量之外呢，我们还可以：</p><ul><li>调用一个名为isbn的函数从一个<strong>Sales_item</strong>对象中提取 ISBN 书号</li><li>用输入运算符（&gt;&gt;）和输出运算符（&lt;&lt;）读写<strong>Sales_item</strong>类型的对象。</li><li>用加法运算符（+）将两个<strong>Sales_item</strong>对象相加，两个对象必须表示同一本书。加法结果是一个新的<strong>Sales_item</strong>对象，其ISBN与两个运算对象相同，而其总销售额和售出册数则是两个运算对象的对应值之和。</li><li>使用复合赋值运算符讲一个<strong>Sales_item</strong>对象加到另一个对象上。</li></ul><hr><blockquote><p>重要概念：类定义了行为<br>    当你度这些程序时，类<strong>Sales_item</strong>的作者定义了类对象可以执行的所有动作。即，<strong>Sales_item</strong>类定义了创建一个<strong>Sales_item</strong>对象时会发生什么事情。以及对<strong>Sales_item</strong>对象进行赋值、加法或输入输出运算时会发生什么事情。<br>    一般而言，类的作者决定了类类型对象上可以使用的所有操作。</p><hr></blockquote><p>读写<strong>Sales_item</strong><br>    既然即应知道可以对<strong>Sales_item</strong>对象执行哪些操作，，我们现在就可以便携使用类的程序了。<br>    例如，下面的程序从标准输入读入数据，存入一个<strong>Sales_item</strong>对象中，然后将<strong>Sales_item</strong>的内容写回到标准输出。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Sales_item book;</div><div class="line">    </div><div class="line">    <span class="comment">// 读入ISBN号、售出的册数以及销售价格。</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; book;</div><div class="line">    </div><div class="line">    <span class="comment">// 写入ISBN号、售出的册数、总销售额和平均价格。</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; book &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>新的include形式：</p><ul><li>来自标准库的头文件 用 ( &lt;&gt; )包围头文件名。</li><li>来自不属于标准库的头文件，用 ( “” )包围。</li></ul><p><strong>Sales_item</strong> 对象的加法<br>下面是一个对象相加的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addItems.hpp"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Sales_item item1, item2;</div><div class="line">    </div><div class="line">    <span class="comment">// 读取一对交易记录</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item1 &gt;&gt; item2;</div><div class="line">    </div><div class="line">    <span class="comment">//打印和</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item1 + item2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="初识成员函数"><a href="#初识成员函数" class="headerlink" title="初识成员函数"></a>初识成员函数</h3><p>将两个<strong>Sales_item</strong>对象相加的程序首先应该价差两个对象是否具有相同的ISBN。<br>方法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CheckSame.hpp"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Sales_item item1, item2;</div><div class="line">    </div><div class="line">    <span class="comment">// 读取一对交易记录</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item1 &gt;&gt; item2;</div><div class="line">    </div><div class="line">    <span class="comment">//首先检查item1和item2是否表示相同的书</span></div><div class="line">    <span class="keyword">if</span> (item1.isbn() == item2.isbn()) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item1 + item2 &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Data must refer to same ISBN"</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个if语句的检测条件<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">item1.isbn() == item2.isbn()</div></pre></td></tr></table></figure></p><p>调用名为isbn的<strong>成员函数</strong>。成员函数式定义为类的一部分函数，有时也被称为<strong>方法(method)</strong>。<br>我们通常使用 <strong>点运算符(.)</strong>来调用方法。通常，此方法必须是当前类类型的。<br>当我们访问一个成员函数时，通常我们是想调用该函数，我们使用调用运算符( () )来调用一个函数，调用运算符是一顿圆括号，里面放置<strong>参数列表</strong>(可能为空)。<br>因为我们现在的成员函数 <strong>isbn</strong>并不接受参数，因此：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">item1.isbn()</div></pre></td></tr></table></figure></p><p>调用名为 item1 的对象的成员函数 isbn，此函数返回 item1 中保存的 ISBN书号。</p><p>自此下面的就不去写了， 感觉本书对此处写的像是磕磕绊绊，一些细节性的东西没有去发现， 可能不适合初学者读吧。<br>初学者只想知道为什么运行不起来，不会去关心这些跑不起来的东西竟然还要写例子。</p><h1 id="第二章-变量和基本类型"><a href="#第二章-变量和基本类型" class="headerlink" title="第二章 变量和基本类型"></a>第二章 变量和基本类型</h1><pre><code>数据类型是程序设计的基础，它告诉我们数据的意义以及我们能在数据上执行的操作数据类型决定了程序中数据和操作的意义。如下所示的语句是一个简单示例：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = i + j;</div></pre></td></tr></table></figure>其含义依赖于 i 和 j 的数据类型。 如果i j 是整形数，那么这条语句执行的就是最普通的加法运算。</code></pre><h2 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h2><p>C++定义了一套包括 <strong>算数尅性</strong> 和 <strong>空类型（void）</strong> 在内的基本数据类型。<br>其中算术类型包含了 字符、整形数、布尔值、和浮点数。空类型不对应具体的值，仅用于一些特殊的场合。<br>例如最常见的是，如果函数不返回任何值的时候使用空类型作为返回类型。</p><h3 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h3><p>算术类型分为两类： <strong>整形（包括字符和布尔类型在内）</strong>和浮点型。<br>算数类型的尺寸（也就是该类型数据所占的比特数）在不同机器上有所差别，所表示的范围也不一样。</p><p>布尔类型的取值是 真（true）/假（false）。</p><hr><p>带符号类型和无符号类型<br>    除去布尔型和扩展的字符型之外，其他整形可以划分为<strong>带符号的</strong>和<strong>无符号的</strong>两种。带符号类型可表示正数、负数或0，无符号的类型则仅能表示大禹等于0的值。<br>    类型int、short、long、和long long 都是带符号的，通过在其前面加 unsigened就可以得到无符号类型。<br>    Example：<br>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unsigened <span class="keyword">int</span></div></pre></td></tr></table></figure></p><hr><p>与其他整形不同，字符型被分为了三种： char、sigend char 和 unsigned char。<br>尽管字符型有三种，但表现形式却只有两种，带符号的和无符号的。具体是哪种由编译器决定。</p><hr><p>建议：如何选择类型<br>    和C语言一样，C++的设计准则之一也是尽可能的接近硬件。C++的算数类型必须满足各种硬件特质。</p><pre><code>- 当明确知道数值不可能为负时，选用无符号类型。- 使用int执行整数运算。- 执行浮点数运算选用double。</code></pre><hr><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>对象的类型定义了对象能包含的数据和能参与的运算，其中一种运算被大多数类型支持，就是讲对象从一种给定的类型<strong>转换</strong>为另一种相关类型。<br>当我们像下面这样发吧一种算术类型的值付给另外一种类型时：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> b = <span class="number">42</span>;            <span class="comment">//bw为真</span></div><div class="line"><span class="keyword">int</span> i = b;              <span class="comment">//i的值为1</span></div><div class="line">i = <span class="number">3.14</span>;               <span class="comment">//i的值为3</span></div><div class="line"><span class="keyword">double</span> pi = i;          <span class="comment">//pi的值为3.0</span></div><div class="line">unsigend <span class="keyword">char</span> c = <span class="number">-1</span>;   <span class="comment">//假设char占8bytes c的值为255</span></div><div class="line">sigend <span class="keyword">char</span> c2 = <span class="number">256</span>;   <span class="comment">//假设char占8bytes c2的值是未定义的。</span></div></pre></td></tr></table></figure></p><p>类型所能表示的值的范围决定了转换的过程。</p><ul><li>当我们把一个非布尔类型的算数值赋给布尔类型时，初始值为0则结果为false，否则为true。</li><li>当我们把一个布尔值赋给非布尔类型时，初始值为false则结果为0，否则为1.</li><li>当我们把一个浮点数赋给整数类型时，进行了近似处理。结果值将仅保留浮点数中小数点之前的部分。</li><li>当我们把一个整数值赋给浮点类型时，小数部分记为0.如果该整数所占的空间超过了浮点类型的容量，精度有可能损失。</li><li>当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的，此时，程序有可能继续工作，可能崩溃，也可能生成垃圾数据。</li><li>当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示树枝总数取模后的余数。</li></ul><hr><pre><code>建议：避免无法预知和依赖于实现环境的行为。    无法预知的行为源于编译器无需检测的错误。即使代码编译通过了，如果程序执行了一条未定义的表达式，仍有可能产生错误。    不幸的是，在某些情况或某些编译器下，含有无法预知行为的程序也能正确执行。但是我们却无法保证同样一个程序在别的编译器下能正常工作。甚至已经编译通过的代码再次执行也可能会出错。    程序也应尽量避免依赖于实现环境的行为。</code></pre><hr><h3 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h3><p>一个形如42的值被称作<strong>字面值常量</strong>，这样的值一望而知。<br>每个字面值常量都对应一种数据类型，字面值常来你的形式和值决定了他的数据类型。</p><h4 id="整型和浮点型字面值"><a href="#整型和浮点型字面值" class="headerlink" title="整型和浮点型字面值"></a>整型和浮点型字面值</h4><pre><code>我们可以将整型字面值写作十进制数、八进制数或十六进制数的形式。以0开头的整数代表八进制数，以0x或者0X开头的代表十六进制。</code></pre><p>整型字面值具体的数据类型由它的值和符号决定，默认情况下，十进制字面值是带符号数，八进制和十六进制字面值极可能带符号也可能是无符号。<br>浮点型字面值是一个double。</p><h4 id="字符和字符串字面值"><a href="#字符和字符串字面值" class="headerlink" title="字符和字符串字面值"></a>字符和字符串字面值</h4><p>由单引号括起来的一个字符成为char型字面值，双引号括起来的另个或多个字符则构成字符串型的字面值<br>‘a’ – 字符型字面值<br>“abc” – 字符串型字面值</p><h4 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h4><p>有两类字符程序员不能直接使用，一类是 <strong>不可打印</strong>的字符，如退格或其他控制字符，因为它们没有可视的图符；另一类是在C++语言中有特殊含义的字符（单引号，双引号，问号，反斜线）。在这些情况下需要用到<strong>转义序列</strong>，转义序列均以反斜线作为开始。</p><hr><p>换行符     \n    横向制表符 \t    报警符    \a<br>纵向制表符  \v    退格符    \b    双引号    \”<br>反斜线     \\   问号     \?     单引号    \’<br>回车符     \r    进纸符    \f</p><hr><p>在程序中，上述转义序列被当做一个字符使用。</p><h4 id="布尔字面值和指针字面值"><a href="#布尔字面值和指针字面值" class="headerlink" title="布尔字面值和指针字面值"></a>布尔字面值和指针字面值</h4><p>true和false是布尔类型的字面值。<br>bool test = false;<br>nullptr 是指针字面值。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>变量提供一个具体名字，可供程序操作的存储空间，c++中的每个变量都有其数据类型。数据类型决定着变量所占内存空间的大小和布局方式。该空间能存储的值的范围以及变量能参与的运算，对C++程序员来说，“变量”和“对象”一般可以互换使用。</code></pre><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量定义的基本形式是：首先是类型说明符，随后紧跟由一个或多个变量名组成的列表，其中变量名以逗号分隔，最后1️以分号结束。<br>列表中每个便来匿名的类型都由类型说明敷指定，定义时还可以为一个或多个变量赋初值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum - <span class="number">0</span>, value <span class="comment">// sum。value 都是int  sum初值为0；</span></div><div class="line">Sales_item item; <span class="comment">//item的类型是Sales_item。</span></div><div class="line"><span class="comment">//string 是一种库类型，表示一个可变长的字符序列。</span></div><div class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">book</span> <span class="params">(<span class="number">0</span><span class="number">-123</span><span class="number">-45678</span>-X)</span></span>;</div></pre></td></tr></table></figure><hr><p>何为对象：<br>    C++程序员们在很多场合都会使用<strong>对象</strong>这个名词。通常情况下，对象是指一块能存储数据并具有某种类型的空间。<br>    一些人仅在与类有关的场景下才使用“对象”这个词。另一些人则已把命名的对象和未命名的对象区分开来，其中对象指能被程序修改的数据，而<strong>值</strong>指制度的数据。</p><hr><h4 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h4><p>当对象在创建时获得了一个特定的值，我们说这个对象被<strong>初始化</strong>了。用于初始化便拉近的值可以使任意复杂的表达式。<br>当一次定义了两个或多个变量时，对象的名字随着定义也就马上可以使用了。因此在同一条定义语句中，可以用箱定义跌变量值去初始化后定义的其他变量。</p><p>Example:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用price的值初始化discount</span></div><div class="line"><span class="keyword">double</span> price = <span class="number">109.99</span>, discount = price * <span class="number">0.16</span>;</div><div class="line"><span class="comment">//调用函数applyDiscount并返回值用来初始化salePrice</span></div><div class="line"><span class="keyword">double</span> salePrice = applyDiscount(price, discount);</div></pre></td></tr></table></figure></p><h4 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h4><p>C++定义了初始化的好几种不同形式，这也是初始化问题复杂性的一个体现。<br>例如，要想定义一个名为units_soid的int变量并初始化为0，以下的四条语句都可以做到：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> units_soid = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> units_soid = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">units_soid</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line"><span class="keyword">int</span> units_soid&#123;<span class="number">0</span>&#125;;</div></pre></td></tr></table></figure></p><p>作为C++新标准的一部分，永花括号来初始化变量得到了全面应用，在此之前仅在某些受限的场合下使用。<br>这种初始化的形式被称为列表初始化。</p><p>当用于内置类型的变量时，这种初始化形式有一个重要特点：如果我们使用列表初始化切初始值存在丢失信息的风险，则编译器会报错：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> id = <span class="number">3.1415926536</span>;</div><div class="line"><span class="keyword">int</span> a&#123;id&#125;, b = &#123;id&#125;; <span class="comment">// 错误：转换未执行，因为存在信息丢失的危险。</span></div><div class="line">int c(id), d = id;   // 正确：转换执行，且确实丢失了部分值。</div></pre></td></tr></table></figure></p><h4 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h4><p>如果定义变量时没有指定初始值。则变量就会被默认初始化，此时变量被赋予了‘默认值’，默认值到底是什么由变量类型决定。<br>同时顶一边拉怪in的位置也会对此有影响。</p><p>如果是内置类型的变量未被显示初始化，它的值由定义的位置决定。<br>定义于任何函数体之外的变量被初始化为0.<br>一种例外情况是，定义在函数体内部的内置类型白能量将<strong>不被初始化</strong>。<br>一个未被初始化的内置类型变量的值是未定义的。如果试图拷贝或以其他形式访问此类值将引发错误。</p><p>每个类格子决定其初始化对象的方式。而且，是否允许不精初始化就定义对象也由类型自己决定，如果类允许这种行为，它将决定对象的初始值到底是什么。</p><p>绝大多数类都至此无需显示初始化而定义对象，这样的类提供了一个合适的默认值。例如，string类规定如果没有指定初值则生成一个空串：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> empty;  <span class="comment">// 默认值为空 ""</span></div><div class="line">Sales_items item;   <span class="comment">// 被默认初始化的Sales_item对象。</span></div></pre></td></tr></table></figure></p><p>一些类要求每个对象都显示初始化，此时如果创建了一个该类的对象而未对其做明确的初始化操作，将引发错误。</p><hr><p>定义于函数体内的内置类型的对象如果没有初始化，则其值未定义。类的对象如果没有显示的初始化，则其值由类决定。</p><hr><p>执行默认初始化时，内置类型的值是未定义的.这句话是有前提的，前提就是这个内置类型在哪申请的空间。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//,在静态存储区申请，所以初始化为0</span></div><div class="line"><span class="keyword">int</span> a;</div><div class="line"></div><div class="line"><span class="comment">//这个叫做值得初始化，3作为初始值</span></div><div class="line"><span class="keyword">int</span> a_1 = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//这个叫做有初始化值</span></div><div class="line">    <span class="keyword">int</span> k = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="comment">//这个不是初始化，叫赋值</span></div><div class="line">    k = <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="comment">//b也是内置类型，但是他在函数体申请，所以是在栈申请的空间，所以值未定义</span></div><div class="line">    <span class="keyword">int</span> b;</div><div class="line"></div><div class="line">    <span class="comment">//new出来的空间都是在堆申请的，有操作系统自动分配可用空间，所以不会初始化</span></div><div class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</div><div class="line"></div><div class="line">    <span class="comment">//static申明的成员是存储在静态存储空间的，所以会初始化为0</span></div><div class="line">    <span class="keyword">static</span> c;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>提示：未初始化变量引发运行时故障。</p><hr><p>未初始化的变量含有一个不确定的值，使用未初始化变量的值是一种错误的变成行为并且很难调试。尽管大多数编译器都能对一部分使用未初始化变量的行为提出警告，但严格来说编译器并未被要求检查此类错误。<br>使用未初始化的便拉近将带来无法预计的后果。有时我们足够幸运，一访问此类对象程序就崩溃并报错，此时只要找到崩溃的位置就很容易发现变量没有初始化的问题。<br>另外一些时候，程序会一直执行完并产生错误的结果。更糟糕的错误是，程序结果时对时错，无法把握。而且往无关的位置添加代码还会导致我们误以为程序对了，其实结果依旧有错。</p><hr><hr><p>梳理一下堆栈</p><ul><li>定义：<ul><li>栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。</li></ul></li><li>区别和联系：<ul><li>申请方式<ul><li>堆是由程序员自己申请并指明大小，在c中malloc函数 如p = (char *)malloc(10);</li><li>栈由系统自动分配，如声明在函数中一个局部变量 int b; 系统自动在栈中为b开辟空间</li></ul></li><li>申请后系统的响应<ul><li>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</li><li>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历改链表。寻找第一个空间大于所申请的堆节点，然后将该节点从空闲结点链表中删除，并将该结点的空间分配给程序。另外，对于大多数系统，会在这块内存空间的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放此内存空间。另外，由于找到的堆结点的大小不一定正海等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。</li></ul></li><li>申请大小的限制<ul><li>栈：在win下，栈是像低地址扩展的数据结构，是一块连续的内存区域。这句话的意思是栈顶的地址和站的最大容量是系统预先规定好的，在win下，栈的大小是2M，如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获取的空间较小。</li><li>堆：堆是像高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不了徐的，而链表的遍历方向是由低到高地址。堆的大小受限于计算机系统中的有小雨你内存。所以堆的空间比较灵活，也比较大。</li></ul></li><li>申请效率比较<ul><li>栈：由系统自动分配，速度较快。但程序员无法控制。</li><li>堆：由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便。</li></ul></li></ul></li></ul><hr><h3 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h3><p>为了允许把程序拆分成多个逻辑部分来编写，C++语言支持分离式编译机制，该机制允许将程序分割为若干个文件，每个文件可被独立编译<br>为了支持分离式编译，C++语言将声明和定义区分开来。<br><strong>声明</strong>使得名字为程序所知，一个文件如果想使用别处定义的名字则必须包含对那个名字的声明。而<strong>定义</strong>负责创建与名字关联的实体。<br>定义还会申请存储空间，也可能会为变量赋一个初始值。<br>如果想声明一个变量而非定义它，就在变量名前添加关键字 extern， 而且不要显式的初始化变量：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;  <span class="comment">//声明而非定义。</span></div><div class="line"><span class="keyword">int</span> j;         <span class="comment">//声明并定义。</span></div></pre></td></tr></table></figure></p><p>任何包含了显式初始化的声明即成为定义。我们能给出 extern 关键字标记的拜年啦给你赋一个初始值，但是这么做就抵消了extern的作用。 extern语句如果包含初始值就不再是声明，而变成定义了：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i = <span class="number">19</span>;  <span class="comment">//定义。</span></div></pre></td></tr></table></figure></p><p>在函数体内部，如果试图初始化一个由extern关键字修饰的变量，将引发错误。</p><hr><p>变量能且只能被定义一次，但是可以被多次声明。</p><hr><p>概念：静态类型</p><hr><p>C++是一种静态类型语言，其含义是在编译节点检查类型。其中，检查类型的过程成为类型检查。<br>我们已经知道，对象的类型决定了对象所能参与的运算。在C++语言中，编译器负责检查数据类型是否支持要执行的运算，如果试图执行类型不支持的运算，编译器将报错并且不会生成可执行文件。<br>程序越复杂，静态类型检查越有助于发现问题，然而，前提是编译器必须知道每一个实体对象的类型。</p><hr><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>C++的标识符由字母、数字、下划线组成，其中必须以字母或下划线开头。标识符的长度没有限制，但是对大小写敏感。<br>C++语言保留了一些名字供语言本身使用，这些名字不能被用作标识符。<br>同时，C++也为标准库保留了一些名字。用户自定义的标识符中不能连续出现两个下划线，也不能以下划线紧连大写字母开头。此外，定义在函数体外的标识符不能以下划线开头。</p><h4 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h4><p>变量命名有许多约定俗成的规范，下面的这些规范能有效提高程序的可读性：</p><ul><li>标识符要能体现实际含义。</li><li>变啦滚名一般用小写字母，如index，不要使用Index或 INDEX。</li><li>用户自定义的类名一般以大写字母开头，如 Sale_item。</li><li>如果标识符由多个单词组成，则单词间应用明显区分。</li></ul><h3 id="名字的作用域"><a href="#名字的作用域" class="headerlink" title="名字的作用域"></a>名字的作用域</h3><p>不论是在圣墟的什么位置，使用到的每个名字都会执行一个特定的实体：变量、函数、类型等，同一个名字如果出现在程序的不同位置，也可以执行的是不同实体。</p><p><strong>作用域</strong>是程序的一部分，在其中名字有其特定的含义。C++语言中大多数组用于都以花括号分离。<br>同一个名字在不同的作用域中可能指向不同的实体。名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端为结束。</p><p>建议：当使用变量的时候再去定义</p><hr><p>一般来说，在对象第一次被使用的地方附近定义它是一种好的选择，因为这样做有利于更容易的找到便来那个的定义。<br>更重要的是，当变量的定义与它第一次被使用的地方很近时，我们也会赋给它一个比较合理的初始值。</p><hr><h4 id="嵌套的作用域"><a href="#嵌套的作用域" class="headerlink" title="嵌套的作用域"></a>嵌套的作用域</h4><p>作用域能彼此包含，被包含的作用域称为内层作用域，包含着别的作用域称为外部作用域。<br>作用域中一旦声明了某个名字，它所嵌套的所有作用域中都能访问该名字。同时，允许在内层作用域中重新定义外层作用域已有的名字：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  *函数内部不宜定义与全局变量同名的新变量</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//全局变量</span></div><div class="line"><span class="keyword">int</span> reused = <span class="number">42</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</div><div class="line">    <span class="comment">//块变量</span></div><div class="line">    <span class="keyword">int</span> unique = <span class="number">0</span>;</div><div class="line">    <span class="comment">//输出 #1:使用全局变量reused</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//覆盖全局变量reused</span></div><div class="line">    <span class="keyword">int</span> reused = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 输出 #2:使用局部变量reused</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ::reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">//输出 #3:显式的访问全局变量reused，</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ::reused &lt;&lt; <span class="string">" "</span> &lt;&lt;unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解释：<br>输出#1：出现杂我jububianlaignreused定义之前，因此这条语句使用全局作用域中定义的名字reused，输出42 0.<br>输出#2：发生咋已局部变量reused定义之后，此时局部变量reused正在作用域内，因此第二条输出语句使用的是局部变量reused而非全局变量，输出0 0.<br>输出#3：使用域操作符 :: 来覆盖默认的作用域规则，因为全局作用域本身并没有名字，所以当作用域左侧为空时，向全局作用域发憷请求获取作用域操作符右侧名字对应的变量。结果是，第三条输出语句使用全局变量reused，输出42 0</p><p>建议</p><hr><p>如果函数有可能用到某全局变量，则不宜再定义一个同名的局部变量。</p><hr><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p><strong>复合类型</strong> 是指基于其他类型定义的类型。<br>C++语言有几种复合类型，下面介绍 引用和指针。<br>与我们已经掌握的变量声明相比，定义复合类型的便拉近要复杂很多。<br>之前 提到，一条简单的声明语句由一个数据类型和紧随其后的一个变量名列表组成。其实更通用的描述是，一条声明语句由一个<strong>基本数据类型</strong>和紧随其后的一个<strong>声明符</strong>列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><hr><p>C++11中新增了一种引用：所谓的<strong>“右值引用”</strong>，这种引用主要用于内置类。严格来说，当我们使用术语“引用”时，指的其实是<strong>“左值引用”</strong>。</p><hr><p><strong>引用</strong> 为对象起了另外一个名字，引用类型医用另外一种类型。<br>通过将声明写成 &amp;d 的形式来定义引用类型，其中d是声明的变量名。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</div><div class="line"><span class="keyword">int</span> &amp;refival = ival; <span class="comment">//refval指向ival（ival的另一个名字）</span></div><div class="line"><span class="keyword">int</span> &amp;refval2; <span class="comment">//报错：引用必须初始化</span></div></pre></td></tr></table></figure></p><p>一般在初始化变量时，初始值会被拷贝到新建的对象中，然而定义引用时，程序吧引用和它的滁州市值绑定在一起，而不是将初始值拷贝给引用。<br>一旦初始化完成，引用将和他的初始值对象一直绑顶在一起，因为无法令引用重新把那个顶到另外一个对象，因此引用必须初始化。</p><h4 id="引用即别名"><a href="#引用即别名" class="headerlink" title="引用即别名"></a>引用即别名</h4><hr><p>引用并非对象，相反的，它只是为一个已经存在的对象所起的另外一个名字。</p><hr><p>为引用赋值，实际上是把值付给了与引用绑定的对象。获取引用的值，实际上是获取了与引用绑定的对象的值。同理，以引用作为初始值，实际上是以与引用绑定的对象作为初始值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> &amp;ra = a;</div><div class="line">    ra= b;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ra &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出10</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 输出20</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为引用本身不是一个对象，所以不能定义引用的引用。</p><h4 id="引用的定义"><a href="#引用的定义" class="headerlink" title="引用的定义"></a>引用的定义</h4><p>允许在一条语句中定义多个引用，其中每个引用标识符都必须以符号&amp;开头：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">1024</span>, i2 = <span class="number">2048</span>;    <span class="comment">// 都是int</span></div><div class="line"><span class="keyword">int</span> &amp;r = i, r2 = i2;        <span class="comment">// r是一个引用，与i绑在一起，r2是int</span></div><div class="line"><span class="keyword">int</span> i3 = <span class="number">1024</span>m &amp;ri = i3;    <span class="comment">// i3是int，ri是一个引用，与i3绑定在一起</span></div><div class="line"><span class="keyword">int</span> &amp;r3 = i3, &amp;r4 = i2;     <span class="comment">// r3和r4都是引用</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> &amp;refNum = <span class="number">10</span>;           <span class="comment">//错误</span></div><div class="line"><span class="comment">//引用只能绑定在对象上，而不能与字面值或者某个表达式的计算结果绑定在一起。</span></div></pre></td></tr></table></figure></p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针是指向另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。然而指针与引用相比又有很多不同点。<br>其一，指针本身就是一个对象，允许对指针赋值和拷贝，而且咋指针的生命周期内它可以先后指向几个不同的对象。<br>其二，指针无需在定义时赋初值。和其他内置类型一样，在快块作用域内定义的指针如果没有被初始化，也将又有一个不确定的值。</p><hr><p>指针通常难以理解，即使有经验的程序员也常常因为调试指针引发的错误而烦恼</p><hr><p>定义指针类型的方法将声明符写成 <em>x(变量) 的形式。<br>如果在一条语句中定义了几个指针变量，每个变量都要有 </em> 。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *pi1, *pi2, *pi3;   <span class="comment">//都是指向int类型对象的指针。</span></div><div class="line"><span class="keyword">double</span> *pd1, pd2;       <span class="comment">//pd1是指向double类型对象的指针</span></div></pre></td></tr></table></figure></p><h4 id="获取对象的地址"><a href="#获取对象的地址" class="headerlink" title="获取对象的地址"></a>获取对象的地址</h4><p>指针存放某个对象的地址，要想获取该地址，需要使用<strong>取地址符(&amp;)</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> *pval = &amp;ival; <span class="comment">//pval存放变量ival的地址，或者说pval是指向val变量的指针。</span></div></pre></td></tr></table></figure></p><p>第二条语句吧pval定义为一个指向int的指针，随后初始化pval另其指向名为ival的int对象。<br>因为引用不是对象，没有实际地址，所以不能定义指向引用的指针。<br>和引用一样，指针只能绑定在对象上，而不能与字面值或者某个表达式的计算结果绑定在一起。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval;</div><div class="line"><span class="keyword">double</span> *pd = &amp;dval;     <span class="comment">//正确：初始值是double型对象的地址。</span></div><div class="line"><span class="keyword">double</span> *pd2 = pd;       <span class="comment">//正确：初始值是指向double对象的指针</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> *pi = pd;           <span class="comment">//错误：指针类型和pd类型不匹配</span></div><div class="line">pi = &amp;dval;             <span class="comment">//错误：视图把double型对象的地址赋给int型指针</span></div></pre></td></tr></table></figure></p><p>因为在声明语句中指针的类型实际上被用于指定它所指向对象的类型，所以二者必须匹配。如果指针指向了一个其他类型的对象，对该对象的操作将发生错误。</p><h4 id="指针值"><a href="#指针值" class="headerlink" title="指针值"></a>指针值</h4><p>指针的值（即地址）应属于下列四中状态之一：</p><ul><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，意味着指针没有指向任何对象</li><li>无效指针，也就是上述情况之外的其他值，</li></ul><p>试图拷贝火以其他方式访问无效的指针豆浆引发错误。<br>编译器并不负责检查此类错误。，这一点和试图使用未经初始化的变量是一样的。访问无效指针的后果无法预计，因此程序员必须清楚任意给定的指针是否有效。</p><p>尽管第二种和第三种形式的指针是有效的，蛋其使用同样受到限制。显然这些指针没有指向任何具体对象，所以试图访问此类指针（假定的）对象的行为不被允许。如果这样做了，后果也无法预计。</p><h4 id="利用指针访问对象"><a href="#利用指针访问对象" class="headerlink" title="利用指针访问对象"></a>利用指针访问对象</h4><p>如果指针指向了一个对象，则允许使用<strong>解引用符(*)</strong>来访问对象。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival - <span class="number">42</span>;      </div><div class="line"><span class="keyword">int</span> *p = &amp;ival;     <span class="comment">//p存放着变量ival的地址，或者说p是指向变量ival的指针</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;    <span class="comment">//由符号*得到指针p所指的对象，输出42。</span></div></pre></td></tr></table></figure></p><p>对指针解引用会得出所指的对象，因此如果给解引用的结果赋值，实际上也就是给指针所指的对象赋值。<br>解引用操作仅适用于那些确实指向了某个对象的有效指针。</p><p><strong>关键概念：某些符号有多重含义</strong></p><hr><p>像 &amp; * 这样的符号，技能用做表达式里的运算符，也能作为声明的一部分出现，符号的上下文决定了符号的意义：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> &amp;r = i;     <span class="comment">//&amp;紧随类型名出现，因此是声明的一部分，所以是引用</span></div><div class="line"><span class="keyword">int</span> *p;         <span class="comment">//*紧随类型名出现，因此是声明的一部分，所以是指针</span></div><div class="line">p = &amp;i;         <span class="comment">//&amp;出现在表达式中，是一个取地址符</span></div><div class="line"><span class="keyword">int</span> &amp;r2 = *p;   <span class="comment">//&amp;是声明的一部分，*是一个解引用符。</span></div></pre></td></tr></table></figure></p><p>在声明语句中， &amp; 和 * 用于组成复合类型；在表达式中，他们的角色又转变成运算符。在不同场景下出现的虽然是同一个符号，但是由于含义截然不同，所以我们完全可以吧它当做不同的符号来看待。</p><hr><h4 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h4><p><strong>空指针</strong>不指向任何对象，在试图使用一个指针之前，代码可以首先检查它是否为空，以下列出几个生成空指针的方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p1 = <span class="literal">nullptr</span>;</div><div class="line"><span class="keyword">int</span> *p2 = <span class="number">0</span>;</div><div class="line">itn *p3 = <span class="literal">NULL</span>;</div></pre></td></tr></table></figure></p><p>得到空指针最直接的办法就是采用字面值 nullptr来初始化指针，这也是C++11新标准刚刚引入的一种方法。<br>nullptr是一种特殊类型的字面值，它可以被转换成任意其他的指针类型。<br>过去的程序还会用到一个名为<strong>NULL</strong>的<strong>预处理变量</strong>来给指针赋值，这个变量在头文件catdlib中定义，它的值就是0。<br>预处理变量不属于命名空间std，它由预处理器负责管理，因此我们可以直接使用预处理白能量儿无需在前面加域操作符<br>当用到一个预处理变量时，预处理器会自动的将它替换为实际值，因此用NULL初始化指针和0初始化指针是一样的。在新标准下，现在的C++程序最好使用nullptr，同事尽量避免使用NULL。</p><p>把int变量直接赋给指针是错误的操作，即使int变量的值签好等于0也不行。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> zero = <span class="number">0</span>;</div><div class="line">ip = zero;</div></pre></td></tr></table></figure></p><p><strong>建议：初始化所有指针</strong></p><hr><p>使用未经初始化的指针是引发运行时错误的一大原因。<br>和其他变量一样，访问未经初始化的指针所引发的后果也是无法预计的。<br>通常这一行为将造成程序崩溃，而且一旦崩溃，要想定位到出错位置讲师特别棘手的问题。<br>在大多数编译器环境下，如果使用了未经初始化的指针，则该指针所占内存空间的当前内容将会被看做一个地址值。<br>访问该指针们相当于去访问一个本不存在位置上的本不存在的对象。如果指针所占内存空间中恰好有内容，而这些内容又恰好被当做了某个地址，我们就很难分清它是合法的还是非法的了。<br>因此建议初始化所有的指针，并且在可能的情况下，尽量等定义了对象之后再定义指向他的指针，如果实在步行出指针应该指向何处，就初始化为nullptr，这样程序就能检测并知道它有没有指向任何具体的对象了。</p><hr><h4 id="赋值和指针"><a href="#赋值和指针" class="headerlink" title="赋值和指针"></a>赋值和指针</h4><p>指针和引用都能提供对其他对象的间接访问，然而在具体实现细节上二者有很大不同，其中最重要的一点就是引用本身并非是一个对象。一旦定义了引用，就无法另其再绑定到另外的对象，之后每次使用这个引用都是访问它最初绑定的那个对象。<br>指针和它存放的地址之间就没有这种限制了。和其他任何变量(只要不是引用)一样，给指针赋值就是令它存放一个新的地址，从而指向一个新的对象：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> *pi = <span class="number">0</span>;        <span class="comment">//pi被初始化,没有指向任何对象</span></div><div class="line"><span class="keyword">int</span> *pi2 = &amp;i;      <span class="comment">//pi2被初始化并指向了i的地址。</span></div><div class="line"><span class="keyword">int</span> *pi3;           <span class="comment">//pi3被定义，但未被初始化，所以pi3的值不确定。</span></div><div class="line"></div><div class="line">pi3 = pi2;          <span class="comment">//pi3和pi2指向同一个对象i</span></div><div class="line">pi2 = <span class="number">0</span>;            <span class="comment">//pi2又被初始化，并不指向任何对象</span></div></pre></td></tr></table></figure></p><h4 id="其他指针操作"><a href="#其他指针操作" class="headerlink" title="其他指针操作"></a>其他指针操作</h4><p>只要指针拥有一个合法值，就能将它用在条件表达式中。和采用算数值作为条件遵循的规则类似，如果指针的值是0；则条件取false。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;    <span class="comment">// </span></div><div class="line"><span class="keyword">int</span> *pi = <span class="number">0</span>;        <span class="comment">// pi是一个空指针。</span></div><div class="line"><span class="keyword">int</span> *pi2 = &amp;ival;   <span class="comment">// pi2存这ival的地址、</span></div><div class="line"><span class="keyword">if</span>(pi)&#123;             <span class="comment">// pi的值是0，因此条件为false</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(pi2)&#123;            <span class="comment">// pi2的值是1024，因此条件为true</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结论：任何非0指针对应的条件都是true。<br>对于两个类型的合法指针，可以用相等操作符(==)或不相等操作符(!=)来比较他们，比较的结果是布尔类型。如果两个指针村法规的地址值相同，则他们相等，反之则不等。<br>这里两个指针存放的地址值相同(两个指针相等),有三种可能，它们都为空，都指向同一个对象，或者都指向了同一个对象的下一地址。<br>需要注意的是，一个指针指向某对象，同时另一个指针指向另外对象的下一地址，此时也有可能出现这两个指针值相同的情况，即指针相等。<br>因为上述操作要用到指针的值，所以不论是作为条件出现还是参与比较运算，都必须使用合法指针，使用非法指针作为条件或进行比较都会引发不可预计的后果。</p><h4 id="void-指针"><a href="#void-指针" class="headerlink" title="void* 指针"></a>void* 指针</h4><p><strong>void*</strong> 是一种特殊的指针类型，可用于存放任意对象的地址。一个void*的指针存放着一个地址，这一点和其他指针类似。不同的是，我们对该地址中到底是个什么类型的对象并不了解：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;</div></pre></td></tr></table></figure></p><p>利用viod*指针能做的事情比较有限：拿它和别的指针比较、作为函数的输入或输出，或者赋给另一个void*指针。不能直接操作void*所指的对象，因为我们并不知道这个对象的类型，也就无法确定能在这个对象上进行什么操作。<br>概括来讲，以void*的视角来看内存空间也就仅仅是内存空间，没办法访问内存空间中所存的对象。</p><h3 id="理解复合类型的声明"><a href="#理解复合类型的声明" class="headerlink" title="理解复合类型的声明"></a>理解复合类型的声明</h3><p>变量的定义包括一个基本数据类型和一组声明符。子啊同一条定义语句中，虽然基本数据类型只有一个，但是声明符的形式却可以不同，也就是说，一条定义语句可能定义出不同类型的变量。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// i是一个int型的整数，p是一个int型的指针，r是一个int型的引用。</span></div><div class="line"><span class="keyword">int</span> i = <span class="number">1024</span>, *p - &amp;i, &amp;r = i;</div></pre></td></tr></table></figure></p><hr><p>很多程序员迷惑于基本数据类型和类型修饰符的关系，其实后者不过是声明符的一部分。</p><hr><h4 id="定义多个变量"><a href="#定义多个变量" class="headerlink" title="定义多个变量"></a>定义多个变量</h4><p>经常有一种观点会误以为，在定义语句中，类型修饰符(*或&amp;)作用于本次定义的全部变量。造成这种错误看法的原因有很多，其中之一是我们可以把空格写在类型修饰符和变量名中间<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>* p; <span class="comment">// 合法但是容易产生误导。</span></div></pre></td></tr></table></figure></p><p>我们说这种写法可能产生误导是因为int<em>放在一起好像是这条语句中所有变量共同的类型一样，其实恰恰相反，基本数据类型是int而非int\</em>。 *仅仅是修饰了p而已，对该声明语句中的其它变量，它并不产生任何作用：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// p1是指向int类型的指针，p2是int</span></div><div class="line"><span class="keyword">int</span>* p1, p2;</div></pre></td></tr></table></figure></p><p>涉及指针或引用的声明，一般有两种写法，第一种把修饰符和变量标识符写在一起：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p1, *p2; <span class="comment">// p1 和 p2都是指向int的指针。</span></div></pre></td></tr></table></figure></p><p>这种形式着重强调变量具有的复合类型。第二种把修饰符和类型名卸载一起，并且每条语句只定义一个变量。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>* p1; <span class="comment">// p1 是指向int的指针。</span></div><div class="line"><span class="keyword">int</span>* p2; <span class="comment">// p2 是指向int的指针。</span></div></pre></td></tr></table></figure></p><p>这种形式则强调了本次声明定义了一种复合类型。</p><hr><p>上述两种定义指针或引用的不同方法没有对错之分，关键是选择并坚持其中的一种写法，不要总是变来变去。</p><hr><h4 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h4><p>一般来说，盛明富中修饰符的个数并没有显示。当有多个修饰符连写在一起时，按照其逻辑关系详加解释即可。<br>以指针为例，指针是内存中的对象，像其他对象一样也有自己的地址，因此允许把指针的地址再放到另一个指针中。</p><p>通过*的个数可以区分指针的级别，也就是说，**表示指向指针的指针，***表示指向指针的指针的指针，以此类推。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</div><div class="line"><span class="keyword">int</span> *pi = &amp;ival; <span class="comment">// p1 指向一个int类型的数。</span></div><div class="line"><span class="keyword">int</span> **ppi = &amp;p1;   <span class="comment">// p2 指向一个int类型的指针。</span></div></pre></td></tr></table></figure></p><p>此处pi是指向int型数的指针，而ppi是指向int型指针的指针。<br>解引用int型指针会得到一个int型的数，同样，解引用指向指针的指针会得到一个指针。此时为了访问最原始的对象，需要对指针的指针 做两次解引用。</p><h4 id="指向指针的引用"><a href="#指向指针的引用" class="headerlink" title="指向指针的引用"></a>指向指针的引用</h4><p>引用本身不是一个对象，因此不能定义指向引用的指针。但指针是对象，所以存在对指针的引用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"></div><div class="line">    <span class="comment">// p是一个int型指针。</span></div><div class="line">    <span class="keyword">int</span> *p;</div><div class="line"></div><div class="line">    <span class="comment">//r是对指针p的引用</span></div><div class="line">    <span class="keyword">int</span> *&amp;r = p;</div><div class="line"></div><div class="line">    <span class="comment">// r 引用 i 的指针，因此给 r 赋值 &amp;i 就是令 p 指向 i</span></div><div class="line">    r = &amp;i;</div><div class="line"></div><div class="line">    <span class="comment">//解引用 r 得到 i，也就是p指向的对象，将i的值改为0。</span></div><div class="line">    *r = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>要理解 r 的类型到底是什么，最简单的办法就是从右向左阅读 r 的定义。<br>离变量名最近的符号 &amp; 对变量的类型有最直接的音箱，因此r是一个引用。声明符的其余部分用以确定r引用的类型是什么，此例中的符号 * 说明 r 引用的是一个指针。最后，声明的基本数据类型部分指出 r 引用的是一个int指针。</p><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><p>有时我们希望定义这样一种变量，它的值不能被改变。例如，用一个变量来表示缓冲区的大小。使用变量的好处是当我们觉得缓冲区大小不再合适时，很容易对其进行调整。另一方面，也应随时警惕防止程序一不小心改变了这个值。为了满足这一要求，可以用关键字const对变量的类型加以限定。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>; <span class="comment">// 输入缓冲区大小</span></div></pre></td></tr></table></figure></p><p>这样就把bufSize定义成了一个常亮。任何试图为bufSize赋值的行为都将引发错误。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bufSize = <span class="number">512</span>; <span class="comment">// 错误：试图像const对象写入。</span></div></pre></td></tr></table></figure></p><p>因为const对象一旦创建后其值就不能再改变，所以const对象必须初始化。一如既往，初始值可以使任意复杂的表达式。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = getsize();  <span class="comment">// 正确：运行时初始化。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> j = <span class="number">42</span>;         <span class="comment">// 正确：编译时初始化。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> k;              <span class="comment">// 错误：k是一个未经初始化的常量。</span></div></pre></td></tr></table></figure></p><h4 id="初始化和const"><a href="#初始化和const" class="headerlink" title="初始化和const"></a>初始化和const</h4><p>正如之前反复提到的，对象的类型决定了其上的操作。与非const类型所能参与的操作相比，const类型的对象能完成其中大部分，但也不是所有的操作都适合。<br>主要的限制就是只能在const类型的对象上执行不改变其内容的操作。例如，const int 和普通的 int 一样都能参与算术运算，也都能转换成一个布尔值。</p><p>在不改变const对象的操作中还有一种是初始化，如果利用一个对象去初始化另外一个对象，则它们是不是const都无关紧要。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i;</div><div class="line"><span class="keyword">int</span> j = ci;</div></pre></td></tr></table></figure></p><p>尽管ci是整型常量，但无论如何 ci 中的值还是一个整型数。ci 的常量特征仅仅在执行改变ci的操作时才会发挥作用。当用 ci 去初始化j时，根本无需在意ci是不是一个常量。拷贝一个对象的值并不会改变它，一旦拷贝完成，新的对象就和原来的对象没什么关系了。</p><h4 id="默认状态下，const对象仅在文件内有效"><a href="#默认状态下，const对象仅在文件内有效" class="headerlink" title="默认状态下，const对象仅在文件内有效"></a>默认状态下，const对象仅在文件内有效</h4><p>当以编译时初始化的方式定义一个const对象时，就如对bufSize的定义一样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>; <span class="comment">// 输入缓冲区大小</span></div></pre></td></tr></table></figure></p><p>编译器将在编译的过程中把用到该变量的地方都替换成相对应的值。也就是说，编译器会找到代码中所有用到 bufSize 的地方，然后用 512 替换。</p><p>为了执行上述替换，编译器必须知道变量的初始值。如果程序包含多个文件，则每个用了const对象的文件都必须得能访问它的初始值才行，要做到这一点，就必须在每个用到变量的的文件中都有对它的定义。为了支持这一用法，同时避免对同一个变量的抽工夫定义，默认情况徐昂西啊，const对象被设定为仅在文件内有效。但你给多个文件中出现了同名的const变量时，其实等同于在不同文件中分别定义了独立的变量。</p><p>某些时候有这样一种const变量，它的初始值不是一个常量表达式，但又确实有必要在文件间共享。这种情况下，我们不希望编译器为每个文件分别生成独立的变量。<br>相反，我们想让这类const对象像其他(非常量)一样工作。也就是说，只在一个文件中定义const，而在其他多个文件中声明并使用它。</p><p>而解决方法非常简单，对于const变量不管是声明还是定义都添加<strong>extern</strong>关键字，这样只需要定义一次。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  FILE1: str.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STR_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 在头文件中可以选择将其初始化。</span></div><div class="line"><span class="comment">// extern const std::string str = "AB";</span></div><div class="line"></div><div class="line"><span class="comment">// 也可以选择不初始化，到引用头文件的地方进行初始化。</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> str;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span> &#123;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//STR_H</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// FILE2: str.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"str.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">"ABCDE"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"abc"</span>&lt;&lt; ceshi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// 输出字符为 AB</span></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"abc"</span>&lt;&lt; ceshi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// 输出字符为 AB</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为str是一个常量，所以必须用 <strong>extern</strong>关键字修饰。</p><h3 id="const的作用"><a href="#const的作用" class="headerlink" title="const的作用"></a>const的作用</h3><p>可以把引用绑定到const对象上，就像绑定到其他对象上一样，我们称之为对常量的引用。与普通引用不同的是，对常量的引用不能被用作修改它所绑定的对象。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> c1 = <span class="number">1024</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = c1 <span class="comment">// 引用及其对应的对象都应该是常量</span></div><div class="line">r1 = <span class="number">42</span>; <span class="comment">// 错误， r1是常量。</span></div><div class="line"><span class="keyword">int</span> &amp;r2 = c1  <span class="comment">// 错误，非常量不能引用常量。</span></div></pre></td></tr></table></figure></p><p>因为不允许直接为c1赋值，当然也就不能通过引用取改变c1，因此，对r2的初始化是错误的。假设改初始化合法，则可以通过r2来改变它引用对象的值，这显然是不正确的。</p><hr><p>C++程序员经常把词组 “对const的引用” 简称为 “常量引用”，这一简称还是挺靠谱的，不过前提是你得时刻记着这就是个简称而已。<br>严格来说，并不存在常量引用。因为引用不是一个对象，所以我们没法让引用本身恒定不变。事实上，由于C++语言并不允许随意改变引用所绑定的对象，所以从这层意义上理解所有的引用又都算是常量。引用的对象是常量还是非常量可以决定其所能参与的操作，却无论如何都不会影响到引用和对象的绑定关系本身。</p><hr><h4 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h4><p>上一节提到，引用的类型必须与其所引用对象的类型一致，但是有两个例外。<br>第一种例外情况是在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象，字面值，甚至是一个表达式。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i;      <span class="comment">// 允许将const引用绑定到普通int对象上。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">42</span>;     <span class="comment">// 正确。r1是一个常量引用。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r3 = r1 * <span class="number">2</span>; <span class="comment">// 正确。r2是一个常量引用</span></div><div class="line"><span class="keyword">int</span> &amp;r4 = r1 * <span class="number">2</span>;       <span class="comment">// 错误。r4是一个普通的非常量引用。非const引用的右值不能是表达式</span></div></pre></td></tr></table></figure></p><p>要想理解这种例外情况的原因，最简单的办法就是弄清楚当一个常量引用被绑定到另外一种类型上时到底发生了什么：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = dval;</div></pre></td></tr></table></figure></p><p>此处ri引用了一个int型的数，对ri的操作应该是整数运算，但dval却是一个双精度浮点而非整数。因此为了缺包让ri的绑定一个整数，编译器吧上述代码变成了如下形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp = dval;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = temp;</div></pre></td></tr></table></figure></p><p>在这种情况下，ri做了一个临时量对象。所谓临时量对象就是当编译器需要一个空间来暂存表达式的求职结果时，临时常见的一个未命名的对象。C++程序员们常常把临时量对象简称为临时量。</p><p>接下来探讨当ri不是常量时，如果执行了类似于上面的初始化过程将带来什么样的后果。如果ri不是常量，就允许对ri赋值，这样就会改变ri所引用对象的值。注意，此时绑定的对象是一个临时变量而非dval。程序员既然让ri引用dval，就肯定想通过ri改变dval的值，否则干什么要给ri赋值呢？如此看来，既然大家基本上不会想着把引用绑定到临时量上，C++语言也就把这种行为归为非法。</p><h4 id="对const的引用可能引用一个并非const的对象"><a href="#对const的引用可能引用一个并非const的对象" class="headerlink" title="对const的引用可能引用一个并非const的对象"></a>对const的引用可能引用一个并非const的对象</h4><p>必须认识到，常量引用仅对引用可参与的操作做出了限定，对于引用的对象本身是不是一个常量未做限定。因为对象也可能是个非常量，所以允许其他途径改变它的值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line">    <span class="keyword">int</span> &amp;r1 = i;        <span class="comment">// 引用r1 绑定对象i。</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i;  <span class="comment">// 引用r2也绑定了对象i，但因为r2是const，所以不允许通过其修改i的值</span></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 通过更改源的方式来改变const引用的值</span></div><div class="line">    r1 = <span class="number">0</span>;             <span class="comment">// r1 不是常量，i的值被修改为0；</span></div><div class="line"><span class="comment">//    r2 = 0;             // 错误：r2 是常量引用。</span></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// const常量不能更改</span></div><div class="line">    r1 = <span class="number">15</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> num = i;;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 输出15</span></div><div class="line"></div><div class="line">    i = <span class="number">20</span>;</div><div class="line">    r1 = <span class="number">20</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 输出15，const常量不可更改。</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>r2 绑定整数i是合法的，然而，不允许通过r2修改i的值。尽管如此，i的值仍然允许通过其他途径修改，既可以直接给i复制，也可与通过像r1一样绑定到i的其他引用来修改。</p><h3 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h3><p>与引用一样，也可以令指针指向常量或非常量。类似于常量引用。,<strong>指向敞亮的指针</strong>不能用不改变其所指对象打的值。要想存放敞亮的对象的地址，只能使用指向常量的指针：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;     <span class="comment">// pi是个常量，他的值不能改变。</span></div><div class="line"><span class="keyword">double</span> *ptr = &amp;pi;          <span class="comment">// 错误：ptr是一个普通指针。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi;   <span class="comment">// 正确：cptr可一直想一个双精度常量</span></div><div class="line">*cptr = <span class="number">42</span>;                 <span class="comment">// 错误：不能给*cptr赋值。</span></div></pre></td></tr></table></figure></p><p>2.3.2节提到，只针对的类型必须与其所指对象的类型一直，但是有两个例外、第一种类外情况是允许另一个纸箱厂凉的指针指向一个非常量对象：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;     <span class="comment">// dval是一个双精度浮点数，它的值可以改变。</span></div><div class="line">cptr = &amp;dval;           <span class="comment">// 正确：但是不能通过cptr改变dval的值。</span></div></pre></td></tr></table></figure></p><p>和常量引用一样，指向敞亮的指针也没有规定其所指的对象必须是一个常量。所谓指向敞亮的指针仅仅要求不能通过该指针改变的对象的值，而没有规定那个对象的值不能通过其他途径改变。</p><hr><p>试试这样想：所谓指向敞亮的指针或引用，不过是指针或引用“自以为是”罢了。它们觉得自己指向了常量，所以自觉地不去改变所指向对象的值。</p><hr><h4 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h4><p>指针是对象而引用不是，因此就像其他对象类型一样，允许把指针本身定位常量。常量指针必须初始化，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。把*放在const关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>*<span class="keyword">const</span> curErr = &amp;errNumb     <span class="comment">// curErr将一直直系那个errNumb</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;  <span class="comment">// pip是一个指向常量对象的常量指针</span></div></pre></td></tr></table></figure></p><p>如同2.3.2节所讲的，要想弄清楚这些生命的含义，最行之有效的办法是从右向左阅读。此例中，离curErr最近的符号是 const，意味着curErr 本身是一个常量对象，对象的了O型由声明福的其余部分决定。声明福中的下一个符号是*，意思是curErr是一个常量指针。最后，该声明语句的基本数据类型部分确定了常量指针指向的是一个int对象。与之相似，我们也能推断出，pip是一个常量指针，它指向的对象是一个双精度浮点型常量。</p><p>指针本身是一个常量并不意味着不能通过指针修改其所指对象的值，能否这样做完全依赖于所指对象的类型，例如，pip是一个指向常量的常量指针，则不论是pip所指的对象值还是pip自己存储的那个地址都不能改变。相反的，curErr指向的是一个一般非常量整数，那么就完全可以用curErr去修改errNumb的值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">*pip = <span class="number">2.72</span>；            <span class="comment">// 错误：pip是一个指向常量的指针</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(*curErr)&#123;            <span class="comment">// 如果curErr所指的对象（也就是errNumb）的值不为0</span></div><div class="line">    errorHandler();     <span class="comment">//</span></div><div class="line">    *curErr = <span class="number">0</span>;        <span class="comment">// 正确：把curErr所指的对象的值重置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><p>如前所述，指针本身是一个对象，它又可以指向另外一个对象。因此，指针本身是不是常量以及指针所指的是不是一个常量就是两个相互独立的问题。<br>用名词<strong>顶层const</strong>表示指针本身是个常量，而用名词<strong>底层const</strong>表示指针所指的对象是一个常量。<br>更一般的，顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用。如算数类型、类、指针等。底层const则与指针和引用等复合类型的基本类型部分有关。比较特殊的是，指针类型既可以是顶层const也可以是底层const，这一点和其他类型相比区别明显。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;                  </div><div class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;<span class="number">1</span>;         <span class="comment">// 不能改变p1的值，这是一个顶层const。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">42</span>;          <span class="comment">// 不能改变ci的值，这是一个顶层const</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;ci         <span class="comment">// 允许改变p2的值，这是一个底层const</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = p2;   <span class="comment">// 不能修改p3的值，右边顶层const，左边是底层const</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = ci;          <span class="comment">// 用于声明引用的const都是底层const</span></div></pre></td></tr></table></figure><p>当执行对象的拷贝操作时，常量是顶层const还是底层const区别明显。其中，顶层const不受什么影响：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">i = ci;     <span class="comment">// 正确：拷贝ci的值，ci是一个顶层const，对此操作无影响</span></div><div class="line">p2 = p3;    <span class="comment">// 正确：p2和p3指向的对象类型相同，p3顶层const的部分不受影响</span></div></pre></td></tr></table></figure></p><p>执行拷贝操作并不会改变被拷贝对象的值，因此，拷入和拷出的对象是否是常量都没什么影响。</p><p>另一方面，底层const的限制却不能忽视。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者来年各个对象的数据类型必须能够转换。一般来说，非常量可以转换成常量，反之则不行：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p = p3;        <span class="comment">// 错误，p3有const定义而p没有。</span></div><div class="line">p2 = p3;            <span class="comment">// 正确：p2和p3都是底层const</span></div><div class="line">p2 = &amp;<span class="number">1</span>;            <span class="comment">// 正确，int*能转换成 const int*</span></div><div class="line"><span class="keyword">int</span> &amp;r = ci;        <span class="comment">// 错误，普通的int&amp;不能绑定在int常量上</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">1</span>;  <span class="comment">// 正确：const int&amp;可以绑定到一个普通int上。</span></div></pre></td></tr></table></figure></p><p>p3即是顶层const也是底层const，拷贝p3时可以不在乎它是一个顶层const，但是必须说清楚它指向的对象得是一个常量。因此，不能用p3区初始化p，因为p指向的是一个普通的(非常量)整数。另一方面，p3的值可以赋给p2，是因为这两个指针都是底层const，尽管p3同时也是一个常量指针(顶层const)，仅就这次赋值而言不会有什么影响。</p><h3 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h3><p><strong>常量表达式</strong>是指值不会发生改变并且在编译过程就能得到计算结果的表达式。显然，字面值属于常量表达式。<br>用常量表达式初始化的const对象也是常量表达式。后面将会提到。<br>C++语言中有几种情况下是要用到常量表达式的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_files = <span class="number">20</span>;           <span class="comment">//</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = max_files + <span class="number">1</span>;    <span class="comment">//</span></div><div class="line"><span class="keyword">int</span> staff_size = <span class="number">27</span>;                <span class="comment">//</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = get_size();          <span class="comment">//</span></div></pre></td></tr></table></figure></p><p>尽管staff_size的初始值是个字面值常量，但由于它的数据类型只是一个普通int而非const_int，所以他不属于常量表达式。另一方面，尽管sz本身是一个常量，但它的具体值知道运行时才能获取到，所以也不是常量表达式。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;做点什么吧
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C++" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://gmle.github.io/tags/C/"/>
    
      <category term="C++ Primer" scheme="http://gmle.github.io/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>对C中堆内存的理解</title>
    <link href="http://gmle.github.io/2017/10/24/%E5%AF%B9%E5%A0%86%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://gmle.github.io/2017/10/24/对堆的内存分配的理解/</id>
    <published>2017-10-24T05:59:18.412Z</published>
    <updated>2017-11-03T09:35:17.741Z</updated>
    
    <content type="html"><![CDATA[<pre><code>初学者对于堆栈的认识，欢迎吐槽</code></pre><a id="more"></a><h2 id="C-中内存划分"><a href="#C-中内存划分" class="headerlink" title="C++中内存划分"></a>C++中内存划分</h2><p>c++划分为五个区：</p><ul><li>堆<ul><li>堆，就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete.如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。</li></ul></li><li>栈<ul><li>栈，就是那些由编译器在需要的时候分配，在不需要的时候自动清楚的变量的存储区。里面的变量通常是局部变量、函数参数等。</li></ul></li><li>自由存储区<ul><li>就是那些由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。</li></ul></li><li>全局、静态存储区<ul><li>全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。</li></ul></li><li>常亮存储区<ul><li>这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改(当然，你要通过非正当手段也可以修改)</li></ul></li></ul><h2 id="C-内存区域中堆和栈的区别："><a href="#C-内存区域中堆和栈的区别：" class="headerlink" title="C++内存区域中堆和栈的区别："></a>C++内存区域中堆和栈的区别：</h2><h3 id="管理方式不同："><a href="#管理方式不同：" class="headerlink" title="管理方式不同："></a>管理方式不同：</h3><ul><li>栈是由编译器自动管理，无需我们手工控制。</li><li>堆的释放由程序员完成，容易产生内存泄漏。</li></ul><h3 id="空间大小不同："><a href="#空间大小不同：" class="headerlink" title="空间大小不同："></a>空间大小不同：</h3><ul><li>堆内存很大。</li><li>栈内存可修改，但默认好像非常小。</li></ul><h3 id="内存碎片："><a href="#内存碎片：" class="headerlink" title="内存碎片："></a>内存碎片：</h3><ul><li>对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。</li><li>对于栈来讲，则不会存在这个问题。</li></ul><h3 id="生长方向不同："><a href="#生长方向不同：" class="headerlink" title="生长方向不同："></a>生长方向不同：</h3><ul><li>对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；</li><li>对于栈来讲，它的生长方式是向下的，是向着内存地址减小的方向增长。<ul><li>加深理解的话：<ul><li>在函数体中定义的变量通常是在栈上，定义一个变量，内存就少一点。就像一杯水喝一口</li><li>堆用malloc， calloc， realloc等分配内存的函数分配得到的就是在堆上<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区  </span></div><div class="line"><span class="keyword">char</span> *p1; <span class="comment">//全局未初始化区  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> b; <span class="comment">//栈  </span></div><div class="line">    <span class="keyword">char</span> s[] = <span class="string">"abc"</span>;          <span class="comment">//栈  </span></div><div class="line">    <span class="keyword">char</span> *p2;                  <span class="comment">//栈  </span></div><div class="line">    <span class="keyword">char</span> *p3 = <span class="string">"123456"</span>;       <span class="comment">//123456&#123;post.content&#125;在常量区，p3在栈上  </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">0</span>;          <span class="comment">//全局(静态)初始化区  </span></div><div class="line">    p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);   <span class="comment">//分配得来得10字节的区域在堆区  </span></div><div class="line">    p2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);   <span class="comment">//分配得来得20字节的区域在堆区  </span></div><div class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123456"</span>);      <span class="comment">//123456&#123;post.content&#125;放在常量区，编译器可能会将它与p3所指向的"123456"优化成一块  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;初学者对于堆栈的认识，欢迎吐槽
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C++" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://gmle.github.io/tags/C/"/>
    
      <category term="内存管理" scheme="http://gmle.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Spark-HA的worker问题</title>
    <link href="http://gmle.github.io/2017/10/10/Spark-HA%E7%9A%84worker%E9%97%AE%E9%A2%98/"/>
    <id>http://gmle.github.io/2017/10/10/Spark-HA的worker问题/</id>
    <published>2017-10-10T03:36:26.000Z</published>
    <updated>2017-11-06T08:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 HA 中 Spark worker节点连接Master的问题</p><a id="more"></a><h2 id="问题：Spark-Woker-不去连接ALIVE-Master"><a href="#问题：Spark-Woker-不去连接ALIVE-Master" class="headerlink" title="问题：Spark Woker 不去连接ALIVE Master"></a>问题：Spark Woker 不去连接ALIVE Master</h2><p>机器：</p><ul><li>192.168.1.128 Master</li><li>192.168.1.129 Master Worker</li><li><p>192.168.1.130 Worker</p><p>启动时两个Master的状态不可控，不知道哪个是ALIVE的Master，worker节点在连接Master的时候，会判断当前Master的状态是否为ALIVE，如果为StandBy，则不继续链接，然后去寻找ALIVE，直到找到ALIVE节点的MASTER。</p><p>现在的问题是 Worker在找到StandBy节点后，并没有去寻找新的Master，导致了worker注册不到集群上，自动关闭。</p><p>原因待定。</p><p>根据一些帖子发现，如果配置了Spark on yarn ，则 Spark HA 基本没有任何作用。</p></li></ul><!-- more --><p>错误日志</p><ul><li>Terminal<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties</div><div class="line">17/10/09 13:05:08 INFO Worker: Registered signal handlers for [TERM, HUP, INT]</div><div class="line">17/10/09 13:05:09 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</div><div class="line">17/10/09 13:05:09 INFO SecurityManager: Changing view acls to: root</div><div class="line">17/10/09 13:05:09 INFO SecurityManager: Changing modify acls to: root</div><div class="line">17/10/09 13:05:09 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(root); users with modify permissions: Set(root)</div><div class="line">17/10/09 13:05:10 INFO Utils: Successfully started service 'sparkWorker' on port 39766.</div><div class="line">17/10/09 13:05:10 INFO Worker: Starting Spark worker 192.168.10.129:39766 with 4 cores, 4.0 GB RAM</div><div class="line">17/10/09 13:05:10 INFO Worker: Running Spark version 1.6.0</div><div class="line">17/10/09 13:05:10 INFO Worker: Spark home: /opt/dkh/spark-1.6.0-bin-hadoop2.6</div><div class="line">17/10/09 13:05:11 INFO Utils: Successfully started service 'WorkerUI' on port 8081.</div><div class="line">17/10/09 13:05:11 INFO WorkerWebUI: Started WorkerWebUI at http://192.168.10.129:8081</div><div class="line">17/10/09 13:05:11 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:05:11 WARN Worker: Failed to connect to master dkm:7077</div><div class="line">java.io.IOException: Failed to connect to dkm/192.168.10.128:7077</div><div class="line">at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:216)</div><div class="line">at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:167)</div><div class="line">at org.apache.spark.rpc.netty.NettyRpcEnv.createClient(NettyRpcEnv.scala:200)</div><div class="line">at org.apache.spark.rpc.netty.Outbox$$anon$1.call(Outbox.scala:187)</div><div class="line">at org.apache.spark.rpc.netty.Outbox$$anon$1.call(Outbox.scala:183)</div><div class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:262)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">at java.lang.Thread.run(Thread.java:745)</div><div class="line">Caused by: java.net.ConnectException: 拒绝连接: dkm/192.168.10.128:7077</div><div class="line">at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</div><div class="line">at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:739)</div><div class="line">at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:224)</div><div class="line">at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:289)</div><div class="line">at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:528)</div><div class="line">at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)</div><div class="line">at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)</div><div class="line">at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)</div><div class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)</div><div class="line">... 1 more</div><div class="line">17/10/09 13:05:24 INFO Worker: Retrying connection to master (attempt # 1)</div><div class="line">17/10/09 13:05:24 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:05:37 INFO Worker: Retrying connection to master (attempt # 2)</div><div class="line">17/10/09 13:05:37 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:05:50 INFO Worker: Retrying connection to master (attempt # 3)</div><div class="line">17/10/09 13:05:50 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:06:03 INFO Worker: Retrying connection to master (attempt # 4)</div><div class="line">17/10/09 13:06:03 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:06:16 INFO Worker: Retrying connection to master (attempt # 5)</div><div class="line">17/10/09 13:06:16 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:06:29 INFO Worker: Retrying connection to master (attempt # 6)</div><div class="line">17/10/09 13:06:29 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:07:47 INFO Worker: Retrying connection to master (attempt # 7)</div><div class="line">17/10/09 13:07:47 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:09:05 INFO Worker: Retrying connection to master (attempt # 8)</div><div class="line">17/10/09 13:09:05 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:10:23 INFO Worker: Retrying connection to master (attempt # 9)</div><div class="line">17/10/09 13:10:23 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:11:41 INFO Worker: Retrying connection to master (attempt # 10)</div><div class="line">17/10/09 13:11:41 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:12:59 INFO Worker: Retrying connection to master (attempt # 11)</div><div class="line">17/10/09 13:12:59 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:14:17 INFO Worker: Retrying connection to master (attempt # 12)</div><div class="line">17/10/09 13:14:17 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:15:35 INFO Worker: Retrying connection to master (attempt # 13)</div><div class="line">17/10/09 13:15:35 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:16:53 INFO Worker: Retrying connection to master (attempt # 14)</div><div class="line">17/10/09 13:16:53 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:18:11 INFO Worker: Retrying connection to master (attempt # 15)</div><div class="line">17/10/09 13:18:11 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:19:29 INFO Worker: Retrying connection to master (attempt # 16)</div><div class="line">17/10/09 13:19:29 INFO Worker: Connecting to master dkm:7077...</div><div class="line">17/10/09 13:20:47 ERROR Worker: All masters are unresponsive! Giving up.</div></pre></td></tr></table></figure></li></ul><p>既然如此，那干脆不启动第二个Master，Start-all 后，会发现集群正常，但是没有第二个Master。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 HA 中 Spark worker节点连接Master的问题&lt;/p&gt;
    
    </summary>
    
      <category term="Spark" scheme="http://gmle.github.io/categories/Spark/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Spark" scheme="http://gmle.github.io/tags/Spark/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于Spark环境变量问题</title>
    <link href="http://gmle.github.io/2017/09/13/%E5%85%B3%E4%BA%8ESpark%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://gmle.github.io/2017/09/13/关于Spark环境变量问题/</id>
    <published>2017-09-13T02:07:56.000Z</published>
    <updated>2017-11-06T08:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次因为spark内置环境问题引发的惨案</p><a id="more"></a><h2 id="问题：Spark在spark-env-sh中的环境变量不生效"><a href="#问题：Spark在spark-env-sh中的环境变量不生效" class="headerlink" title="问题：Spark在spark-env.sh中的环境变量不生效"></a>问题：Spark在spark-env.sh中的环境变量不生效</h2><!-- more --><p>错误日志</p><ul><li>Terminal<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@ceshi3 sbin]# ./start-slaves.sh </div><div class="line">- /usr/local/spark-1.6.0-bin-hadoop2.6/conf/spark-env.sh: line 9: export: `/usr/local/spark-1.6.0-bin-hadoop2.6/lib/spark-assembly-1.6.0-hadoop2.6.0.jar': not a valid identifier</div><div class="line">- ceshi3: /usr/local/spark-1.6.0-bin-hadoop2.6/conf/spark-env.sh: line 9: export: `/usr/local/spark-1.6.0-bin-hadoop2.6/lib/spark-assembly-1.6.0-hadoop2.6.0.jar': not a valid identifier</div><div class="line">- ceshi3: starting org.apache.spark.deploy.worker.Worker, logging to /usr/local/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-ceshi3.out</div><div class="line">- ceshi3: failed to launch org.apache.spark.deploy.worker.Worker:</div><div class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: 没有那个文件或目录</div><div class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: exec: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: cannot execute: 没有那个文件或目录</div><div class="line">- ceshi3: full log in /usr/local/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-ceshi3.out</div></pre></td></tr></table></figure></li></ul><p>发现启动worker的时候会出现错误：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: 没有那个文件或目录</div><div class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: exec: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: cannot execute: 没有那个文件或目录</div></pre></td></tr></table></figure></p><p>这个bin/java明明是$ JAVA_HOME 的，为什么会变为 $SPARK_HOME 呢</p><p>既然启动报错，而且报的是 $JAVA_HOME，那就要看几个东西:一个是正常的系统变量配置，再一个就是在要启动的服务里是否使用了这个配置变量，再确认下自己的配置是否已经有了。</p><h2 id="查看-spark-关于环境变量的配置文件"><a href="#查看-spark-关于环境变量的配置文件" class="headerlink" title="查看 spark 关于环境变量的配置文件"></a>查看 spark 关于环境变量的配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=dk31:2181,dk32:2181,dk34:2181 -Dspark.deploy.zookeeper.dir=/spark"</div><div class="line">export JAVA_HOME=$&#123;JAVA_HOME&#125;</div><div class="line">export HADOOP_HOME=/usr/local/hadoop-2.6.0</div><div class="line">export HADOOP_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</div><div class="line">export SCALA_HOME=/usr/local/scala-2.10.4</div><div class="line">export SPARK_WORKER_MEMORY=4g</div><div class="line">export SPARK_EXECUTOR_MEMORY=2g</div><div class="line">export SPARK_DRIVER_MEMORY=1g</div><div class="line">export SPARK_WORKER_CORES=4</div><div class="line">export SPARK_CLASSPATH=/usr/local/spark-1.6.0-bin-hadoop2.6/lib/mysql-connector-java.jar</div><div class="line">export SPARK_CLASSPATH=$SPARK_CLASSPATH:$CLASSPATH</div></pre></td></tr></table></figure><p>发现 $JAVA_HOME 变量是取的系统变量·，但是系统变量为什么取不到？</p><p>查了下：在脚本中使用export, 只在脚本中有效，退出这个脚本，设置的变量就没有了。<br>由于spark-class使用了 spark-env.sh 在使用的时候 已经取不到该值，所以无效了。<br>但是想不通为什么会变成 $SPARK_HOME 的变量</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次因为spark内置环境问题引发的惨案&lt;/p&gt;
    
    </summary>
    
      <category term="Spark" scheme="http://gmle.github.io/categories/Spark/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Spark" scheme="http://gmle.github.io/tags/Spark/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven一键安装 centos平台</title>
    <link href="http://gmle.github.io/2017/09/12/yum%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85maven/"/>
    <id>http://gmle.github.io/2017/09/12/yum一键安装maven/</id>
    <published>2017-09-12T02:44:47.000Z</published>
    <updated>2017-09-12T02:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>maven一键安装</code></pre><a id="more"></a><h2 id="添加maven的仓库"><a href="#添加maven的仓库" class="headerlink" title="添加maven的仓库"></a>添加maven的仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo</div></pre></td></tr></table></figure><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install apache-maven</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;maven一键安装
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="linux" scheme="http://gmle.github.io/categories/linux/"/>
    
    
      <category term="Centos" scheme="http://gmle.github.io/tags/Centos/"/>
    
      <category term="maven" scheme="http://gmle.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>C++标准库</title>
    <link href="http://gmle.github.io/2017/08/04/C++%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <id>http://gmle.github.io/2017/08/04/C++标准库/</id>
    <published>2017-08-04T09:17:18.000Z</published>
    <updated>2017-08-04T09:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-标准库可以分为两个部分："><a href="#C-标准库可以分为两个部分：" class="headerlink" title="C++标准库可以分为两个部分："></a>C++标准库可以分为两个部分：</h2><ul><li>标准函数库：继承自C语言；</li><li>面向对象库：是类及其相关函数的集合；</li></ul><a id="more"></a><h2 id="标准函数库："><a href="#标准函数库：" class="headerlink" title="标准函数库："></a>标准函数库：</h2><h4 id="输入-输出I-O-；"><a href="#输入-输出I-O-；" class="headerlink" title="输入 / 输出I/O ；"></a>输入 / 输出I/O ；</h4><ul><li>字符串和字符处理；</li><li>数学；</li><li>时间、日期和本地化；</li><li>动态分配；</li><li>其他；</li><li>宽字符函数；<h2 id="面向对象类："><a href="#面向对象类：" class="headerlink" title="面向对象类："></a>面向对象类：</h2></li><li>标准的C++ I/O类；</li><li>String类；</li><li>数值类；</li><li>STL容器类；</li><li>STL算法；</li><li>STL函数对象；</li><li>STL迭代器；</li><li>STL分配器；</li><li>本地化库；</li><li>异常处理类；</li><li>杂项支持库；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;C-标准库可以分为两个部分：&quot;&gt;&lt;a href=&quot;#C-标准库可以分为两个部分：&quot; class=&quot;headerlink&quot; title=&quot;C++标准库可以分为两个部分：&quot;&gt;&lt;/a&gt;C++标准库可以分为两个部分：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标准函数库：继承自C语言；&lt;/li&gt;
&lt;li&gt;面向对象库：是类及其相关函数的集合；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C++" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Bash/Shell调用MySQL并忽略警告</title>
    <link href="http://gmle.github.io/2017/06/23/Bash%E8%B0%83%E7%94%A8MySql/"/>
    <id>http://gmle.github.io/2017/06/23/Bash调用MySql/</id>
    <published>2017-06-23T06:09:03.000Z</published>
    <updated>2017-06-25T09:26:19.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Shell对MySQL的调用与脚本中如何写</code></pre><h2 id="Shell脚本如何搞定-MySQL的增删改查"><a href="#Shell脚本如何搞定-MySQL的增删改查" class="headerlink" title="Shell脚本如何搞定 MySQL的增删改查"></a>Shell脚本如何搞定 MySQL的增删改查</h2><a id="more"></a><p>用Shell对mysql操作非常的简单<br>我们利用 mysql 命令去操作数据库里面的所有东西。</p><ul><li>shell脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 一坨一坨的运行：</span></div><div class="line">mysql -uroot -p123456 -e <span class="string">"</span></div><div class="line"><span class="string">select * from tmp_test where tmp_name = 'a';</span></div><div class="line"><span class="string">select * from tmp_test where tmp_name = 'b';</span></div><div class="line"><span class="string">select * from tmp_test where tmp_id = 1;</span></div><div class="line"><span class="string">select tmp_name from tmp_test where tmp_id = 2;</span></div><div class="line"><span class="string">quit</span></div><div class="line"><span class="string">"</span></div><div class="line"></div><div class="line"><span class="comment"># 赋值：</span></div><div class="line">id=$(mysql -uroot -p123456 -e <span class="string">"SELECT tmp_id from tmp_test WHERE tmp_name = 'a';"</span>)</div><div class="line"><span class="comment"># 会发现还有字段名字，加参数去掉字段名，只保留我们要查询的：</span></div><div class="line">id=$(mysql -uroot -p123456 -Bse <span class="string">"SELECT tmp_id from tmp_test WHERE tmp_name = 'a';"</span>)</div></pre></td></tr></table></figure></li></ul><p>过后我们会发现每次查询之后会出现警告，每次都出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</div></pre></td></tr></table></figure></p><h2 id="MySQL-版本-5-6-的安全策略"><a href="#MySQL-版本-5-6-的安全策略" class="headerlink" title="MySQL 版本 5.6+ 的安全策略"></a>MySQL 版本 5.6+ 的安全策略</h2><p>MySQL5.6版本向上有一个密码安全问题，即在命令行输入密码会出现警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -proot  </div><div class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</div></pre></td></tr></table></figure><p>读取配置文件的参数也不可以，这样我们 需要指定一个mysql的配置文件作为mysql的配置输入进去：</p><p>cnf配置文件<br>my.cnf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">[mysql]</div><div class="line">password=root</div></pre></td></tr></table></figure></p><p>然后再在脚本中调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># 继续赋值，这样就不会出现警告信息：</span></div><div class="line">id=$(mysql --defaults-file=./my.cnf -uroot -Bse <span class="string">"SELECT tmp_id from tmp_test WHERE tmp_name = 'a';"</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Shell对MySQL的调用与脚本中如何写
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Shell脚本如何搞定-MySQL的增删改查&quot;&gt;&lt;a href=&quot;#Shell脚本如何搞定-MySQL的增删改查&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本如何搞定 MySQL的增删改查&quot;&gt;&lt;/a&gt;Shell脚本如何搞定 MySQL的增删改查&lt;/h2&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://gmle.github.io/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Bash" scheme="http://gmle.github.io/tags/Bash/"/>
    
      <category term="MySQL" scheme="http://gmle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在Centos6.5下升级python至3.6.0</title>
    <link href="http://gmle.github.io/2017/05/11/centos6.5%E4%B8%8Bpython2.6.6%E5%8D%87%E7%BA%A7%E8%87%B33.6/"/>
    <id>http://gmle.github.io/2017/05/11/centos6.5下python2.6.6升级至3.6/</id>
    <published>2017-05-11T02:16:11.000Z</published>
    <updated>2017-05-11T07:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="此次升级保留旧版本的环境。"><a href="#此次升级保留旧版本的环境。" class="headerlink" title="此次升级保留旧版本的环境。"></a>此次升级保留旧版本的环境。</h2><a id="more"></a><h2 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h2><h3 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum groupinstall -y developement</div></pre></td></tr></table></figure><h3 id="安装python3解码支持包"><a href="#安装python3解码支持包" class="headerlink" title="安装python3解码支持包"></a>安装python3解码支持包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y zlib-devel openssl-devel sqlite-devel bzip2-devel</div></pre></td></tr></table></figure><h2 id="准备更新版本"><a href="#准备更新版本" class="headerlink" title="准备更新版本"></a>准备更新版本</h2><h3 id="验证原有的python版本"><a href="#验证原有的python版本" class="headerlink" title="验证原有的python版本"></a>验证原有的python版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -V</div></pre></td></tr></table></figure><p>python 2.6.6</p><h3 id="下载python3-6-0包"><a href="#下载python3-6-0包" class="headerlink" title="下载python3.6.0包"></a>下载python3.6.0包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</div></pre></td></tr></table></figure><h3 id="解压编译python安装包"><a href="#解压编译python安装包" class="headerlink" title="解压编译python安装包"></a>解压编译python安装包</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xz -d Python-3.6.0.tar.xz</div><div class="line">tar -xvf Python-3.6.0.tar</div></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd Python-3.6.0</div><div class="line"><span class="meta">#</span><span class="bash"> 配置安装路径</span></div><div class="line">./configure --prefix=/usr/local</div></pre></td></tr></table></figure><ul><li><p>如果出现编译错误可能是因为gcc gcc-c++版本太低或者未安装，使用代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc gcc-c++</div></pre></td></tr></table></figure></li><li><p>进行安装，然后重新编译./configure</p><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make altinstall</div></pre></td></tr></table></figure></li></ul><h3 id="建立软连接-就是快捷方式"><a href="#建立软连接-就是快捷方式" class="headerlink" title="建立软连接(就是快捷方式)"></a>建立软连接(就是快捷方式)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv /usr/bin/python /usr/bin/python2.6.6    ##你的python版本可能不同</div><div class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python</div></pre></td></tr></table></figure><ul><li><p>重新验证python版本，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -V</div></pre></td></tr></table></figure></li><li><p>python3.6.0</p></li></ul><h3 id="yum指令会报错，将其重新指向旧版本的python"><a href="#yum指令会报错，将其重新指向旧版本的python" class="headerlink" title="yum指令会报错，将其重新指向旧版本的python"></a>yum指令会报错，将其重新指向旧版本的python</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/bin/yum</div></pre></td></tr></table></figure><ul><li>将文件的头部#！/usr/bin/python改为#！/usr/bin/python2.6.6</li></ul><h3 id="安装新pip"><a href="#安装新pip" class="headerlink" title="安装新pip"></a>安装新pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> wget https://pypi.python.org/packages/<span class="built_in">source</span>/p/pip/pip-1.3.1.tar.gz --no-check-certificate</span></div></pre></td></tr></table></figure><h4 id="解压安装pip"><a href="#解压安装pip" class="headerlink" title="解压安装pip"></a>解压安装pip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chmod +x pip-1.3.1.tar.gz</div><div class="line">tar xzvf pip-1.3.1.tar.gz</div><div class="line">cd pip-1.3.1</div><div class="line">python setup.py install</div></pre></td></tr></table></figure><h4 id="查看pip安装"><a href="#查看pip安装" class="headerlink" title="查看pip安装"></a>查看pip安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip -V</div></pre></td></tr></table></figure><ul><li>pip 1.3.1 from /usr/local/lib/python3.6/site-packages/pip-1.3.1-py3.6.egg (python 3.6)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;此次升级保留旧版本的环境。&quot;&gt;&lt;a href=&quot;#此次升级保留旧版本的环境。&quot; class=&quot;headerlink&quot; title=&quot;此次升级保留旧版本的环境。&quot;&gt;&lt;/a&gt;此次升级保留旧版本的环境。&lt;/h2&gt;
    
    </summary>
    
      <category term="Centos" scheme="http://gmle.github.io/categories/Centos/"/>
    
    
      <category term="Centos" scheme="http://gmle.github.io/tags/Centos/"/>
    
      <category term="Python" scheme="http://gmle.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下配置Hadoop和Spark</title>
    <link href="http://gmle.github.io/2017/05/02/MacOS%E5%AE%89%E8%A3%85Hadoop&amp;Spark/"/>
    <id>http://gmle.github.io/2017/05/02/MacOS安装Hadoop&amp;Spark/</id>
    <published>2017-05-02T07:49:44.000Z</published>
    <updated>2017-05-03T06:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先，准备MacOS环境"><a href="#首先，准备MacOS环境" class="headerlink" title="首先，准备MacOS环境"></a>首先，准备MacOS环境</h2><pre><code>略过Java、Scala、Python的环境安装，从Hadoop和Spark说起</code></pre><a id="more"></a><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><p>安装Hadoop，最简单的安装方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install hadoop</div></pre></td></tr></table></figure></p><h4 id="找到安装目录"><a href="#找到安装目录" class="headerlink" title="找到安装目录"></a>找到安装目录</h4><pre><code>安装完成后，找到Hadoop配置文件目录：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop</div></pre></td></tr></table></figure><h4 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/Cellar/hadoop/2.7.3/libexec/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/Cellar/hadoop/2.7.3/libexec/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/Cellar/hadoop/2.7.3/libexec/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Hadoop environment configs  </span></div><div class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec  </div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin</div></pre></td></tr></table></figure><h4 id="格式化HDFS"><a href="#格式化HDFS" class="headerlink" title="格式化HDFS"></a>格式化HDFS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/bin  </div><div class="line">./hdfs namenode -format</div></pre></td></tr></table></figure><h4 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/sbin  </div><div class="line">./start-all.sh</div></pre></td></tr></table></figure><p>在终端输入 jps 查看java进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1206 DataNode  </div><div class="line">1114 NameNode  </div><div class="line">1323 SecondaryNameNode</div></pre></td></tr></table></figure></p><h2 id="安装Spark"><a href="#安装Spark" class="headerlink" title="安装Spark"></a>安装Spark</h2><p>Spark的安装也是使用 brew<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install apache-spark</div></pre></td></tr></table></figure></p><h4 id="找到安装目录-1"><a href="#找到安装目录-1" class="headerlink" title="找到安装目录"></a>找到安装目录</h4><p>找到Spark配置文件目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec/conf</div></pre></td></tr></table></figure></p><h4 id="修改spark-env-sh"><a href="#修改spark-env-sh" class="headerlink" title="修改spark-env.sh"></a>修改spark-env.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cp spark-env.sh.template spark-env.sh</div><div class="line">vi spark-env.sh</div><div class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec  </div><div class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home</div></pre></td></tr></table></figure><h4 id="加入环境变量"><a href="#加入环境变量" class="headerlink" title="加入环境变量"></a>加入环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec  </div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;SPARK_HOME&#125;</span>/bin</div></pre></td></tr></table></figure><h4 id="启动Spark"><a href="#启动Spark" class="headerlink" title="启动Spark"></a>启动Spark</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/Cellar/apache-spark/1.6.0/bin  </div><div class="line">./start-all.sh</div></pre></td></tr></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">jps</div><div class="line"></div><div class="line">6052 Worker</div><div class="line">6022 Master</div><div class="line">6728 Jps</div><div class="line">5546 NameNode</div><div class="line">5739 SecondaryNameNode</div><div class="line">5947 NodeManager</div><div class="line">5630 DataNode</div><div class="line">5855 ResourceManager</div></pre></td></tr></table></figure><h2 id="配置Pycharm开发spark应用"><a href="#配置Pycharm开发spark应用" class="headerlink" title="配置Pycharm开发spark应用"></a>配置Pycharm开发spark应用</h2><p>打开Pycharm（我的python版本是2.7）<br>新建xxxx，新建类：一个简单的wordcount<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</div><div class="line"></div><div class="line">logFile = <span class="string">"/Users/admin/Desktop/BackUp"</span></div><div class="line">sc = SparkContext(<span class="string">"local"</span>,<span class="string">"Simple App"</span>)</div><div class="line">logData = sc.textFile(logFile).cache()</div><div class="line"></div><div class="line">numAs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'a'</span> <span class="keyword">in</span> s).count()</div><div class="line">numBs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'b'</span> <span class="keyword">in</span> s).count()</div><div class="line"></div><div class="line">print(<span class="string">"Lines with a: %i, lines with b: %i"</span>%(numAs, numBs))</div></pre></td></tr></table></figure></p><p>F4打开当前可运行代码的配置项<br>Environment Variables 选项填写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PYTHONPATH    /usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec/python</div></pre></td></tr></table></figure></p><p>至此，环境完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先，准备MacOS环境&quot;&gt;&lt;a href=&quot;#首先，准备MacOS环境&quot; class=&quot;headerlink&quot; title=&quot;首先，准备MacOS环境&quot;&gt;&lt;/a&gt;首先，准备MacOS环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;略过Java、Scala、Python的环境安装，从Hadoop和Spark说起
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="MacOS" scheme="http://gmle.github.io/categories/MacOS/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="MacOS" scheme="http://gmle.github.io/tags/MacOS/"/>
    
      <category term="Spark" scheme="http://gmle.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>HBase的数据模型</title>
    <link href="http://gmle.github.io/2016/09/19/HBase%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://gmle.github.io/2016/09/19/HBase的数据模型/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="#介绍">介绍</a><br><a href="#概览">概览</a><br><a href="#行">行</a><br><a href="#列簇">列簇</a><br><a href="#时间戳">时间戳</a></p><p><a href="http://gmle.github.io/2016/05/05/HBase%E7%9A%84%E5%88%97%E6%97%8F/">此篇为参考文章</a></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre><code>HBase 的数据模型是继 Bigtable 数据模型的之后的克隆版，特别适用于密集的数据系统。也就是HBase是通过Google的BigTable演变而来</code></pre><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>看简单点，HBase可以概括成一个Map</p><pre><code>&gt;Map&lt;byte[], Map&lt;byte[], Map&lt;byte[], Map&lt;Long, byte[]&gt;&gt;&gt;第一个Map是映射从 row keys 到 column families。第二个Map是映射从 column families 到他们的 column keys。第三个Map是映射从 column keys 到他们的 timestamps 。最后，最后的Map映射 timestamps 到一个单一的值。</code></pre><p>keys 一般为 字符串 strings， timestamps 是一个长整型 longs。<br>而值则为一个不解释的字节数组。<br>列的 keys 总在其 families 后面，表现如：family:key。因为一个 family 映射到另一个其他的map，这在理论上允许一个 family 包含无限个 column keys。<br>因此，为了获取一个值，用户需要使用三个 keys 来 get ：<br>    row key+column key+timestamp -&gt; value<br>    行键+列键+时间戳 -&gt; 值</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><p>HBase 以数组格式来处理 row key，但 row key 本身是有字符串的形式表现。row key Map 一个特性就是以一个词典顺序来保存。例如，从1到100的数字，就是按照 1,10,100,11,12,13,14,15,16,17,18,19,2,20,21,…,9,91,92,93,94,95,96,97,98,99 这样的方式来保存。</p><p>要想以自然顺序来保存整型数，row keys 必须在左边以0填充。利用这一点，row key Map 的功能可以通过提供一个 scaner 来增强， scaner 带有一个 start row key 和 一个 stop row key。例如，如果 row keys 是日期格式 YYYYMMDD，获取 2008年7月整个月的内容，就是打开一个 scaner （20080700到20080800）。它并不关心指定的 row keys 存在与否，唯一要关心的，就是这个调用不会返回 stop row key，因此，stop row key 必须给 scaner 指定好。</p><h2 id="列簇"><a href="#列簇" class="headerlink" title="列簇"></a>列簇</h2><p>在 Hbase中，列成员重组具有同一性质的数据，并不限制数据类型。簇是表模式的一部分，为每行保存同种数据。与 froms rows to forws 不同的是 column keys 可以是稀少的。例如，row “20080702” 可以拥有自己的“info:”成员，该成员下有如下几个 column keys：<br>info:aaa<br>info:bbb<br>info:ccc<br>同样，row “20080703”仅有：<br>info:12342<br>在使用 column keys 的时候，开发者必须要非常小心。因为长度为0 的 key是允许的，这说明，在前面的例子中，数据可以被插入到 column key “info:” 中。我们强烈推荐，仅仅在没有其他的 keys 指定时使用空的 key。同样，由于一个成员中的数据是同一种类的，参考性能与时间戳 ，很多属性可以指定。</p><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>根据成员的配置情况，HBase的值可以是以多版本的方式保存。缺省情况下，HBase将每个新值的时间戳设置为当前时间 milliseconds，并且当一个 cell 被请求时，返回最新的版本。开发者可以在插入数据时自定义时间戳，然后再通过指定这个时间戳来重新获取该值。<br>Family Attributes成员属性<br>可以为每一个簇指定下面的属性：</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#概览&quot;&gt;概览&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#行&quot;&gt;行&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#列簇&quot;&gt;列簇&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#时间戳&quot;&gt;时间戳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gmle.github.io/2016/05/05/HBase%E7%9A%84%E5%88%97%E6%97%8F/&quot;&gt;此篇为参考文章&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HBase" scheme="http://gmle.github.io/categories/HBase/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HBase" scheme="http://gmle.github.io/tags/HBase/"/>
    
      <category term="数据模型" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop_对HDFS中文件的操作</title>
    <link href="http://gmle.github.io/2016/09/19/HDFS%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://gmle.github.io/2016/09/19/HDFS的文件操作/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Hadoop没有当前目录的概念，当然也就没有 “cd” 命令HDFS文件操作的方法。</code></pre><h2 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h2><p>上一篇文章已经写到命令行方式操作HDFS，不再多说。<br><a href="http://gmle.github.io/2016/04/21/HSFS%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/">进入传送门～</a></p><a id="more"></a><p>根据上一篇文章，写入两个文件：<br>Web查看文件的方式：<br>text1 : hello world.<br>text2 : hello hadoop.<br><img src="http://7xt0cb.com2.z0.glb.clouddn.com/文件访问方式.png" alt="Web查看文件的方式"></p><h2 id="Java-API操作HDFS"><a href="#Java-API操作HDFS" class="headerlink" title="Java API操作HDFS"></a>Java API操作HDFS</h2><p>新建一个Maven项目，不再细说<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lesion<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bigData<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- log4j日志包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-beta9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Hadoop开发包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><p>新建一个类，写入如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.lesion.data;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created in Intellij IDEA .</span></div><div class="line"><span class="comment"> * Author : 王乐.</span></div><div class="line"><span class="comment"> * Date : 2016.04.19.20.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 说明：读取hdfs中的文件内容</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//hdfs的地址</span></div><div class="line">        String uri = <span class="string">"hdfs://lele:9000/"</span>;</div><div class="line">        Configuration config = <span class="keyword">new</span> Configuration();</div><div class="line">        FileSystem fs = FileSystem.get(URI.create(uri), config);</div><div class="line"></div><div class="line">        <span class="comment">// 显示在hdfs的/tmp/input下指定文件的内容</span></div><div class="line">        InputStream is = fs.open(<span class="keyword">new</span> Path(<span class="string">"/user/test1.txt"</span>));</div><div class="line">        IOUtils.copyBytes(is, System.out, <span class="number">1024</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行之后：<br>Hello<br><img src="http://7xt0cb.com2.z0.glb.clouddn.com/Hello-Hadoop.png" alt="美美的Hello"></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Hadoop没有当前目录的概念，当然也就没有 “cd” 命令
HDFS文件操作的方法。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;命令行方式&quot;&gt;&lt;a href=&quot;#命令行方式&quot; class=&quot;headerlink&quot; title=&quot;命令行方式&quot;&gt;&lt;/a&gt;命令行方式&lt;/h2&gt;&lt;p&gt;上一篇文章已经写到命令行方式操作HDFS，不再多说。&lt;br&gt;&lt;a href=&quot;http://gmle.github.io/2016/04/21/HSFS%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/&quot;&gt;进入传送门～&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://gmle.github.io/tags/HDFS/"/>
    
      <category term="HDFS操作" scheme="http://gmle.github.io/tags/HDFS%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce架构及原理</title>
    <link href="http://gmle.github.io/2016/09/19/MapReduce%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"/>
    <id>http://gmle.github.io/2016/09/19/MapReduce架构原理/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Hadoop中MapReduce的架构以及原理。</code></pre><h2 id="MapReduce介绍"><a href="#MapReduce介绍" class="headerlink" title="MapReduce介绍"></a>MapReduce介绍</h2><ul><li>MapReduce 编程模型<ul><li>Google提出的框架 主要用于搜索领域</li><li>一种分布式计算模型框架解决海量数据的计算问题</li><li>MapReduce将整个并行计算过程抽象到两个函数<ul><li>map（映射）：对一些独立元素组成的列表的每一个元素进行指定的操作，可以高度并行</li><li>Reduce（化简）：队一个列表的元素进行合并</li></ul></li><li>一个简单的MapReduce程序只需要指定map()、reduce()、input和output，剩下的事由框架来执行。</li></ul></li></ul><a id="more"></a><h2 id="MapReduce特点"><a href="#MapReduce特点" class="headerlink" title="MapReduce特点"></a>MapReduce特点</h2><pre><code>- 高容错- 高扩展- 编程简单- 适合大数据离线批量处理</code></pre><h2 id="Map任务处理"><a href="#Map任务处理" class="headerlink" title="Map任务处理"></a>Map任务处理</h2><pre><code>* 读取输入文件内容，解析成key，value对。对输入文件的没一行，解析成key，value对。每一个键值对调用一次map函数* 写自己的逻辑，处理输入的key，value，转换成新的key，value输出* 对输出的key、value进行分区* 对不同分区的数据，按照key进行排序】分组。相同的key的value放到一个集合中。</code></pre><h2 id="reduce-任务处理"><a href="#reduce-任务处理" class="headerlink" title="reduce 任务处理"></a>reduce 任务处理</h2><pre><code>* 对多个map任务的输出，按照不用的分区，通过网络copy到不同的reduce节点* 对多个map任务的输出进行合并、排序。写reduce函数自己的逻辑，对哦输入的key、value处理，转换成新的key、value输出。* 把reduce的输出保存到文件中</code></pre><p>MapReduce键值对格式：<br><img src="http://7xt0cb.com2.z0.glb.clouddn.com/mapreduce键值对格式.png" alt="键值对格式 "><br>因为会有不同的结果，所以Reduce的 v2 会是数组的形式存储多个值。</p><h2 id="MR过程中各个角色的作用："><a href="#MR过程中各个角色的作用：" class="headerlink" title="MR过程中各个角色的作用："></a>MR过程中各个角色的作用：</h2><pre><code>* jobClient：提交作业* jobTracker：初始化作业，分配作业，TaskTracker与其进行通信，协调监控整个作业* TaskTracker：定期与JobTracker通信，执行Map任务和Reduce任务* HDFS：保存作业的数据、配置、jar包、结果等。</code></pre><h2 id="作业提交流程"><a href="#作业提交流程" class="headerlink" title="作业提交流程"></a>作业提交流程</h2><pre><code>* 提交作业准备    * 编写自己的MR程序    * 配置作业，保罗输入输出路径等等* 提交作业    *配置完成后，通过JobClient提交作业* 具体功能    * 与JobTracker通信得到一个jar的存储路径和JobId    * 输入输出路径检查、讲job jar拷贝到的HDFS    * 写job.xml、真正提交作业。</code></pre><h2 id="作业初始化"><a href="#作业初始化" class="headerlink" title="作业初始化"></a>作业初始化</h2><pre><code>* 客户端提交作业后，jobTracker会讲作业加入到队列，然后进行调度，默认的是FIFO方式* 具体功能    * 作业初始化主要是指 JobInProgress中完成的    * 读取分片信息    * 创建task包括Map和Reduce创建task包括Map和Reduce任务</code></pre><p>##　任务分配</p><pre><code>* TaskTracker 与JobTracker之间的通信和任务分配是通过心跳机制实现的* TaskTracker会主动定期向JobTracker发送报告 询问是否有任务要做， 如果有，就会申请到任务</code></pre><h2 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h2><pre><code>* 如果TaskTracker拿到任务，会将所有信息拷贝到本地，包括代码、配置、分片信息等* TarkTacker中的localizeJob()方法会被调用进行本地化，拷贝job.jar,jobconf.job.xml到本地* TaskTracker调用launchTaskForJob()方法加载启动任务</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Hadoop中MapReduce的架构以及原理。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;MapReduce介绍&quot;&gt;&lt;a href=&quot;#MapReduce介绍&quot; class=&quot;headerlink&quot; title=&quot;MapReduce介绍&quot;&gt;&lt;/a&gt;MapReduce介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MapReduce 编程模型&lt;ul&gt;
&lt;li&gt;Google提出的框架 主要用于搜索领域&lt;/li&gt;
&lt;li&gt;一种分布式计算模型框架解决海量数据的计算问题&lt;/li&gt;
&lt;li&gt;MapReduce将整个并行计算过程抽象到两个函数&lt;ul&gt;
&lt;li&gt;map（映射）：对一些独立元素组成的列表的每一个元素进行指定的操作，可以高度并行&lt;/li&gt;
&lt;li&gt;Reduce（化简）：队一个列表的元素进行合并&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个简单的MapReduce程序只需要指定map()、reduce()、input和output，剩下的事由框架来执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="MapReduce" scheme="http://gmle.github.io/tags/MapReduce/"/>
    
      <category term="架构" scheme="http://gmle.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="原理" scheme="http://gmle.github.io/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop与HDFS的一些常用命令</title>
    <link href="http://gmle.github.io/2016/09/19/HSFS%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://gmle.github.io/2016/09/19/HSFS中文件的一些操作命令/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Hadoop与HDFS文件操作的一些常用命令，记个笔记。</code></pre><h3 id="Hadoop启动"><a href="#Hadoop启动" class="headerlink" title="Hadoop启动"></a>Hadoop启动</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ./sbin/start-dfs.sh</div><div class="line">sudo ./sbin/start-yarn.sh</div></pre></td></tr></table></figure><h4 id="启动之后的访问地址"><a href="#启动之后的访问地址" class="headerlink" title="启动之后的访问地址"></a>启动之后的访问地址</h4><h6 id="查看任务的运行情况"><a href="#查看任务的运行情况" class="headerlink" title="查看任务的运行情况"></a>查看任务的运行情况</h6><p><a href="http://localhost:8088/" target="_blank" rel="external">http://localhost:8088/</a></p><h6 id="查看-NameNode-和-Datanode-信息，还可以在线查看-HDFS-中的文件。"><a href="#查看-NameNode-和-Datanode-信息，还可以在线查看-HDFS-中的文件。" class="headerlink" title="查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。"></a>查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。</h6><p><a href="http://localhost:50070" target="_blank" rel="external">http://localhost:50070</a></p><h3 id="HDFS命令"><a href="#HDFS命令" class="headerlink" title="HDFS命令"></a>HDFS命令</h3><h4 id="查看HDFS基本统计信息"><a href="#查看HDFS基本统计信息" class="headerlink" title="查看HDFS基本统计信息"></a>查看HDFS基本统计信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs  dfsadmin -report</div></pre></td></tr></table></figure><h4 id="格式化namenode"><a href="#格式化namenode" class="headerlink" title="格式化namenode"></a>格式化namenode</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs namenode -format</div></pre></td></tr></table></figure><h4 id="HSFS文件操作"><a href="#HSFS文件操作" class="headerlink" title="HSFS文件操作"></a>HSFS文件操作</h4><h6 id="列出跟目录下所有的文件"><a href="#列出跟目录下所有的文件" class="headerlink" title="列出跟目录下所有的文件"></a>列出跟目录下所有的文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs -ls /</div></pre></td></tr></table></figure><h6 id="path"><a href="#path" class="headerlink" title="path"></a>path</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs -rm -r /path</div></pre></td></tr></table></figure><h6 id="增加一个path目录"><a href="#增加一个path目录" class="headerlink" title="增加一个path目录"></a>增加一个path目录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs -mkdir /path</div></pre></td></tr></table></figure><h6 id="列出跟目录下所有的文件-1"><a href="#列出跟目录下所有的文件-1" class="headerlink" title="列出跟目录下所有的文件"></a>列出跟目录下所有的文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs -ls /</div></pre></td></tr></table></figure><h6 id="递归显示path下的所有文件"><a href="#递归显示path下的所有文件" class="headerlink" title="递归显示path下的所有文件"></a>递归显示path下的所有文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs -lsr /path</div></pre></td></tr></table></figure><h6 id="将本地文件或目录localSrc上传到HDFS中的dest路径"><a href="#将本地文件或目录localSrc上传到HDFS中的dest路径" class="headerlink" title="将本地文件或目录localSrc上传到HDFS中的dest路径"></a>将本地文件或目录localSrc上传到HDFS中的dest路径</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs –put /localSrc /dest</div></pre></td></tr></table></figure><h6 id="与-put命令相同"><a href="#与-put命令相同" class="headerlink" title="与-put命令相同"></a>与-put命令相同</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs –copyFromLocal /localSrc /dest</div></pre></td></tr></table></figure><h6 id="显示文件内容到标准输出上。"><a href="#显示文件内容到标准输出上。" class="headerlink" title="显示文件内容到标准输出上。"></a>显示文件内容到标准输出上。</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/hdfs dfs –cat /filename</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Hadoop与HDFS文件操作的一些常用命令，记个笔记。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Hadoop启动&quot;&gt;&lt;a href=&quot;#Hadoop启动&quot; class=&quot;headerlink&quot; title=&quot;Hadoop启动&quot;&gt;&lt;/a&gt;Hadoop启动&lt;/h3&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://gmle.github.io/tags/HDFS/"/>
    
      <category term="常用命令" scheme="http://gmle.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>HBase的配置(伪分布式)</title>
    <link href="http://gmle.github.io/2016/09/19/HBase%E7%9A%84%E9%85%8D%E7%BD%AE(%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F)/"/>
    <id>http://gmle.github.io/2016/09/19/HBase的配置(伪分布式)/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:38:09.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>HBase的CRUD</code></pre><p>###源码链接<br><a href="https://github.com/gmle/hbase" target="_blank" rel="external">https://github.com/gmle/hbase</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;HBase的CRUD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###源码链接&lt;br&gt;&lt;a href=&quot;https://github.com/gmle/hbase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/g
      
    
    </summary>
    
      <category term="HBase" scheme="http://gmle.github.io/categories/HBase/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HBase" scheme="http://gmle.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>hadoop常见面试题目（不定期更新）</title>
    <link href="http://gmle.github.io/2016/09/19/hadoop%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <id>http://gmle.github.io/2016/09/19/hadoop常见面试题目/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:38:19.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>整理一些面试题，以便与日后查看（不定期更新）</code></pre><h2 id="2016-04-21-–-更新"><a href="#2016-04-21-–-更新" class="headerlink" title="2016.04.21 – 更新"></a>2016.04.21 – 更新</h2><p>下面哪个程序负责 HDFS 数据存储？<br>    a)NameNode<br>    b)Jobtracker<br>    <font color="#ff0000">c)Datanode</font><br>    d)secondaryNameNode<br>    e)tasktracker</p><a id="more"></a><p>HDfS 中的 block 默认保存几份？<br>    <font color="#ff0000">a)3 份</font><br>    b)2 份<br>    c)1 份<br>    d)不确定</p><p>下列哪个程序通常与 NameNode 在一个节点启动？<br>    a)SecondaryNameNode<br>    b)DataNode<br>    c)TaskTracker<br>    <font color="#ff0000">d)Jobtracker</font></p><pre><code>&gt;此题分析：    hadoop的集群是基于master/slave模式，namenode和jobtracker属于master，datanode和tasktracker属于slave，master只有一个，而slave有多个SecondaryNameNode内存需求和NameNode在一个数量级上，所以通常secondary NameNode（运行在单独的物理机器上）和NameNode运行在不同的机器上。    JobTracker和TaskTracker；    JobTracker 对应于 NameNode；    TaskTracker 对应于 DataNode；    DataNode 和NameNode 是针对数据存放来而言的；    JobTracker和TaskTracker是对于MapReduce执行而言的。    mapreduce中几个主要概念，mapreduce整体上可以分为这么几条执行线索：obclient，JobTracker与TaskTracker。    1、JobClient会在用户端通过JobClient类将应用已经配置参数打包成jar文件存储到hdfs，并把路径提交到Jobtracker,然后由JobTracker创建每一个Task（即MapTask和ReduceTask）并将它们分发到各个TaskTracker服务中去执行。    2、JobTracker是一个master服务，软件启动之后JobTracker接收Job，负责调度Job的每一个子任务task运行于TaskTracker上，并监控它们，如果发现有失败的task就重新运行它。一般情况应该把JobTracker部署在单独的机器上。    3、TaskTracker是运行在多个节点上的slaver服务。TaskTracker主动与JobTracker通信，接收作业，并负责直接执行每一个任务。TaskTracker都需要运行在HDFS的DataNode上。</code></pre><p>Hadoop 作者 答案C Doug cutting<br>    a)Martin Fowler<br>    b)Kent Beck<br>    <font color="#ff0000">c)Doug cutting</font></p><p>下列哪项通常是集群的最主要瓶颈:<br>    a)CPU<br>    b)网络<br>    <font color="#ff0000">c)磁盘IO</font><br>    d)内存</p><pre><code>&gt;该题解析：    首先集群的目的是为了节省成本，用廉价的pc机，取代小型机及大型机。小型机和大型机有什么特点？    1.cpu处理能力强    2.内存够大    所以集群的瓶颈不可能是a和d    3.网络是一种稀缺资源，但是并不是瓶颈。    4.由于大数据面临海量数据，读写数据都需要io，然后还要冗余数据，hadoop一般备3份数据，所以IO就会打折扣。</code></pre><p>关于 SecondaryNameNode 哪项是正确的？<br>    a)它是 NameNode 的热备<br>    b)它对内存没有要求<br>    <font color="#ff0000">c)它的目的是帮助 NameNode 合并编辑日志，减少 NameNode 启动时间</font><br>    d)SecondaryNameNode 应与 NameNode 部署到一个节点。</p><p>下列哪项可以作为集群的管理？<br>    <font color="#ff0000">a)Puppet</font><br>    <font color="#ff0000">b)Pdsh</font><br>    c)Cloudera Manager<br>    <font color="#ff0000">d)Zookeeper</font></p><p>Cloudera 提供哪几种安装 CDH 的方法？<br>    <font color="#ff0000"><br>    a)Cloudera manager<br>    b)Tarball<br>    c)Yum<br>    d)Rpm<br>    </font></p><p>Ganglia 不仅可以进行监控，也可以进行告警。（ 正确）</p><pre><code>分析：此题的目的是考Ganglia的了解。严格意义上来讲是正确。ganglia作为一款最常用的Linux环境中的监控软件，它擅长的的是从节点中按照用户的需求以较低的代价采集数据。但是ganglia在预警以及发生事件后通知用户上并不擅长。最新的ganglia已经有了部分这方面的功能。但是更擅长做警告的还有Nagios。Nagios，就是一款精于预警、通知的软件。通过将Ganglia和Nagios组合起来，把Ganglia采集的数据作为Nagios的数据源，然后利用Nagios来发送预警通知，可以完美的实现一整套监控管理的系统。</code></pre><p>Block Size 是不可以修改的。（错误 ）</p><pre><code>分析：它是可以被修改的Hadoop的基础配置文件是hadoop-default.xml，默认建立一个Job的时候会建立Job的Config，Config首先读入hadoop-default.xml的配置，然后再读入hadoop-site.xml的配置（这个文件初始的时候配置为空），hadoop-site.xml中主要配置需要覆盖的hadoop-default.xml的系统级配置。</code></pre><p>Nagios 不可以监控 Hadoop 集群，因为它不提供 Hadoop 支持。（错误 ）</p><pre><code>分析：Nagios是集群监控工具，而且是云计算三大利器之一</code></pre><p>如果 NameNode 意外终止，SecondaryNameNode 会接替它使集群继续工作。（错误 ）</p><pre><code>分析：SecondaryNameNode是帮助恢复，而不是替代，如何恢复，可以查看</code></pre><p>Cloudera CDH 是需要付费使用的。（错误 ）</p><pre><code>分析：第一套付费产品是Cloudera Enterpris，Cloudera Enterprise在美国加州举行的 Hadoop 大会 (Hadoop Summit) 上公开，以若干私有管理、监控、运作工具加强 Hadoop 的功能。收费采取合约订购方式，价格随用的 Hadoop 叢集大小变动。</code></pre><p>Hadoop 是 Java 开发的，所以 MapReduce 只支持 Java 语言编写。（错误 ）</p><pre><code>分析：rhadoop是用R语言开发的，MapReduce是一个框架，可以理解是一种思想，可以使用其他语言开发。</code></pre><p>Hadoop 支持数据的随机读写。（错 ）</p><pre><code>分析：lucene是支持随机读写的，而hdfs只支持随机读。但是HBase可以来补救。HBase提供随机读写，来解决Hadoop不能处理的问题。HBase自底层设计开始即聚焦于各种可伸缩性问题：表可以很“高”，有数十亿个数据行；也可以很“宽”，有数百万个列；水平分区并在上千个普通商用机节点上自动复制。表的模式是物理存储的直接反映，使系统有可能提高高效的数据结构的序列化、存储和检索。</code></pre><p>NameNode 负责管理 metadata，client 端每次读写请求，它都会从磁盘中读取或则会写入 metadata 信息并反馈 client 端。（错误）</p><pre><code>此题分析：NameNode 不需要从磁盘读取 metadata，所有数据都在内存中，硬盘上的只是序列化的结果，只有每次 namenode 启动的时候才会读取。1）文件写入    Client向NameNode发起文件写入的请求。    NameNode根据文件大小和文件块配置情况，返回给Client它所管理部分DataNode的信息。    Client将文件划分为多个Block，根据DataNode的地址信息，按顺序写入到每一个DataNode块中。2）文件读取    Client向NameNode发起文件读取的请求。</code></pre><p>NameNode 本地磁盘保存了 Block 的位置信息。（ 个人认为正确，欢迎提出其它意见）</p><pre><code>分析：DataNode是文件存储的基本单元，它将Block存储在本地文件系统中，保存了Block的Meta-data，同时周期性地将所有存在的Block信息发送给NameNode。NameNode返回文件存储的DataNode的信息。Client读取文件信息。</code></pre><p>DataNode 通过长连接与 NameNode 保持通信。（ ）</p><pre><code>这个有分歧：具体正在找这方面的有利资料。下面提供资料可参考。首先明确一下概念：（1）.长连接    Client方与Server方先建立通讯连接，连接建立后不断开，然后再进行报文发送和接收。这种方式下由于通讯连接一直存在，此种方式常用于点对点通讯。（2）.短连接    Client方与Server每进行一次报文收发交易时才进行通讯连接，交易完毕后立即断开连接。此种方式常用于一点对多点通讯，比如多个Client连接一个Server.</code></pre><p>Hadoop 自身具有严格的权限管理和安全措施保障集群正常运行。（错误 ）</p><pre><code>hadoop只能阻止好人犯错，但是不能阻止坏人干坏事</code></pre><p>Slave 节点要存储数据，所以它的磁盘越大越好。（ 错误）</p><pre><code>分析：一旦Slave节点宕机，数据恢复是一个难题</code></pre><p>hadoop dfsadmin –report 命令用于检测 HDFS 损坏块。（错误 ）</p><p>Hadoop 默认调度器策略为 FIFO（正确 ）</p><p>集群内每个节点都应该配 RAID，这样避免单磁盘损坏，影响整个节点运行。（错误 ）</p><pre><code>分析：首先明白什么是RAID，可以参考百科磁盘阵列。这句话错误的地方在于太绝对，具体情况具体分析。题目不是重点，知识才是最重要的。因为hadoop本身就具有冗余能力，所以如果不是很严格不需要都配备RAID。具体参考第二题。</code></pre><p>因为 HDFS 有多个副本，所以 NameNode 是不存在单点问题的。（错误 ）</p><p>每个 map 槽就是一个线程。（错误 ）</p><pre><code>分析：首先我们知道什么是map 槽,map 槽-&gt;map slotmap slot 只是一个逻辑值 ( org.apache.hadoop.mapred.TaskTracker.TaskLauncher.numFreeSlots )，而不是对应着一个线程或者进程</code></pre><p>每个 map 槽就是一个线程。（错误 ）</p><pre><code>分析：首先我们知道什么是map 槽,map 槽-&gt;map slotmap slot 只是一个逻辑值 ( org.apache.hadoop.mapred.TaskTracker.TaskLauncher.numFreeSlots )，而不是对应着一个线程或者进程</code></pre><p>Mapreduce 的 input split 就是一个 block。（错误 ）</p><p> Hadoop 环境变量中的 HADOOP_HEAPSIZE 用于设置所有 Hadoop 守护线程的内存。它默认是 200 GB。（ 错误）</p><pre><code>hadoop为各个守护进程（namenode,secondarynamenode,jobtracker,datanode,tasktracker）统一分配的内存在hadoop-env.sh中设置，参数为HADOOP_HEAPSIZE，默认为1000M。</code></pre><p>NameNode 的 Web UI 端口是 50030，它通过 jetty 启动的 Web 服务。（错误 ）</p><p>DataNode 首次加入 cluster 的时候，如果 log 中报告不兼容文件版本，那需要 NameNode执行“Hadoop namenode -format”操作格式化磁盘。（错误 ）</p><pre><code>分析：首先明白介绍，什么ClusterIDClusterID添加了一个新的标识符ClusterID用于标识集群中所有的节点。当格式化一个Namenode，需要提供这个标识符或者自动生成。这个ID可以被用来格式化加入集群的其他Namenode。二次整理有的同学问题的重点不是上面分析内容：内容如下：这个报错是说明 DataNode 所装的Hadoop版本和其它节点不一致，应该检查DataNode的Hadoop版本</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;整理一些面试题，以便与日后查看（不定期更新）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2016-04-21-–-更新&quot;&gt;&lt;a href=&quot;#2016-04-21-–-更新&quot; class=&quot;headerlink&quot; title=&quot;2016.04.21 – 更新&quot;&gt;&lt;/a&gt;2016.04.21 – 更新&lt;/h2&gt;&lt;p&gt;下面哪个程序负责 HDFS 数据存储？&lt;br&gt;    a)NameNode&lt;br&gt;    b)Jobtracker&lt;br&gt;    &lt;font color=&quot;#ff0000&quot;&gt;c)Datanode&lt;/font&gt;&lt;br&gt;    d)secondaryNameNode&lt;br&gt;    e)tasktracker&lt;/p&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="面试" scheme="http://gmle.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Scala中的 Option、Some、None、Null、Nil、Nothing</title>
    <link href="http://gmle.github.io/2016/09/19/Scala%E4%B8%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB%E5%9E%8B/"/>
    <id>http://gmle.github.io/2016/09/19/Scala中的几个类型/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:37:09.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Scala的一些类型。</code></pre><a id="more"></a><h3 id="Scala的Option类型："><a href="#Scala的Option类型：" class="headerlink" title="Scala的Option类型："></a>Scala的Option类型：</h3><pre><code>Option可以存储任意类型的值，而Option的实例就是 Some 和 None 对象实例。    Some 和 None 都是 Option 的子类，而且都是 final 类型，所以没有派生子类。</code></pre><h4 id="Option的数据存取"><a href="#Option的数据存取" class="headerlink" title="Option的数据存取"></a>Option的数据存取</h4><pre><code>Option的数据存取就是对 Some 对象的操作。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">optionTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span>&#123;</div><div class="line"></div><div class="line">  val capitals = Map(<span class="string">"france"</span> -&gt; <span class="string">"paris"</span>, <span class="string">"japan"</span> -&gt; <span class="string">"tokyo"</span>)</div><div class="line"></div><div class="line">  <span class="function">def <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">    val a = capitals get <span class="string">"france"</span></div><div class="line">    val b = capitals get <span class="string">"a"</span></div><div class="line">    println(a)         <span class="comment">//Some（paris）</span></div><div class="line">    println(b)         <span class="comment">//None</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><pre><code>结果对象类型为Some或者None当程序给你回传Some的时候，代表这个函数成功的给了你一个String，而你可以通过get()函数拿到那个String；如果程序返回的是None，也就是没有String返回的时候，如果还要调用，则会抛出异常：NoSuchElementExpection。</code></pre><h3 id="Scala的Null类型："><a href="#Scala的Null类型：" class="headerlink" title="Scala的Null类型："></a>Scala的Null类型：</h3><pre><code>Null是所有AnyRef的子类，在Scala的类型系统中，AnyRef是Any的子类，同是Any子类的还有AnyVal。对应Java值类型的所有类型都是AnyVal的子类。所以Null可以赋值给虽有的引用类型，而不能赋值给值类型，这个java的语义是相同的。null是Null的唯一对象。</code></pre><h3 id="Scala的Nothing类型："><a href="#Scala的Nothing类型：" class="headerlink" title="Scala的Nothing类型："></a>Scala的Nothing类型：</h3><pre><code>Nothing是所有类型的子类，也是Null的子类，Nothing没有对象，但是可以用来定义类型。例如，如果一个方法抛出异常，则异常的返回值类型就是Nothing（不会返回）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">def <span class="title">get</span><span class="params">(index:Int)</span>:Int </span>= &#123;</div><div class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Expection(...)</div><div class="line"><span class="keyword">else</span> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><pre><code>if是表达式，必然有返回值，返回值必然会有类型。如果x&lt;0抛出异常，返回值的类型为Nothing，Nothing也是Int的子类，所以，if表达式的返回类型为Int，get方法的返回值类型也为Int</code></pre><h3 id="Scala的Nil类型："><a href="#Scala的Nil类型：" class="headerlink" title="Scala的Nil类型："></a>Scala的Nil类型：</h3><pre><code>Nil是一个空List,定义为 List[Nothing]，根据List的定义 LIst[+A]，所有的Nil是虽有List[T]的子类。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Scala的一些类型。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://gmle.github.io/categories/Scala/"/>
    
    
      <category term="Scala" scheme="http://gmle.github.io/tags/Scala/"/>
    
      <category term="Option" scheme="http://gmle.github.io/tags/Option/"/>
    
      <category term="Some" scheme="http://gmle.github.io/tags/Some/"/>
    
      <category term="None" scheme="http://gmle.github.io/tags/None/"/>
    
  </entry>
  
  <entry>
    <title>HBase的列簇</title>
    <link href="http://gmle.github.io/2016/09/19/HBase%E7%9A%84%E5%88%97%E7%B0%87/"/>
    <id>http://gmle.github.io/2016/09/19/HBase的列簇/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>对于HBase中的列簇，新手都会有这样的问题HBase的列有列族前缀和列组成，那么一个表中列族要怎么设定？是只设定一个？还是越多越好？还是根据什么设定几个？</code></pre><a id="more"></a><h2 id="何时用HBase"><a href="#何时用HBase" class="headerlink" title="何时用HBase"></a>何时用HBase</h2><pre><code>1.系统需要适应不同种类的数据格式和数据源，不能预先严格定义模式，需要处理大规模数据；2.不强调数据之间的关系，所要存储的数据是半结构化或非结构化的；3.数据非常稀疏；4.想要更好的进行扩展；</code></pre><p>比如谷歌就将BigTable用来存储网页的索引数据，索引数据就很好的满足了上面的几点要求。</p><h2 id="HBase的结构"><a href="#HBase的结构" class="headerlink" title="HBase的结构"></a>HBase的结构</h2><pre><code>表、行、列和单元格    先做一个简单的总结：最基本的单位是列（column），一列或者多列组成一行（row），并且由唯一的行键（row key）来确定存储。    一个表中有很多行，每一列可能有多个版本，在每一个单元格（Cell）中存储了不同的值。    HBase的行与行之间是有序的，按照row key的字典序进行排序，行键是唯一的，在一个表里只出现一次，否则就是在更新同一行，行键可以是任意的字节数组。    一行由若干列组成，其中的某些列又可以构成一个列族（column family），一个列族的所有列存储在同一个底层的存储文件里，这个文件称之为HFile。    列族需要在创建表的时候就定义好，数量也不宜过多。    列族名必须由可打印字符组成，创建表的时候不需要定义好列。    对列的引用格式通常为family：qualifier，qualifier也可以是任意的字节数组。    同一个列族里qualifier的名称应该唯一，否则就是在更新同一列，列的数量没有限制，可以有数百万个。    列值也没有类型和长度限定。    HBase会对row key的长度做检查，默认应该小于65536。</code></pre><p>一个可视化的HBase表如下：<br><img src="http://7xt0cb.com2.z0.glb.clouddn.com/HBase%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9B%BE%E8%A1%A8.jpg" alt="可视化HBase表"></p><p>Timestamp代表时间戳，默认由系统指定，用户也可以显示设置。使用不同的时间戳来区分不同的版本。一个单元格的不同版本的值按照时间戳降序排列在一起，在读取的时候优先取最新的值。用户可以指定每个值能保存的最大版本数.</p><p>HBase的存取模式如下（表，行键，列族，列，时间戳）-&gt; 值。即一个表中的某一行键的某一列族的某一列的某一个版本的值唯一。</p><p>行数据的存取操作是原子的，可以读取任意数目的列。目前还不支持跨行事务和跨表事务。</p><p>同一列族下的数据压缩在一起，访问控制磁盘和内存都在列族层面进行。</p><p>2.自动分区<br>    HBase中扩展和负载均衡的基本单元称作region，region本质上是以行键排序的连续存储空间。如果region过大，系统就会把它们动态拆分，相反的，就把多个region合并，以减少存储文件数量。<br>    一个表最开始只有一个region，用户开始向表中插入数据时，系统会检查region大小，确保不会超过配置的最大值，如果超过，会从region中行键的中间值一分为二，将该region分为大小大致相等的两个region。</p><p>3.存储格式<br>    HFile：HBase中KeyValue数据的存储格式。HFile是Hadoop的二进制格式文件。<br>    HLog：HBase中WAL（Write-Ahead-Log，预写式日志）文件的存储格式，物理上是Hadoop的Sequence File。</p><p>HFile的格式如下图：<br><img src="http://img.blog.csdn.net/20140731145136723" alt="HFile的存储格式"></p><p>HFile文件的长度可变，唯一固定的是File Info和Trailer。Trailer存储指向其他块的指针，它在持久化数据到文件结束时写入的，写入后，该文件就会变成不可变的数据存储文件。数据块（data blocks）中存储key-values，可以看做是一个MapFile。当block关闭操作时，第一个key会被写入index中，index文件在hfile关闭操作时写入。</p><p>KeyValue的具体格式如下图：<br><img src="http://img.blog.csdn.net/20140731145347373" alt="key-value"></p><p>上图中，keytype有四种类型，分别是Put、Delete、 DeleteColumn和DeleteFamily。RowLength为2个字节，Row长度不固定，ColumnFamilyLength为2个字节，ColumnFamily长度不固定，ColumnQualifier长度不固定，TimeStamp为4个字节，KeyType为1个字节。之所以不记录ColumnQualifier的长度是因为可以通过其他字段计算得到。</p><h2 id="HBase常用操作："><a href="#HBase常用操作：" class="headerlink" title="HBase常用操作："></a>HBase常用操作：</h2><p>List；<br>Create；<br>Put；<br>Scan；<br>Get；<br>Delete；<br>Disable；<br>Drop；</p><h2 id="列簇的设计"><a href="#列簇的设计" class="headerlink" title="列簇的设计"></a>列簇的设计</h2><pre><code>1、列簇的设计需要根据你的业务。那些可能被反复修改的数据表尽量使用单列簇。每个列簇在HDFS都有一个独立的HFILE，当某个ROWKEY的某个列簇数据被冲刷时，这个ROWKEY连带的其他列簇数据也会被一起冲刷，I/O负担很大。APACHE官方也提倡多列簇的设计方案，单列簇性能是最高的。而持久型数据，也就是一次写入，从不修改的数据，可以使用多列簇，原理相同，但目前任然提倡单列簇设计模式2、多列簇的效率问题参照13、所谓列簇分组，就相当于关系习惯数据库中，两个表被纵向合并，形成一张双列簇的表</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;对于HBase中的列簇，新手都会有这样的问题
HBase的列有列族前缀和列组成，
那么一个表中列族要怎么设定？
是只设定一个？还是越多越好？还是根据什么设定几个？
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="HBase" scheme="http://gmle.github.io/categories/HBase/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HBase" scheme="http://gmle.github.io/tags/HBase/"/>
    
      <category term="列族" scheme="http://gmle.github.io/tags/%E5%88%97%E6%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop_HDFS底层架构</title>
    <link href="http://gmle.github.io/2016/09/19/%E5%AF%B9HDFS%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/"/>
    <id>http://gmle.github.io/2016/09/19/对HDFS的一些认识/</id>
    <published>2016-09-19T00:53:20.000Z</published>
    <updated>2017-05-03T06:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是我对HDFS的认知与了解，并结合网上查阅的资料进行的整合。</code></pre><h2 id="HDFS设计基础与目标"><a href="#HDFS设计基础与目标" class="headerlink" title="HDFS设计基础与目标"></a>HDFS设计基础与目标</h2><ul><li>硬件错误是常态，因此需要冗余。<ul><li>错误检测和快速、自动的恢复是HDFS最核心的架构目标</li></ul></li><li>小文件不适合存储，适合存储超大文件</li><li>流式数据访问</li></ul><a id="more"></a><ul><li>流式数据访问，即数据劈来给你读取而非随机读写，Hadoop需要的是数据分析而不是事务处理</li><li>大规模数据集</li><li>简单一致性模型，为了降低系统复杂度，对文件采用一次写多次读的理念：文件一经写入，关闭，再也不能修改。</li><li>程序采用 “数据就近” 原则分配节点执行。</li></ul><h3 id="HDFS的底层架构"><a href="#HDFS的底层架构" class="headerlink" title="HDFS的底层架构"></a>HDFS的底层架构</h3><h4 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h4><p>  优点：</p><pre><code>- 传统文件系统最大问题是容量和吞吐来那个的限制- 多用户多应用的并行读写是分布式文件系统产生的根源- 扩充存储空间的成本低廉    - 物理层存储的分布式    - 基于科户籍/服务器模式    - 通常情况下基于操作系统的本地文件系统</code></pre><h3 id="HDFS体系结构"><a href="#HDFS体系结构" class="headerlink" title="HDFS体系结构"></a>HDFS体系结构</h3><p><img src="http://7xt0cb.com1.z0.glb.clouddn.com/Hadoop%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="Hadoop体系结构图"></p><ul><li>NameNode<ul><li>管理文件系统的命名空间</li><li>记录每个文件数据快再各个DataNode上的文职和副本信息</li><li>协调客户端对文件的访问</li><li>协调客户端对文件的访问</li><li>记录命名空间内的改动或空间本身属性的改动</li><li>NameNode使用事务日志记录HDFS元数据的变化，使用映像文件存储文件系统的命名空间，包括文件映射，文件属性等</li></ul></li><li>DataNode<ul><li>负责所在物理节点的存储管理</li><li>一次写入，多次读取（不能修改）</li><li>文件由数据块组成，典型块的大小  0-1.0之间版本大小-&gt; 64M  1-2.x 大小为 128M</li><li>数据块尽量散布到各个节点内</li></ul></li><li>事务日志</li><li>映像文件</li><li>SecondaryNameNode</li></ul><h3 id="HDFS的高可用性"><a href="#HDFS的高可用性" class="headerlink" title="HDFS的高可用性"></a>HDFS的高可用性</h3><ul><li>HDFS集群中NameNode存在单点故障。<ul><li>躲雨只有一个NameNode的集群，如果NameNode及其出现意外downtime，那么整个集群将无法使用，知道NameNode重新启动</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是我对HDFS的认知与了解，并结合网上查阅的资料进行的整合。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;HDFS设计基础与目标&quot;&gt;&lt;a href=&quot;#HDFS设计基础与目标&quot; class=&quot;headerlink&quot; title=&quot;HDFS设计基础与目标&quot;&gt;&lt;/a&gt;HDFS设计基础与目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;硬件错误是常态，因此需要冗余。&lt;ul&gt;
&lt;li&gt;错误检测和快速、自动的恢复是HDFS最核心的架构目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小文件不适合存储，适合存储超大文件&lt;/li&gt;
&lt;li&gt;流式数据访问&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://gmle.github.io/tags/HDFS/"/>
    
  </entry>
  
</feed>
