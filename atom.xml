<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘lele</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gmle.github.io/"/>
  <updated>2018-07-03T11:56:32.229Z</updated>
  <id>http://gmle.github.io/</id>
  
  <author>
    <name>忘了</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言的深拷贝与浅拷贝</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%ADstruct%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中struct的深拷贝与浅拷贝/</id>
    <published>2018-07-03T11:45:05.240Z</published>
    <updated>2018-07-03T11:56:32.229Z</updated>
    
    <content type="html"><![CDATA[<p>系统提供的赋值操作是 浅拷贝 – 简单值拷贝，逐字节拷贝<br>如果结构体中有属性 创建在堆区，就会出现问题，在释放期间，一段内存重复释放，一段内存泄露</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">People</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">&#125; peo;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    peo p1;</div><div class="line">    peo p2;</div><div class="line"></div><div class="line">    p1.name = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">64</span>);</div><div class="line">    <span class="built_in">strcpy</span>(p1.name, <span class="string">"a"</span>);</div><div class="line">    p2.name = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">128</span>);</div><div class="line">    <span class="built_in">strcpy</span>(p2.name, <span class="string">"bbbbbbbbb"</span>);</div><div class="line"></div><div class="line">    p1.age = <span class="number">10</span>;</div><div class="line">    p2.age = <span class="number">20</span>;</div><div class="line"></div><div class="line">    p1 = p2; <span class="comment">// 浅拷贝，值拷贝。</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 出现的问题：</span></div><div class="line"><span class="comment">     *  1、p1指向的内存会发生内存泄漏</span></div><div class="line"><span class="comment">     *  2、p1、p2指向的内存在释放的时候会发生重复释放。</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="comment">// 解决方法</span></div><div class="line">    p1.name = <span class="built_in">realloc</span>(p1.name, <span class="built_in">strlen</span>(p2.name));</div><div class="line">    <span class="built_in">memset</span>(p1.name, <span class="number">0</span>, <span class="built_in">strlen</span>(p2.name));</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(p1.name, p2.name);</div><div class="line">    p1.age = p2.age;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (p1.name != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">free</span>(p1.name);</div><div class="line">        p1.name = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (p2.name != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">free</span>(p2.name);</div><div class="line">        p2.name = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main06</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> &#123;</span></div><div class="line">        <span class="keyword">char</span> name[<span class="number">64</span>];</div><div class="line">        <span class="keyword">int</span> age;</div><div class="line">    &#125; Teacher_t;</div><div class="line">    <span class="keyword">int</span> offset = (<span class="keyword">int</span>)&amp;(((Teacher_t *) <span class="number">0</span>)-&gt;age);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, offset);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统提供的赋值操作是 浅拷贝 – 简单值拷贝，逐字节拷贝&lt;br&gt;如果结构体中有属性 创建在堆区，就会出现问题，在释放期间，一段内存重复释放，一段内存泄露&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的数组选择排序</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的数组之选择排序/</id>
    <published>2018-07-03T11:27:40.679Z</published>
    <updated>2018-07-03T11:49:01.970Z</updated>
    
    <content type="html"><![CDATA[<p><strong>选择排序的核心：</strong><br>开始认定最小值下标为i，从j = i+1的位置起找真实最小值下标，如果计算的真实最小值下标与i不等，互换元素。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chooseSort4Str</span><span class="params">(<span class="keyword">char</span> **arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> min = i;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arr[min], arr[j]) &lt; <span class="number">0</span>) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i != min) &#123;</div><div class="line">            <span class="keyword">char</span> *temp = arr[i];</div><div class="line">            arr[i] = arr[min];</div><div class="line">            arr[min] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> *pArray[] = &#123;<span class="string">"fff"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"aaa"</span>, <span class="string">"eee"</span>, <span class="string">"ddd"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arrLen = <span class="keyword">sizeof</span>(pArray) / <span class="keyword">sizeof</span>(pArray[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    chooseSort4Str(pArray, arrLen);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pArray[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arrLen);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 选择排序：</span></div><div class="line"><span class="comment"> *  认定最小值下表为i，从开始i+1位置起，找真实下标值，若真实下标值与i不等，则互换元素。</span></div><div class="line"><span class="comment"> * @param arr</span></div><div class="line"><span class="comment"> * @param len</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chooseSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> min = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[min] &gt; arr[j]) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i != min) &#123;</div><div class="line">            <span class="keyword">int</span> temp = arr[i];</div><div class="line">            arr[i] = arr[min];</div><div class="line">            arr[min] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 选择排序</span></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</div><div class="line">    <span class="keyword">int</span> lenArr = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    chooseSort(arr, lenArr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenArr; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main04</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// test02();</span></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;选择排序的核心：&lt;/strong&gt;&lt;br&gt;开始认定最小值下标为i，从j = i+1的位置起找真实最小值下标，如果计算的真实最小值下标与i不等，互换元素。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的数组选择排序</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的二维数组指针/</id>
    <published>2018-07-03T11:18:58.068Z</published>
    <updated>2018-07-03T11:52:52.260Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;</div><div class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</div><div class="line">            &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</div><div class="line">            &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 除两种特殊情况外，二维数组名称是指向第一个一维数组的指针。</span></div><div class="line"><span class="comment">     * 1、sizeof</span></div><div class="line"><span class="comment">     * 2、对数组名取地址，获取的是二维数组的数组指针，步长是整个二维数组的长度。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">int</span> (*pArr)[<span class="number">3</span>] = arr;</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">int</span> (*pArr2)[<span class="number">3</span>][<span class="number">3</span>] = &amp;arr;</div><div class="line"></div><div class="line">    assert(arr[<span class="number">1</span>][<span class="number">2</span>] == *(*(pArr + <span class="number">1</span>) +<span class="number">2</span>));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[<span class="number">1</span>][<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(*(pArr + <span class="number">1</span>) +<span class="number">2</span>));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// static void print2Arr(int (*arr)[3], int len)&#123;</span></div><div class="line"><span class="comment">// static void print2Arr(int arr[][3], int len)&#123;</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2Arr</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i][j]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    test01();</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;</div><div class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</div><div class="line">            &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</div><div class="line">            &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</div><div class="line">    &#125;;</div><div class="line">    print2Arr(arr, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
      
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的一维数组指针</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的一维数组指针/</id>
    <published>2018-07-03T11:05:24.699Z</published>
    <updated>2018-07-03T11:19:31.467Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 数组指针的定义方式：</span></div><div class="line"><span class="comment">  *   1、先定义数组类型，再通过类型定义数组指针。</span></div><div class="line"><span class="comment">  *   2、先定义数组指针类型，再通过类型定义数组指针</span></div><div class="line"><span class="comment">  *   3、直接定义数组指针变量</span></div><div class="line"><span class="comment">  */</span></div><div class="line">&lt;!-- more --&gt;</div><div class="line"></div><div class="line"><span class="comment">//  1、先定义数组类型，再通过类型定义数组指针。</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    typedef int (ARRAY)[5];</div><div class="line">    ARRAY *pArr = &amp;arr;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*pArr)[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 先定义数组指针类型，再通过类型定义数组指针</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    typedef int (*ARRAY)[5];</div><div class="line"></div><div class="line">    ARRAY pArr = &amp;arr;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*pArr)[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 直接定义数组指针变量</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> (*pArr)[<span class="number">5</span>] = &amp;arr;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//test01();</span></div><div class="line">    <span class="comment">//test02();</span></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;d
      
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的一维数组</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的一维数组/</id>
    <published>2018-07-03T02:08:34.069Z</published>
    <updated>2018-07-03T11:08:47.762Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 一维数组名是不是指针?</span></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 两种特殊情况，一维数组不是指向第一个元素的指针：</span></div><div class="line"><span class="comment">     * sizeof。</span></div><div class="line"><span class="comment">     * 对数组名取地址，得到数组指针 步长是整个数组长度</span></div><div class="line"><span class="comment">     * */</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;arr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;arr + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//arr数组名  它是一个指针常量 指针的指向不可以修改的，而指针指向的值可以改 int * const a ;</span></div><div class="line">    <span class="comment">//arr[0] = 1000;</span></div><div class="line">    <span class="comment">//arr = NULL;</span></div><div class="line"></div><div class="line">    <span class="comment">//数组索引 可不可以为负数</span></div><div class="line">    <span class="keyword">int</span> * p = arr;</div><div class="line">    p = p + <span class="number">3</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p[<span class="number">-1</span>]);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
      
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现strstr</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0strstr/"/>
    <id>http://gmle.github.io/2018/07/03/C语言实现strstr/</id>
    <published>2018-07-03T00:46:49.906Z</published>
    <updated>2018-07-03T11:53:29.234Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">isSub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *subs)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 特殊情况</span></div><div class="line">    <span class="keyword">if</span> (!*subs)</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tmp = str;</div><div class="line">    <span class="keyword">while</span> (*tmp != <span class="string">'\0'</span>) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 记录父串地址</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *tmp1 = tmp;</div><div class="line"></div><div class="line">        <span class="comment">// 记录子串地址</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *sub1 = subs;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (*sub1 != <span class="string">'\0'</span> &amp;&amp; *tmp1 != <span class="string">'\0'</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 若不相等则跳出，将父串后移一个字符</span></div><div class="line">            <span class="keyword">if</span> (*sub1 != *tmp1)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 若相等且子串下一个字符是末尾则是这个父串的子串</span></div><div class="line">            <span class="keyword">if</span> (*sub1 == *tmp1 &amp;&amp; *(sub1 + <span class="number">1</span>) == <span class="string">'\0'</span>)</div><div class="line">                <span class="keyword">return</span> tmp;</div><div class="line"></div><div class="line">            <span class="comment">// 若相等则继续比较下一个字符</span></div><div class="line">            <span class="keyword">if</span> (*sub1 == *tmp1) &#123;</div><div class="line">                sub1++;</div><div class="line">                tmp1++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        tmp++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> a[] = <span class="string">"aaaaabbbcdef"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *res = isSub(a, <span class="string">"ab"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;res);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
      
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的sscanf</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E7%9A%84sscanf/"/>
    <id>http://gmle.github.io/2018/07/03/C语言的sscanf/</id>
    <published>2018-07-03T00:43:30.123Z</published>
    <updated>2018-07-03T11:53:19.234Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="sscanf的使用"><a href="#sscanf的使用" class="headerlink" title="sscanf的使用"></a>sscanf的使用</h2><p>中间夹取正则表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"11111aaaa"</span>;</div><div class="line">    <span class="keyword">char</span> buf[] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%*d%s"</span>, buf);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"11111aaaa"</span>;</div><div class="line">    <span class="keyword">char</span> buf[] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%[0-9]"</span>, buf);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello@123.com"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">char</span> net[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%[^@]%*[@]%s"</span>, name, net);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, name);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, net);</div><div class="line"></div><div class="line">    <span class="built_in">strstr</span>(name, net);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//    test01();</span></div><div class="line"><span class="comment">//    test02();</span></div><div class="line">    test03();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;sscanf的使用&quot;&gt;&lt;a href=&quot;#sscanf的使用&quot; class=&quot;headerlink&quot; title=&quot;sscanf的使用&quot;&gt;&lt;/a&gt;sscanf的使用&lt;/h2&gt;&lt;p&gt;中间夹取正则表达式。&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的malloc、calloc、realloc</title>
    <link href="http://gmle.github.io/2018/07/02/C%E8%AF%AD%E8%A8%80%E7%9A%84calloc.malloc.realloc/"/>
    <id>http://gmle.github.io/2018/07/02/C语言的calloc.malloc.realloc/</id>
    <published>2018-07-02T13:50:20.582Z</published>
    <updated>2018-07-03T11:53:41.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="calloc-和-realloc"><a href="#calloc-和-realloc" class="headerlink" title="calloc 和 realloc"></a>calloc 和 realloc</h2><a id="more"></a><ul><li>calloc 和malloc 都是在堆区分配内存</li><li>与malloc不同的是，calloc会将空间初始化为0</li><li>calloc（个数，大小）</li><li>realloc 重新分配内存<ul><li>如果重新分配的内存比原来大，那么不会初始化新空间为0</li><li>先看后续空间，如果足够，那么直接扩展</li><li>如果后续空闲空间不足，那么申请足够大的空间，将原有数据拷贝到新空间下，释放掉原有空间，将新空间的首地址返回</li><li>如果重新分配的内存比原来小，那么释放后序空间，只有权限操作申请空间</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * calloc 自动将开辟的内存置0.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usecalloc</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> *p = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">userelloc</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">        p[i] = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"-------------------\n"</span>);</div><div class="line"></div><div class="line">    p = <span class="built_in">realloc</span>(p, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">20</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, p);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    usecalloc();</span></div><div class="line">    userelloc();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;calloc-和-realloc&quot;&gt;&lt;a href=&quot;#calloc-和-realloc&quot; class=&quot;headerlink&quot; title=&quot;calloc 和 realloc&quot;&gt;&lt;/a&gt;calloc 和 realloc&lt;/h2&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的一点语言特性</title>
    <link href="http://gmle.github.io/2018/06/29/C%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E7%82%B9%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
    <id>http://gmle.github.io/2018/06/29/C语言的一点语言特性/</id>
    <published>2018-06-29T13:47:23.022Z</published>
    <updated>2018-06-30T13:35:44.692Z</updated>
    
    <content type="html"><![CDATA[<p>关于C语言的一些特性。</p><a id="more"></a><p>这些特性可能会被称为bug，但它确实是特性。</p><h2 id="malloc开辟char字符串的内存空间"><a href="#malloc开辟char字符串的内存空间" class="headerlink" title="malloc开辟char字符串的内存空间"></a>malloc开辟char字符串的内存空间</h2><p>无论在什么时候出现这样一条语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str));</div></pre></td></tr></table></figure><p>几乎可以判定它是错误的，而</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str)+<span class="number">1</span>);</div></pre></td></tr></table></figure><p>才是正确的。<br>这是因为其它的字符串处理库函数几乎都包含一个额外空间，用于容纳字符串结尾处的‘\0’字符。</p><h2 id="C语言中的const并非真正的cosnt"><a href="#C语言中的const并非真正的cosnt" class="headerlink" title="C语言中的const并非真正的cosnt"></a>C语言中的const并非真正的cosnt</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> one = <span class="number">10</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> two = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[<span class="number">10</span>] = &#123;<span class="number">10</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (str)&#123;</div><div class="line">        <span class="keyword">case</span> one:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%u"</span>,one);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> two:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%u"</span>,one);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面这段代码会出现编译错误，这并不是switch语句本身的错误，但这条语句展示了其const并非真正的常量。</p><h2 id="字符串的自动合并"><a href="#字符串的自动合并" class="headerlink" title="字符串的自动合并"></a>字符串的自动合并</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *str[] = &#123;</div><div class="line">            <span class="string">"aaa"</span>,</div><div class="line">            <span class="string">"bbb"</span>  <span class="comment">// 少了个逗号，则在编译的时候回自动合并。</span></div><div class="line">            <span class="string">"ccc"</span>,</div><div class="line">            <span class="string">"ddd"</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (<span class="keyword">char</span> *) str[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, *str);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中，如果在写代码的时候不小心漏掉一个逗号，在程序编译的时候，编译器将不会报错，而是会自动合并为一个字符串。<br>而最后一个字符串的逗号存在与否都没有意义。但这种拖尾的逗号将会抑制程序的正确行为，这对程序没有任何好处。</p><h2 id="缺省关键字的可见性"><a href="#缺省关键字的可见性" class="headerlink" title="缺省关键字的可见性"></a>缺省关键字的可见性</h2><p>定义C函数或者是全局变量的时候，在缺省情况下函数名字是全局可见的。<br>可以在函数或者全局变量的前面加上‘extern’关键字，也可以不加，想过是一样的。<br>如果想限制函数或者变量的访问，则需要加上‘static’关键字。</p><p>事实上，几乎没有人所有人都没有在其前面加上村塾类型说明符的习惯，所以函数大多数是全局可见的。</p><p>根据实际经验，这种缺省的全局可见性多次被证明是个错误。这种太大范围的全局可见性会与C语言的另一个特性相互产生影响，那就是interpositioning。<br>就是用户编写和库函数同名的函数并取而代之的行为</p><p>范围过宽的问题常见于库中：一个库需要让一个对象在另一个库中可见，唯一的方法就是让它全局可见。但这样一来，它对于链接到该库的所有对象都是可见的了，在C语言中，对信息可见性的选择就是这么有限。</p><p>没有人会记得在他们之前加上static限定符，所以它们在缺省情况下是全局可见的。</p><h2 id="C语言简洁之过"><a href="#C语言简洁之过" class="headerlink" title="C语言简洁之过"></a>C语言简洁之过</h2><p>C语言中属于“误做值过”的特性，就是语言中有误导性质或者不适当的特性。这些特性有些跟C语言的简洁有关（部分与符号的过度复用有关），有些则与操作符的有限及有关。</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>许多符号被重载的在不同的上下文环境里有不同的意义。</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:center">static</td><td style="text-align:left">在函数内部，表示该便拉近的值在各个调用间一直保持延续性</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">在函数这一级，表示该函数只对本文件可见</td></tr><tr><td style="text-align:center">extern</td><td style="text-align:left">用于函数定义，表示全局可见（冗余）</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">用于变量，表示它在其他地方定义</td></tr><tr><td style="text-align:center">void</td><td style="text-align:left">作为函数的返回类型，表示不返回任何值</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">在指针声明中，表示通用指针的类型</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">位于参数列表中目标是没有参数</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">乘法运算符</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">用户指针，间接引用</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">在声明中，表示指针</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">位运算符 AND操作符</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">取地址操作符</td></tr><tr><td style="text-align:center">=</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:center">==</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">小于等于运算符</td></tr><tr><td style="text-align:center">&lt;==</td><td style="text-align:left">左移复合运算符</td></tr><tr><td style="text-align:center">()</td><td style="text-align:left">在函数定义中，包围形式参数表</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">调用一个函数</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">改变表达式的运算顺序</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">强制类型转换</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">定义带参数的宏</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">包围sizeof操作符的操作数</td></tr></tbody></table><p>重载问题之例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line">p = N * <span class="keyword">sizeof</span> * p;</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line">r = <span class="built_in">malloc</span>(p);</div><div class="line"></div><div class="line"><span class="comment">// 3 运算符优先级：先括号，所以先算sizeof(int) = 4, 后4*p</span></div><div class="line">a = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * p;</div></pre></td></tr></table></figure><p>让一个符号表达的意思越多，编译器就越难检测到这个符号在你的使用中所存在的异常情况。</p><h3 id="C语言的运算符优先级问题"><a href="#C语言的运算符优先级问题" class="headerlink" title="C语言的运算符优先级问题"></a>C语言的运算符优先级问题</h3><table><thead><tr><th style="text-align:center">优先级问题</th><th style="text-align:left">表达式</th><th style="text-align:left">误以为的结果</th><th style="text-align:left">实际结果</th></tr></thead><tbody><tr><td style="text-align:center">.的优先级高于*， -&gt; 操作符用于消除这个问题。</td><td style="text-align:left">*p.f</td><td style="text-align:left">p所指对象的字段f, (*p).f</td><td style="text-align:left">对p取f偏移，作为指针，然后解引用。 *(p.f)</td></tr><tr><td style="text-align:center">[]高于*</td><td style="text-align:left">int *ap[]</td><td style="text-align:left">ap是个指向int数组的指针。    int (*ap)[]</td><td style="text-align:left">ap是个元素为int指针的数组 int *(ap[])</td></tr><tr><td style="text-align:center">函数()高于*</td><td style="text-align:left">int *fp()</td><td style="text-align:left">fp是个函数指针，所指函数返回int。 int(*fp)()</td><td style="text-align:left">fp是个函数，返回int<em> . int </em>(fp())</td></tr><tr><td style="text-align:center">逗号运算符在所有运算符中优先级最低</td><td style="text-align:left">i=1,2;</td><td style="text-align:left">i=(1,2)</td><td style="text-align:left">(i=1),2</td></tr></tbody></table><p>我们在表达式中如果有布尔操作、算术运算、位操作等混合计算，始终应该在适当的地方加括号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于C语言的一些特性。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言练习题</title>
    <link href="http://gmle.github.io/2018/06/06/C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://gmle.github.io/2018/06/06/C语言练习题/</id>
    <published>2018-06-06T12:13:20.353Z</published>
    <updated>2018-06-06T12:24:25.907Z</updated>
    
    <content type="html"><![CDATA[<p>小算法练习题，巩固基础<br><a id="more"></a></p><h2 id="韩信点兵"><a href="#韩信点兵" class="headerlink" title="韩信点兵"></a>韩信点兵</h2><p> 相传韩信才智过人，从不直接清点自己军队的人数。<br> 只要让士兵先后以三人一排、五人一排、七人一排地变换队形，而他每次只看一眼队伍的排尾就知道总人数了。<br> 输入3个非负整数a,b,c ，表示每种队形排尾的人数（a&lt;3,b&lt;5,c&lt;7），输出总人数的最小值（或报告无解）。<br> 已知总人数不小于10，不超过100 。</p><p>解析：<br>通过条件排尾人数知道站完队之后最后一排会余下的人数，此操作对应取余。<br>而又有三次队形变换，则每次变换取余得到的人数与输入的人数一致。所以有判断条件：<br>假设兵数量为i，则<br>i % 3 == a &amp;&amp; i &amp; 5 == b &amp;&amp; i % 7 == c</p><p>人数 不超过100，则人数在100以内，所以在 10 &lt; i &lt; 100 中 找到符合条件的人数。</p><p>代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%u%u%u"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line"></div><div class="line">    <span class="comment">// 总人数不小于10，不超过100</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">10</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == a &amp;&amp; i % <span class="number">5</span> == b &amp;&amp; i % <span class="number">7</span> == c) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"兵：%u\n"</span>, i);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">100</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"超过100"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="兰州烧饼"><a href="#兰州烧饼" class="headerlink" title="兰州烧饼"></a>兰州烧饼</h2><p>烧饼有两面，要做好一个兰州烧饼，要两面都弄热。<br>当然，一次只能弄一个的话，效率就太低了。<br>有这么一个大平底锅，一次可以同时放入k个兰州烧饼，一分钟能做好一面。<br>而现在有n个兰州烧饼，至少需要多少分钟才能全部做好呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小算法练习题，巩固基础&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>征服C指针</title>
    <link href="http://gmle.github.io/2018/06/04/%E5%BE%81%E6%9C%8DC%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/06/04/征服C指针/</id>
    <published>2018-06-04T11:44:18.266Z</published>
    <updated>2018-06-15T11:29:55.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>我这种菜鸟在学习指针的时候往往会有一些困惑</p><a id="more"></a><ul><li>什么是 “指向int的指针”？ 指针不是地址吗？怎么还有指向类型的指针呢？</li><li>scanf在使用 d% 的情况下，变量之前需要加上取地址符 <strong>&amp;</strong> 才能进行传递，为什么在使用 %s 的时候就可以不加 &amp; 了呢</li><li>学习得到将数组名赋值给指针的时候，将指针和数组完全混为一谈：<ul><li>将没有分配内存区域的指针当做数组进行访问</li><li>将指针赋给数组</li></ul></li></ul><p>导致这一系列事件的原因是：</p><ul><li>C语言砌块的语法</li><li>数组和指针之间微妙的兼容性</li></ul><p>有经验的程序员会有些疑问：</p><ul><li>C的声明中，[] 比 * 的优先级高，因此 char *s[10] 这样的声明意为 “指向char的指针的数组” ？</li><li>搞不明白double (*p)[3]; 和 void (*func)(int a); 这样的声明到底怎么阅读。</li><li>int *a中，声明a为 ”指向int的指针”。可是表达式中的指针变量前*却代表其他意思。明明是同样的符号，意义为何不同？</li><li>int *a和inta[] 在什么情况下可以互换？</li><li>空的[] 可以在什么地方使用，它又代表什么意思呢？</li></ul><h2 id="目标读者和内容结构􏰕􏰄􏰯􏱶􏱾􏱍􏰌􏱞􏰆"><a href="#目标读者和内容结构􏰕􏰄􏰯􏱶􏱾􏱍􏰌􏱞􏰆" class="headerlink" title="目标读者和内容结构􏰕􏰄􏰯􏱶􏱾􏱍􏰌􏱞􏰆"></a>目标读者和内容结构􏰕􏰄􏰯􏱶􏱾􏱍􏰌􏱞􏰆</h2><p>本书的目标读者为：</p><ul><li>粗略的学过C语言的基础，但对指针不太理解的人</li><li>平时能自如的使用C语言，但实际对指针理解不够深入的人</li></ul><p>本书的内容：</p><ul><li>1、从基础开始–预备知识</li><li>2、做个试验–C是怎样使用内存的</li><li>3、解密C的语法–它到底是怎么回事</li><li>4、数组和指针的常用用法</li><li>5、数据结构–真正的指针使用方法</li><li>6、补充</li></ul><p>通过printf来亲眼目睹地址的实际值，这不失为理解指针的一个非常简单有效的方式。</p><p>对于那些 “尝试学习了C语言，但对指针还不太理解”的人来说，通过自己的机器实际的输出指针的值，可以将对简单的领会地址的概念</p><p>阅读本书，让我们做到 知其然知其所以然。</p><h1 id="第一章-从基础开始"><a href="#第一章-从基础开始" class="headerlink" title="第一章 从基础开始"></a>第一章 从基础开始</h1><h2 id="C是什么样的语言"><a href="#C是什么样的语言" class="headerlink" title="C是什么样的语言"></a>C是什么样的语言</h2><p>C语言是一门什么语言？</p><ul><li>为了解决眼前问题，由开发现场的人发明的。</li><li>虽然使用方便，但看上去不怎么顺眼</li><li>如果不熟悉的人稀里糊涂的使用了它，难免会带来悲剧的语言。</li></ul><h3 id="C语言的出现"><a href="#C语言的出现" class="headerlink" title="C语言的出现"></a>C语言的出现</h3><p>C原本是为了开发Unix才做系统内而设计的语言，但早起打的Unix是由汇编开发出来的。后来经过发展，出现的C语言</p><h3 id="不完备和不统一的语法"><a href="#不完备和不统一的语法" class="headerlink" title="不完备和不统一的语法"></a>不完备和不统一的语法</h3><hr><p>C语言是开发现场的人们根据自身的需要开发出的的语言所以具备极高的实用性。但反过来从人类工程学的角度来看，他就不是那么完美了。</p><hr><p>比如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a = <span class="number">5</span>) &#123; <span class="comment">// 本来应该写成==的地方却写成了=</span></div><div class="line">  <span class="comment">/* code */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>相信大家都犯过这种错误吧。</p><p>或者：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i - <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">  <span class="comment">/* code */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>将赋值的‘=’号写成‘-’；或者在使用switch case的时候，也经常发生忘记写breaak的错误。</p><p>幸运的是，如今的编译器对于容易犯的语法错误，在很多地方可以给我们警告提示。<br>因此，不但不能无视这些警告，相反应该提高编译器的警告级别，让编译器替我们指出尽可能多的错误。</p><p>C语言是在使用中成长起来的语言，因此，由于很多历史原因遗留的一些奇怪的问题。<br>具有代表性的有 <strong>位运算符“&amp;”和“|”的优先顺序问题</strong></p><p>通常，如“==”的比较运算符的优先级要低于那些做计算的运算符。因此：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a &lt; b + <span class="number">3</span>)</div></pre></td></tr></table></figure></p><p>这样的表达式中，虽然可以不适用括号来写，但是当时用了位运算符的时候，就行不通了。<br>想要进行 <strong>将a和MASK进行按位与运算后的结果，再和b做比较运算</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a &amp; MASK == b)</div></pre></td></tr></table></figure></p><p>按照上面的写法，因为&amp;运算符的优先级低于==运算符，所以被解释成了下面这样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a &amp; （MASK == b）)</div></pre></td></tr></table></figure></p><p>这是因为在没有“&amp;&amp;”和“||”运算符的时代，使用“&amp;“和”|”来代替而留下的后遗症。</p><h3 id="C的理念"><a href="#C的理念" class="headerlink" title="C的理念"></a>C的理念</h3><hr><p>C是危险的语言。<br>尤其是，在几乎所有的C语言实现中，运行时的检查总是不充分的。<br>比如：数组越界，在C的大部分处理中，总是悄悄的将数据写入，从而破坏了完全不想管的内存区域。</p><hr><p>C是抱着“程序员万能”的理念设计出来的。在C的设计中名优先考虑的是：</p><ul><li>如何才能简单的实现编译器（而不是让使用C的人们能够简单化的编程）</li><li>如何才能让程序员写出能够生成高效率的执行代码的程序（而不是考虑优化编译器，使编译器生成高效率的执行代码）<br>而安全问题完全被忽略了。但无论怎样，C语言原本就是“仅仅为了自己使用”而开发出来的语言。</li></ul><h3 id="C的主体"><a href="#C的主体" class="headerlink" title="C的主体"></a>C的主体</h3><p>下面的单词中，哪些是C语言中规定的保留字：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">printf</span> main <span class="built_in">malloc</span> <span class="keyword">sizeof</span></div></pre></td></tr></table></figure></p><p>答案是 if 和 sizeof。</p><p>“printf和malloc不必多说，连main也不是C的保留字吗？”<br>请查一查手头的C语言参考书。相信大部分的C入门书籍中都有C语言保留字的列表</p><p>相对于把输入输出作为语言自身功能的一部分，C语言将printf() 这样的输入输出功能从语言的主体中分离出来，让它单纯的成为库函数。对于编译器来说，printf() 函数和其他由程序员写的函数并没有什么不同。</p><h3 id="C是只能使用标量的语言"><a href="#C是只能使用标量的语言" class="headerlink" title="C是只能使用标量的语言"></a>C是只能使用标量的语言</h3><p>对于标量这个词，大家可能有些陌生。<br>简单地说，标量就是指char、int、double和枚举等树枝类型以及指针。相对的，像数组，结构体和共用体这样的将多个标量进行组合的类型，我们应称之为聚合类型。<br>提问：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (str == <span class="string">"abc"</span>)</div></pre></td></tr></table></figure></p><p>这样的代码为什么不能执行预期的动作呢？<br>对于这样的疑问，通常给出的答案是“这个表达式不是在比较字符串的内容，它只是在比较指针”其实还可以给出另一个答案：</p><hr><p>字符串其实就是char类型的数组，也就是说它不是标量，当然在C里面不能用==进行比较了。</p><hr><p>如今的C用过以下几个追加的功能，已经能够让我们整合的使用聚合类型了。</p><ul><li>结构体的一次性赋值</li><li>将结构体作为函数参数值传递</li><li>将结构体作为函数返回值返回</li><li>auto变量的初始化</li></ul><h2 id="关于指针"><a href="#关于指针" class="headerlink" title="关于指针"></a>关于指针</h2><h3 id="指针究竟是什么"><a href="#指针究竟是什么" class="headerlink" title="指针究竟是什么"></a>指针究竟是什么</h3><p>关于“指针”一词，在C语言程序设计中有这样的说明：</p><p><strong>指针是一种保存变量地址的变量，在C中频繁的使用。</strong></p><p>C语言标准中出现过这句话：<br>指针类型可由函数类型。对象类型或不完全的类型派生，派生指针类型的类型称为引用类型。指针类型描述一个对象，该类的对象的值提供对该引用类型实体的引用由引用类型T派生的指针类型有时称为“（指向）T的指针”。从引用类型构造指针的过程称为“指针类型的派生”。这些构造派生类型的方法可以递归地应用</p><p>第一句话出现了指针类型。<br>“指针类型”其实不是单独存在的，它是由其它类型派生而成的。以上对标准内容的引用中也提到 “由引用类型T派生的指针类型有时称为‘（指向）T的指针’”</p><p>也就是说，实际上存在的类型是“指向int/double/char的指针类型”等等。</p><p>因为“指针类型”是类型，所以它和innt类型、double类型一样，也存在“指针类型变量”和“指针类型的值”。糟糕的是，”指针类型”、“指针类型变量”和“指针类型的值”经常被简单的统称为“指针”，所以非常容易造成歧义，这一点需要提高警惕。</p><p><strong>要点：</strong><br>先有“指针类型”。因为有了类型，才有了此类型的变量，才有了值。</p><p>比如，在C中，使用int类型表示整数。因为int是类型，所以存在用于保存innt类型的变量，当然也存在int类型的值。</p><p>指针类型同样如此，既存在指针类型的变量，也存在指针类型的值。</p><p>因此，几乎所有的处理程序中，所谓的“指针类型的值”，实际是指内存的地址。</p><h3 id="和指针的第一次接触"><a href="#和指针的第一次接触" class="headerlink" title="和指针的第一次接触"></a>和指针的第一次接触</h3><p>下面我们通过实际代码来尝试输出指针的值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> *a_p = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;a = %p\n"</span>, &amp;a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;b = %p\n"</span>, &amp;b);</div><div class="line"></div><div class="line">    a_p = &amp;a;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;a_p = %p\n"</span>, a_p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a_p = %d\n"</span>, *a_p);</div><div class="line"></div><div class="line">    *a_p = <span class="number">19</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;a_p = %p\n"</span>, a_p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a_p = %d\n"</span>, *a_p);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>变量不一定按照声明的顺序保存在内存中</strong></p><p>要点：</p><ul><li>对变量使用&amp;运算符，可以取得该变量的地址。这个地址称为指向该变量的指针。</li><li>指针变量保存了指向其他变量的地址的情况下，可以说指针变量指向其变量。</li><li>对指针变量运用<em>运算符，就等于同于它指向的变量。如果指针变量指向变量，则 </em>x = x.</li></ul><p>补充：<br>在说明地址概念的时候，通常使用十六进制来表示地址。<br>如果想要了解地址的真面目，把地址实际的表示出来才是最好的的方式。</p><h3 id="指针和地址之间的关系"><a href="#指针和地址之间的关系" class="headerlink" title="指针和地址之间的关系"></a>指针和地址之间的关系</h3><p><strong>几乎所有的程序中，所谓的“指针类型的值”，实际是指内存的地址。</strong><br>对于这句话，有人也许会产生疑问：<br>一：</p><ul><li>归根结底，指针就是地址，地址就是内存中那个被分配的“门牌号”。所以，指针类型和int类型应该是一回事吧。<br>实际上，从某种意义来看，这种认识也不无道理。<br>其实在很多运行环境中，int类型和指针类型的长度并不相同。</li></ul><p>二：</p><ul><li>指针就是地址吧，那么，指向int的指针、指向double的指针，他们有什么区别么？，有必要区分它们吗？<br>实际上，从某种意义来看，这种说法也有一定道理。</li></ul><p>对于大部分的运行环境来说，当程序运行时，不管是指向int的指针，还是指向double的指针，都保持相同的表现形式（偶尔也会有一些运行环境，它们对于指向char的指针和指向int的指针有着不一样的内部表示和位数）。</p><p>不仅如此，C还为我们准备了可以指向任何类型的指针类型：void* 类型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</div><div class="line"><span class="keyword">void</span> a_p;</div><div class="line">a_p = &amp;a;</div></pre></td></tr></table></figure></p><p>这并不会报错，但是会出现警告：<br>void* 类型的指针无效</p><p>所以需要将地址的数据类型强转为int类型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*(<span class="keyword">int</span>*)a_p = &amp;a;</div></pre></td></tr></table></figure></p><p>在大部分的运行环境里，不管是指向int的指针，还是指向double的指针，在运行时都是相同的事物。可是，通过在int类型的变量去地址锁喉利用指针间接取出来的值，不出意外肯定是int类型。为什么？ 因为int和double的内部表示完全不同。</p><p>因此，如今的运行环境，像下面这样取得指向double类型变量的指针，之后将其赋给指向int的指针变量，编译器必定会提示警告。<br>伪代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> int_p;</div><div class="line"><span class="keyword">double</span> double_p;</div><div class="line">int_p = &amp;double_value;</div></pre></td></tr></table></figure></p><p>将指向double变量的指针赋予指向int的指针变量会出现警告。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;疑惑&quot;&gt;&lt;a href=&quot;#疑惑&quot; class=&quot;headerlink&quot; title=&quot;疑惑&quot;&gt;&lt;/a&gt;疑惑&lt;/h2&gt;&lt;p&gt;我这种菜鸟在学习指针的时候往往会有一些困惑&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer 读书笔记</title>
    <link href="http://gmle.github.io/2018/06/03/cpp_primer/"/>
    <id>http://gmle.github.io/2018/06/03/cpp_primer/</id>
    <published>2018-06-03T11:48:50.333Z</published>
    <updated>2018-06-03T16:53:01.932Z</updated>
    
    <content type="html"><![CDATA[<pre><code>做点什么吧</code></pre><a id="more"></a><h1 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h1><ul><li>最近感觉自己很浮躁，看看书让自己静下心。</li><li>我之前学过Java，对于C++这种面向对象的语言也有一定的了解</li><li>之前也模模糊糊的看过一点C++的东西，也不全面，我现在尝试以一个没有学过C语言的人去学习C++，并且拜读圣经，希望能得到不错的成果。</li><li>本书采用的C++版本为 C++11</li></ul><h2 id="编写一个简单的C-程序"><a href="#编写一个简单的C-程序" class="headerlink" title="编写一个简单的C++程序"></a>编写一个简单的C++程序</h2><ul><li>就像Java有程序入口一样，C++程序也有入口，它们的入口函数都是 <strong>main</strong> 函数。</li><li>在执行成程序的时候，系统会调用 <strong>main</strong> 来运行程序。</li></ul><p>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我保留了Java的书写习惯，将左大括号放在了函数的一行，（大括号另起一行的都是异教徒！)。</p><p>这是一个C++里最简单的函数，这段代码的作用是返回给操作系统一个值：0 。</p><p>C++函数构成包括四个部分：</p><ul><li>返回值类型<ul><li>main函数的返回值类型必须为 <strong>int</strong>，即整数类型。 int类型是一种内置的数据类型。</li></ul></li><li>函数名<ul><li>主函数名字为main函数，自定义的函数名字可以自行取，而且main函数是程序的一个入口点。</li></ul></li><li>参数列表<ul><li>本例中没有带有任何参数。</li></ul></li><li>函数体<ul><li>大括号括起来的语句块即为函数体，此例中函数体中只包含一条语句。</li><li>此语句是结束词函数的执行，并向调用者返回一个值；此返回值类型必须与函数的返回值类型相同</li></ul></li></ul><hr><blockquote><p>重要概念：数据类型</p></blockquote><pre><code>因为Java是从C++演变而来，所以对于数据类型也有很深的认识：类型是程序设计的最基本的概念之一，一种数据类型不仅仅定义了数据元素的内容，还定义了这类数据上可以进行的运算程序所处理的数据都保存在变量中，而每个变量都有自己的数据类型。</code></pre><hr><h3 id="编译、运行程序"><a href="#编译、运行程序" class="headerlink" title="编译、运行程序"></a>编译、运行程序</h3><pre><code>编写好程序之后 我们就需要去编译它。</code></pre><p>编译环境我用的是<a href="http://cmake.org" target="_blank" rel="external">CMake</a>；CMake的使用，我参考了这份资料<a href="http://pan.baidu.com/s/1hrC3Ale" target="_blank" rel="external">CMake实践</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>C++并没有定义输入输出语句，但是它有一个全面的标准库(std)来提供IO机制以及其他操作。</p><h3 id="标准输入输出对象"><a href="#标准输入输出对象" class="headerlink" title="标准输入输出对象"></a>标准输入输出对象</h3><pre><code>本示例使用的 iostream 库，iostream 库中包含两个基础类型 istream 和 ostream，分别表示输入流和输出流。‘流’想要表达的是：随着时间的推移，自复式顺序生成或者消耗的。</code></pre><p>标准库定义了四个IO对象。</p><ul><li><p>为了处理输入，我们使用一个名为<strong>cin</strong>的istream类型的对象。这个对象成为标准输入。</p></li><li><p>为了处理输出，我们使用一个名为<strong>cout</strong>的ostream类型的对象。这个对象成为标准输出。</p></li><li><p>为了处理警告和错误消息，我们使用一个名为<strong>cerr</strong>的ostream类型的对象，我们称之为标准错误</p></li><li><p>clog则用来输出程序运行时的一般性信息。</p></li></ul><p>一个使用 IO 库的程序</p><p>​<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> (iostream) <span class="comment">//告诉编译器我们要使用的库为 iostream</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" Enter two numbers: "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1 &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2 &lt;&lt; <span class="string">" is "</span> &lt;&lt;v1+v2 &lt;&lt; <span class="string">" ."</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>#include (iostream) # 告诉编译器我们要使用的库为 iostream</li><li>std指代库iostream中的命名空间。</li><li>endl 则被称之为 操纵符 的特殊值，写入endl的效果是结束当前行。并将与设备关联的缓冲区(buffer)刷到设备中。</li><li>缓冲刷新操作可以保证截至到目前的所有输出都写入到输出流中。</li><li>如果在调试的时候，我们不应该去执行endl将它写入到缓冲区中，应该一直使这个输出流报纸刷新。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释可以帮助人类读者理解带有注释的程序。在编译的时候，编译器会自动忽略注释。</p><p>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> (iostream)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 这是多行注释</span></div><div class="line"><span class="comment">  * 请注意 注释 界定符不能嵌套</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">      */</span></div><div class="line">      <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" Enter two numbers: "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 这是单行注释。</span></div><div class="line">    <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1 &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2 &lt;&lt; <span class="string">" is "</span> &lt;&lt;v1+v2 &lt;&lt; <span class="string">" ."</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运算符：</p><ul><li>(&lt;&lt;)    输出运算符</li><li>(&gt;&gt;)    输入运算符</li><li>(&lt;=)    小于等于</li><li>(&gt;=)    大于等于</li></ul><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>字面意思：控制程序的运行路径。</p><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>while语句会反复执行一段带吗，直到给定的条件为假为止。<br>Example：<br>​<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, val = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (val &lt;= <span class="number">1000</span>) &#123;</div><div class="line">    <span class="comment">// 只要val的值小于10，循环就会持续执行，</span></div><div class="line">        sum += val;</div><div class="line">        <span class="comment">// 将sum+val赋值给sum</span></div><div class="line">        ++val;</div><div class="line">        <span class="comment">//val+1</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>复合赋值运算符：</p><ul><li>+=    将右侧的运算对象加到左侧运算对象上。</li></ul><p>前缀递增运算符</p><ul><li>++    前缀++可以作为左值来使用，将运算的对象+1</li></ul><h3 id="1-4-2-for语句"><a href="#1-4-2-for语句" class="headerlink" title="1.4.2 for语句"></a>1.4.2 for语句</h3><p>上个while例子中的循环条件检测变量，再循环体中增加变量的模式使用非常频繁，所以C++专门定义了第二种循环语句：<strong>for</strong>语句。</p><p>使用for语句重写从1加到10的程序：<br>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">​    </div><div class="line">    <span class="keyword">int</span> num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入 num1： "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num1;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入 num2： "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num2; num2&gt;=num1; ++num1) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="读取数量不定的输入数据"><a href="#读取数量不定的输入数据" class="headerlink" title="读取数量不定的输入数据"></a>读取数量不定的输入数据</h3><p>如果我们预先不知道要对多少个数求和，这就需要不断读取数据直至没有新的数据输入为止。</p><p>​<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, value = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; value)&#123;</div><div class="line">        sum += value;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum is "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为 value定义为 int类型，所以如果你输入了别的类型的字符，就会导致判断失败，从而不会再次进行循环，然后返回你输入的值的和。</p><h3 id="1-4-4-if语句"><a href="#1-4-4-if语句" class="headerlink" title="1.4.4 if语句"></a>1.4.4 if语句</h3><p>与大多数语言一样，c++也提供了 <strong>if</strong>语句来支持条件执行。</p><p>Example：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> isnums = <span class="number">0</span>, nums = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; isnums) &#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nums) &#123;</div><div class="line">            <span class="keyword">if</span> (isnums == nums) &#123;</div><div class="line">                ++count;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The "</span>&lt;&lt; isnums &lt;&lt; <span class="string">" occurs "</span>&lt;&lt; count &lt;&lt; <span class="string">" times."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">                isnums = nums;</div><div class="line">                count = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The "</span>&lt;&lt; isnums &lt;&lt; <span class="string">" occurs "</span>&lt;&lt; count &lt;&lt; <span class="string">" times."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="类简介"><a href="#类简介" class="headerlink" title="类简介"></a>类简介</h2><p>在C++中，我们铜鼓哦定义一个类来定义自己的数据结构。一个类定义了一个类型以及与其关联的一组操作。<br>类机制就是C++最重要的特性之一。<br>实际上，C++最初的一个设计焦点上就是能定义使用上像内置类型一样自然的类类型。<br>为了使用类，我们需要了解三件事情。</p><ul><li>类名是什么</li><li>它是在哪儿定义的</li><li>它支持什么操作</li></ul><p>对于我们即将写的书店程序来说，假定我们的类名为<strong>Sales_item</strong>，头文件 <strong>Sales_item.h</strong>中已经定义了这个类。</p><h3 id="Sales-item类"><a href="#Sales-item类" class="headerlink" title="Sales_item类"></a>Sales_item类</h3><p><strong>Sales_item</strong> 类的作用是表示一本书的总销售额、售出册数和平均售价。我们现在不关心这些数据如何存储、如何计算。为了使用一个雷，我们不必关心它是如何实现的，只需要知道类对象可以执行什么操作<br>每个类实际上都定义了一个新的类型，其类型名就是类名。<br>因此，我们的<strong>Sales_item</strong>类定义了一个名为<strong>Sales_item</strong>的类型，与内置类型一样，我们可以定义类类型的变量。<br>Example:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sales_item item;</div></pre></td></tr></table></figure></p><p>此语句是想表达item是一个<strong>Sales_item</strong>类型的对象，我们通常将 “item是一个<strong>Sales_item</strong>类型的对象” 简单说成 “一个<strong>Sales_item</strong>对象”或者更简单的说成“一个<strong>Sales_item</strong>”。</p><p>除了定义<strong>Sales_item</strong>类型的变量之外呢，我们还可以：</p><ul><li>调用一个名为isbn的函数从一个<strong>Sales_item</strong>对象中提取 ISBN 书号</li><li>用输入运算符（&gt;&gt;）和输出运算符（&lt;&lt;）读写<strong>Sales_item</strong>类型的对象。</li><li>用加法运算符（+）将两个<strong>Sales_item</strong>对象相加，两个对象必须表示同一本书。加法结果是一个新的<strong>Sales_item</strong>对象，其ISBN与两个运算对象相同，而其总销售额和售出册数则是两个运算对象的对应值之和。</li><li>使用复合赋值运算符讲一个<strong>Sales_item</strong>对象加到另一个对象上。</li></ul><hr><blockquote><p>重要概念：类定义了行为<br>    当你度这些程序时，类<strong>Sales_item</strong>的作者定义了类对象可以执行的所有动作。即，<strong>Sales_item</strong>类定义了创建一个<strong>Sales_item</strong>对象时会发生什么事情。以及对<strong>Sales_item</strong>对象进行赋值、加法或输入输出运算时会发生什么事情。<br>    一般而言，类的作者决定了类类型对象上可以使用的所有操作。</p><hr></blockquote><p>读写<strong>Sales_item</strong><br>    既然即应知道可以对<strong>Sales_item</strong>对象执行哪些操作，，我们现在就可以便携使用类的程序了。<br>    例如，下面的程序从标准输入读入数据，存入一个<strong>Sales_item</strong>对象中，然后将<strong>Sales_item</strong>的内容写回到标准输出。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Sales_item book;</div><div class="line"></div><div class="line">    <span class="comment">// 读入ISBN号、售出的册数以及销售价格。</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; book;</div><div class="line"></div><div class="line">    <span class="comment">// 写入ISBN号、售出的册数、总销售额和平均价格。</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; book &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>新的include形式：</p><ul><li>来自标准库的头文件 用 ( &lt;&gt; )包围头文件名。</li><li>来自不属于标准库的头文件，用 ( “” )包围。</li></ul><p><strong>Sales_item</strong> 对象的加法<br>下面是一个对象相加的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"addItems.hpp"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Sales_item item1, item2;</div><div class="line"></div><div class="line">    <span class="comment">// 读取一对交易记录</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item1 &gt;&gt; item2;</div><div class="line"></div><div class="line">    <span class="comment">//打印和</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item1 + item2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="初识成员函数"><a href="#初识成员函数" class="headerlink" title="初识成员函数"></a>初识成员函数</h3><p>将两个<strong>Sales_item</strong>对象相加的程序首先应该价差两个对象是否具有相同的ISBN。<br>方法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CheckSame.hpp"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sales_item.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Sales_item item1, item2;</div><div class="line"></div><div class="line">    <span class="comment">// 读取一对交易记录</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; item1 &gt;&gt; item2;</div><div class="line"></div><div class="line">    <span class="comment">//首先检查item1和item2是否表示相同的书</span></div><div class="line">    <span class="keyword">if</span> (item1.isbn() == item2.isbn()) &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; item1 + item2 &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Data must refer to same ISBN"</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个if语句的检测条件<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">item1.isbn() == item2.isbn()</div></pre></td></tr></table></figure></p><p>调用名为isbn的<strong>成员函数</strong>。成员函数式定义为类的一部分函数，有时也被称为<strong>方法(method)</strong>。<br>我们通常使用 <strong>点运算符(.)</strong>来调用方法。通常，此方法必须是当前类类型的。<br>当我们访问一个成员函数时，通常我们是想调用该函数，我们使用调用运算符( () )来调用一个函数，调用运算符是一顿圆括号，里面放置<strong>参数列表</strong>(可能为空)。<br>因为我们现在的成员函数 <strong>isbn</strong>并不接受参数，因此：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">item1.isbn()</div></pre></td></tr></table></figure></p><p>调用名为 item1 的对象的成员函数 isbn，此函数返回 item1 中保存的 ISBN书号。</p><p>自此下面的就不去写了， 感觉本书对此处写的像是磕磕绊绊，一些细节性的东西没有去发现， 可能不适合初学者读吧。<br>初学者只想知道为什么运行不起来，不会去关心这些跑不起来的东西竟然还要写例子。</p><h1 id="第二章-变量和基本类型"><a href="#第二章-变量和基本类型" class="headerlink" title="第二章 变量和基本类型"></a>第二章 变量和基本类型</h1><pre><code>数据类型是程序设计的基础，它告诉我们数据的意义以及我们能在数据上执行的操作数据类型决定了程序中数据和操作的意义。如下所示的语句是一个简单示例：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = i + j;</div></pre></td></tr></table></figure>其含义依赖于 i 和 j 的数据类型。 如果i j 是整形数，那么这条语句执行的就是最普通的加法运算。</code></pre><h2 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h2><p>C++定义了一套包括 <strong>算数尅性</strong> 和 <strong>空类型（void）</strong> 在内的基本数据类型。<br>其中算术类型包含了 字符、整形数、布尔值、和浮点数。空类型不对应具体的值，仅用于一些特殊的场合。<br>例如最常见的是，如果函数不返回任何值的时候使用空类型作为返回类型。</p><h3 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h3><p>算术类型分为两类： <strong>整形（包括字符和布尔类型在内）</strong>和浮点型。<br>算数类型的尺寸（也就是该类型数据所占的比特数）在不同机器上有所差别，所表示的范围也不一样。</p><p>布尔类型的取值是 真（true）/假（false）。</p><hr><p>带符号类型和无符号类型<br>    除去布尔型和扩展的字符型之外，其他整形可以划分为<strong>带符号的</strong>和<strong>无符号的</strong>两种。带符号类型可表示正数、负数或0，无符号的类型则仅能表示大禹等于0的值。<br>    类型int、short、long、和long long 都是带符号的，通过在其前面加 unsigened就可以得到无符号类型。<br>    Example：<br>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unsigened <span class="keyword">int</span></div></pre></td></tr></table></figure></p><hr><p>与其他整形不同，字符型被分为了三种： char、sigend char 和 unsigned char。<br>尽管字符型有三种，但表现形式却只有两种，带符号的和无符号的。具体是哪种由编译器决定。</p><hr><p>建议：如何选择类型<br>    和C语言一样，C++的设计准则之一也是尽可能的接近硬件。C++的算数类型必须满足各种硬件特质。</p><pre><code>- 当明确知道数值不可能为负时，选用无符号类型。- 使用int执行整数运算。- 执行浮点数运算选用double。</code></pre><hr><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>对象的类型定义了对象能包含的数据和能参与的运算，其中一种运算被大多数类型支持，就是讲对象从一种给定的类型<strong>转换</strong>为另一种相关类型。<br>当我们像下面这样发吧一种算术类型的值付给另外一种类型时：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> b = <span class="number">42</span>;            <span class="comment">//bw为真</span></div><div class="line"><span class="keyword">int</span> i = b;              <span class="comment">//i的值为1</span></div><div class="line">i = <span class="number">3.14</span>;               <span class="comment">//i的值为3</span></div><div class="line"><span class="keyword">double</span> pi = i;          <span class="comment">//pi的值为3.0</span></div><div class="line">unsigend <span class="keyword">char</span> c = <span class="number">-1</span>;   <span class="comment">//假设char占8bytes c的值为255</span></div><div class="line">sigend <span class="keyword">char</span> c2 = <span class="number">256</span>;   <span class="comment">//假设char占8bytes c2的值是未定义的。</span></div></pre></td></tr></table></figure></p><p>类型所能表示的值的范围决定了转换的过程。</p><ul><li>当我们把一个非布尔类型的算数值赋给布尔类型时，初始值为0则结果为false，否则为true。</li><li>当我们把一个布尔值赋给非布尔类型时，初始值为false则结果为0，否则为1.</li><li>当我们把一个浮点数赋给整数类型时，进行了近似处理。结果值将仅保留浮点数中小数点之前的部分。</li><li>当我们把一个整数值赋给浮点类型时，小数部分记为0.如果该整数所占的空间超过了浮点类型的容量，精度有可能损失。</li><li>当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的，此时，程序有可能继续工作，可能崩溃，也可能生成垃圾数据。</li><li>当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示树枝总数取模后的余数。</li></ul><hr><pre><code>建议：避免无法预知和依赖于实现环境的行为。    无法预知的行为源于编译器无需检测的错误。即使代码编译通过了，如果程序执行了一条未定义的表达式，仍有可能产生错误。    不幸的是，在某些情况或某些编译器下，含有无法预知行为的程序也能正确执行。但是我们却无法保证同样一个程序在别的编译器下能正常工作。甚至已经编译通过的代码再次执行也可能会出错。    程序也应尽量避免依赖于实现环境的行为。</code></pre><hr><h3 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h3><p>一个形如42的值被称作<strong>字面值常量</strong>，这样的值一望而知。<br>每个字面值常量都对应一种数据类型，字面值常来你的形式和值决定了他的数据类型。</p><h4 id="整型和浮点型字面值"><a href="#整型和浮点型字面值" class="headerlink" title="整型和浮点型字面值"></a>整型和浮点型字面值</h4><pre><code>我们可以将整型字面值写作十进制数、八进制数或十六进制数的形式。以0开头的整数代表八进制数，以0x或者0X开头的代表十六进制。</code></pre><p>整型字面值具体的数据类型由它的值和符号决定，默认情况下，十进制字面值是带符号数，八进制和十六进制字面值极可能带符号也可能是无符号。<br>浮点型字面值是一个double。</p><h4 id="字符和字符串字面值"><a href="#字符和字符串字面值" class="headerlink" title="字符和字符串字面值"></a>字符和字符串字面值</h4><p>由单引号括起来的一个字符成为char型字面值，双引号括起来的另个或多个字符则构成字符串型的字面值<br>‘a’ – 字符型字面值<br>“abc” – 字符串型字面值</p><h4 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h4><p>有两类字符程序员不能直接使用，一类是 <strong>不可打印</strong>的字符，如退格或其他控制字符，因为它们没有可视的图符；另一类是在C++语言中有特殊含义的字符（单引号，双引号，问号，反斜线）。在这些情况下需要用到<strong>转义序列</strong>，转义序列均以反斜线作为开始。</p><hr><p>换行符     \n    横向制表符 \t    报警符    \a<br>纵向制表符  \v    退格符    \b    双引号    \”<br>反斜线     \\   问号     \?     单引号    \’<br>回车符     \r    进纸符    \f</p><hr><p>在程序中，上述转义序列被当做一个字符使用。</p><h4 id="布尔字面值和指针字面值"><a href="#布尔字面值和指针字面值" class="headerlink" title="布尔字面值和指针字面值"></a>布尔字面值和指针字面值</h4><p>true和false是布尔类型的字面值。<br>bool test = false;<br>nullptr 是指针字面值。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>变量提供一个具体名字，可供程序操作的存储空间，c++中的每个变量都有其数据类型。数据类型决定着变量所占内存空间的大小和布局方式。该空间能存储的值的范围以及变量能参与的运算，对C++程序员来说，“变量”和“对象”一般可以互换使用。</code></pre><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量定义的基本形式是：首先是类型说明符，随后紧跟由一个或多个变量名组成的列表，其中变量名以逗号分隔，最后1️以分号结束。<br>列表中每个便来匿名的类型都由类型说明敷指定，定义时还可以为一个或多个变量赋初值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum - <span class="number">0</span>, value <span class="comment">// sum。value 都是int  sum初值为0；</span></div><div class="line">Sales_item item; <span class="comment">//item的类型是Sales_item。</span></div><div class="line"><span class="comment">//string 是一种库类型，表示一个可变长的字符序列。</span></div><div class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">book</span> <span class="params">(<span class="number">0</span><span class="number">-123</span><span class="number">-45678</span>-X)</span></span>;</div></pre></td></tr></table></figure><hr><p>何为对象：<br>    C++程序员们在很多场合都会使用<strong>对象</strong>这个名词。通常情况下，对象是指一块能存储数据并具有某种类型的空间。<br>    一些人仅在与类有关的场景下才使用“对象”这个词。另一些人则已把命名的对象和未命名的对象区分开来，其中对象指能被程序修改的数据，而<strong>值</strong>指制度的数据。</p><hr><h4 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h4><p>当对象在创建时获得了一个特定的值，我们说这个对象被<strong>初始化</strong>了。用于初始化便拉近的值可以使任意复杂的表达式。<br>当一次定义了两个或多个变量时，对象的名字随着定义也就马上可以使用了。因此在同一条定义语句中，可以用箱定义跌变量值去初始化后定义的其他变量。</p><p>Example:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用price的值初始化discount</span></div><div class="line"><span class="keyword">double</span> price = <span class="number">109.99</span>, discount = price * <span class="number">0.16</span>;</div><div class="line"><span class="comment">//调用函数applyDiscount并返回值用来初始化salePrice</span></div><div class="line"><span class="keyword">double</span> salePrice = applyDiscount(price, discount);</div></pre></td></tr></table></figure></p><h4 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h4><p>C++定义了初始化的好几种不同形式，这也是初始化问题复杂性的一个体现。<br>例如，要想定义一个名为units_soid的int变量并初始化为0，以下的四条语句都可以做到：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> units_soid = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> units_soid = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">units_soid</span><span class="params">(<span class="number">0</span>)</span></span>;</div><div class="line"><span class="keyword">int</span> units_soid&#123;<span class="number">0</span>&#125;;</div></pre></td></tr></table></figure></p><p>作为C++新标准的一部分，永花括号来初始化变量得到了全面应用，在此之前仅在某些受限的场合下使用。<br>这种初始化的形式被称为列表初始化。</p><p>当用于内置类型的变量时，这种初始化形式有一个重要特点：如果我们使用列表初始化切初始值存在丢失信息的风险，则编译器会报错：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> id = <span class="number">3.1415926536</span>;</div><div class="line"><span class="keyword">int</span> a&#123;id&#125;, b = &#123;id&#125;; <span class="comment">// 错误：转换未执行，因为存在信息丢失的危险。</span></div><div class="line">int c(id), d = id;   // 正确：转换执行，且确实丢失了部分值。</div></pre></td></tr></table></figure></p><h4 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h4><p>如果定义变量时没有指定初始值。则变量就会被默认初始化，此时变量被赋予了‘默认值’，默认值到底是什么由变量类型决定。<br>同时顶一边拉怪in的位置也会对此有影响。</p><p>如果是内置类型的变量未被显示初始化，它的值由定义的位置决定。<br>定义于任何函数体之外的变量被初始化为0.<br>一种例外情况是，定义在函数体内部的内置类型白能量将<strong>不被初始化</strong>。<br>一个未被初始化的内置类型变量的值是未定义的。如果试图拷贝或以其他形式访问此类值将引发错误。</p><p>每个类格子决定其初始化对象的方式。而且，是否允许不精初始化就定义对象也由类型自己决定，如果类允许这种行为，它将决定对象的初始值到底是什么。</p><p>绝大多数类都至此无需显示初始化而定义对象，这样的类提供了一个合适的默认值。例如，string类规定如果没有指定初值则生成一个空串：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">string</span> empty;  <span class="comment">// 默认值为空 ""</span></div><div class="line">Sales_items item;   <span class="comment">// 被默认初始化的Sales_item对象。</span></div></pre></td></tr></table></figure></p><p>一些类要求每个对象都显示初始化，此时如果创建了一个该类的对象而未对其做明确的初始化操作，将引发错误。</p><hr><p>定义于函数体内的内置类型的对象如果没有初始化，则其值未定义。类的对象如果没有显示的初始化，则其值由类决定。</p><hr><p>执行默认初始化时，内置类型的值是未定义的.这句话是有前提的，前提就是这个内置类型在哪申请的空间。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">//,在静态存储区申请，所以初始化为0</span></div><div class="line"><span class="keyword">int</span> a;</div><div class="line"></div><div class="line"><span class="comment">//这个叫做值得初始化，3作为初始值</span></div><div class="line"><span class="keyword">int</span> a_1 = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//这个叫做有初始化值</span></div><div class="line">    <span class="keyword">int</span> k = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="comment">//这个不是初始化，叫赋值</span></div><div class="line">    k = <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="comment">//b也是内置类型，但是他在函数体申请，所以是在栈申请的空间，所以值未定义</span></div><div class="line">    <span class="keyword">int</span> b;</div><div class="line"></div><div class="line">    <span class="comment">//new出来的空间都是在堆申请的，有操作系统自动分配可用空间，所以不会初始化</span></div><div class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</div><div class="line"></div><div class="line">    <span class="comment">//static申明的成员是存储在静态存储空间的，所以会初始化为0</span></div><div class="line">    <span class="keyword">static</span> c;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>提示：未初始化变量引发运行时故障。</p><hr><p>未初始化的变量含有一个不确定的值，使用未初始化变量的值是一种错误的变成行为并且很难调试。尽管大多数编译器都能对一部分使用未初始化变量的行为提出警告，但严格来说编译器并未被要求检查此类错误。<br>使用未初始化的便拉近将带来无法预计的后果。有时我们足够幸运，一访问此类对象程序就崩溃并报错，此时只要找到崩溃的位置就很容易发现变量没有初始化的问题。<br>另外一些时候，程序会一直执行完并产生错误的结果。更糟糕的错误是，程序结果时对时错，无法把握。而且往无关的位置添加代码还会导致我们误以为程序对了，其实结果依旧有错。</p><hr><hr><p>梳理一下堆栈</p><ul><li>定义：<ul><li>栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。</li></ul></li><li>区别和联系：<ul><li>申请方式<ul><li>堆是由程序员自己申请并指明大小，在c中malloc函数 如p = (char *)malloc(10);</li><li>栈由系统自动分配，如声明在函数中一个局部变量 int b; 系统自动在栈中为b开辟空间</li></ul></li><li>申请后系统的响应<ul><li>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</li><li>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历改链表。寻找第一个空间大于所申请的堆节点，然后将该节点从空闲结点链表中删除，并将该结点的空间分配给程序。另外，对于大多数系统，会在这块内存空间的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放此内存空间。另外，由于找到的堆结点的大小不一定正海等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。</li></ul></li><li>申请大小的限制<ul><li>栈：在win下，栈是像低地址扩展的数据结构，是一块连续的内存区域。这句话的意思是栈顶的地址和站的最大容量是系统预先规定好的，在win下，栈的大小是2M，如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获取的空间较小。</li><li>堆：堆是像高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不了徐的，而链表的遍历方向是由低到高地址。堆的大小受限于计算机系统中的有小雨你内存。所以堆的空间比较灵活，也比较大。</li></ul></li><li>申请效率比较<ul><li>栈：由系统自动分配，速度较快。但程序员无法控制。</li><li>堆：由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便。</li></ul></li></ul></li></ul><hr><h3 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h3><p>为了允许把程序拆分成多个逻辑部分来编写，C++语言支持分离式编译机制，该机制允许将程序分割为若干个文件，每个文件可被独立编译<br>为了支持分离式编译，C++语言将声明和定义区分开来。<br><strong>声明</strong>使得名字为程序所知，一个文件如果想使用别处定义的名字则必须包含对那个名字的声明。而<strong>定义</strong>负责创建与名字关联的实体。<br>定义还会申请存储空间，也可能会为变量赋一个初始值。<br>如果想声明一个变量而非定义它，就在变量名前添加关键字 extern， 而且不要显式的初始化变量：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;  <span class="comment">//声明而非定义。</span></div><div class="line"><span class="keyword">int</span> j;         <span class="comment">//声明并定义。</span></div></pre></td></tr></table></figure></p><p>任何包含了显式初始化的声明即成为定义。我们能给出 extern 关键字标记的拜年啦给你赋一个初始值，但是这么做就抵消了extern的作用。 extern语句如果包含初始值就不再是声明，而变成定义了：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i = <span class="number">19</span>;  <span class="comment">//定义。</span></div></pre></td></tr></table></figure></p><p>在函数体内部，如果试图初始化一个由extern关键字修饰的变量，将引发错误。</p><hr><p>变量能且只能被定义一次，但是可以被多次声明。</p><hr><p>概念：静态类型</p><hr><p>C++是一种静态类型语言，其含义是在编译节点检查类型。其中，检查类型的过程成为类型检查。<br>我们已经知道，对象的类型决定了对象所能参与的运算。在C++语言中，编译器负责检查数据类型是否支持要执行的运算，如果试图执行类型不支持的运算，编译器将报错并且不会生成可执行文件。<br>程序越复杂，静态类型检查越有助于发现问题，然而，前提是编译器必须知道每一个实体对象的类型。</p><hr><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>C++的标识符由字母、数字、下划线组成，其中必须以字母或下划线开头。标识符的长度没有限制，但是对大小写敏感。<br>C++语言保留了一些名字供语言本身使用，这些名字不能被用作标识符。<br>同时，C++也为标准库保留了一些名字。用户自定义的标识符中不能连续出现两个下划线，也不能以下划线紧连大写字母开头。此外，定义在函数体外的标识符不能以下划线开头。</p><h4 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h4><p>变量命名有许多约定俗成的规范，下面的这些规范能有效提高程序的可读性：</p><ul><li>标识符要能体现实际含义。</li><li>变啦滚名一般用小写字母，如index，不要使用Index或 INDEX。</li><li>用户自定义的类名一般以大写字母开头，如 Sale_item。</li><li>如果标识符由多个单词组成，则单词间应用明显区分。</li></ul><h3 id="名字的作用域"><a href="#名字的作用域" class="headerlink" title="名字的作用域"></a>名字的作用域</h3><p>不论是在圣墟的什么位置，使用到的每个名字都会执行一个特定的实体：变量、函数、类型等，同一个名字如果出现在程序的不同位置，也可以执行的是不同实体。</p><p><strong>作用域</strong>是程序的一部分，在其中名字有其特定的含义。C++语言中大多数组用于都以花括号分离。<br>同一个名字在不同的作用域中可能指向不同的实体。名字的有效区域始于名字的声明语句，以声明语句所在的作用域末端为结束。</p><p>建议：当使用变量的时候再去定义</p><hr><p>一般来说，在对象第一次被使用的地方附近定义它是一种好的选择，因为这样做有利于更容易的找到便来那个的定义。<br>更重要的是，当变量的定义与它第一次被使用的地方很近时，我们也会赋给它一个比较合理的初始值。</p><hr><h4 id="嵌套的作用域"><a href="#嵌套的作用域" class="headerlink" title="嵌套的作用域"></a>嵌套的作用域</h4><p>作用域能彼此包含，被包含的作用域称为内层作用域，包含着别的作用域称为外部作用域。<br>作用域中一旦声明了某个名字，它所嵌套的所有作用域中都能访问该名字。同时，允许在内层作用域中重新定义外层作用域已有的名字：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  *函数内部不宜定义与全局变量同名的新变量</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//全局变量</span></div><div class="line"><span class="keyword">int</span> reused = <span class="number">42</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</div><div class="line">    <span class="comment">//块变量</span></div><div class="line">    <span class="keyword">int</span> unique = <span class="number">0</span>;</div><div class="line">    <span class="comment">//输出 #1:使用全局变量reused</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">//覆盖全局变量reused</span></div><div class="line">    <span class="keyword">int</span> reused = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 输出 #2:使用局部变量reused</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ::reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">//输出 #3:显式的访问全局变量reused，</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ::reused &lt;&lt; <span class="string">" "</span> &lt;&lt;unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解释：<br>输出#1：出现杂我jububianlaignreused定义之前，因此这条语句使用全局作用域中定义的名字reused，输出42 0.<br>输出#2：发生咋已局部变量reused定义之后，此时局部变量reused正在作用域内，因此第二条输出语句使用的是局部变量reused而非全局变量，输出0 0.<br>输出#3：使用域操作符 :: 来覆盖默认的作用域规则，因为全局作用域本身并没有名字，所以当作用域左侧为空时，向全局作用域发憷请求获取作用域操作符右侧名字对应的变量。结果是，第三条输出语句使用全局变量reused，输出42 0</p><p>建议</p><hr><p>如果函数有可能用到某全局变量，则不宜再定义一个同名的局部变量。</p><hr><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p><strong>复合类型</strong> 是指基于其他类型定义的类型。<br>C++语言有几种复合类型，下面介绍 引用和指针。<br>与我们已经掌握的变量声明相比，定义复合类型的便拉近要复杂很多。<br>之前 提到，一条简单的声明语句由一个数据类型和紧随其后的一个变量名列表组成。其实更通用的描述是，一条声明语句由一个<strong>基本数据类型</strong>和紧随其后的一个<strong>声明符</strong>列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><hr><p>C++11中新增了一种引用：所谓的<strong>“右值引用”</strong>，这种引用主要用于内置类。严格来说，当我们使用术语“引用”时，指的其实是<strong>“左值引用”</strong>。</p><hr><p><strong>引用</strong> 为对象起了另外一个名字，引用类型医用另外一种类型。<br>通过将声明写成 &amp;d 的形式来定义引用类型，其中d是声明的变量名。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</div><div class="line"><span class="keyword">int</span> &amp;refival = ival; <span class="comment">//refval指向ival（ival的另一个名字）</span></div><div class="line"><span class="keyword">int</span> &amp;refval2; <span class="comment">//报错：引用必须初始化</span></div></pre></td></tr></table></figure></p><p>一般在初始化变量时，初始值会被拷贝到新建的对象中，然而定义引用时，程序吧引用和它的滁州市值绑定在一起，而不是将初始值拷贝给引用。<br>一旦初始化完成，引用将和他的初始值对象一直绑顶在一起，因为无法令引用重新把那个顶到另外一个对象，因此引用必须初始化。</p><h4 id="引用即别名"><a href="#引用即别名" class="headerlink" title="引用即别名"></a>引用即别名</h4><hr><p>引用并非对象，相反的，它只是为一个已经存在的对象所起的另外一个名字。</p><hr><p>为引用赋值，实际上是把值付给了与引用绑定的对象。获取引用的值，实际上是获取了与引用绑定的对象的值。同理，以引用作为初始值，实际上是以与引用绑定的对象作为初始值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> &amp;ra = a;</div><div class="line">    ra= b;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ra &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出10</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 输出20</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为引用本身不是一个对象，所以不能定义引用的引用。</p><h4 id="引用的定义"><a href="#引用的定义" class="headerlink" title="引用的定义"></a>引用的定义</h4><p>允许在一条语句中定义多个引用，其中每个引用标识符都必须以符号&amp;开头：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">1024</span>, i2 = <span class="number">2048</span>;    <span class="comment">// 都是int</span></div><div class="line"><span class="keyword">int</span> &amp;r = i, r2 = i2;        <span class="comment">// r是一个引用，与i绑在一起，r2是int</span></div><div class="line"><span class="keyword">int</span> i3 = <span class="number">1024</span>m &amp;ri = i3;    <span class="comment">// i3是int，ri是一个引用，与i3绑定在一起</span></div><div class="line"><span class="keyword">int</span> &amp;r3 = i3, &amp;r4 = i2;     <span class="comment">// r3和r4都是引用</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> &amp;refNum = <span class="number">10</span>;           <span class="comment">//错误</span></div><div class="line"><span class="comment">//引用只能绑定在对象上，而不能与字面值或者某个表达式的计算结果绑定在一起。</span></div></pre></td></tr></table></figure></p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针是指向另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。然而指针与引用相比又有很多不同点。<br>其一，指针本身就是一个对象，允许对指针赋值和拷贝，而且咋指针的生命周期内它可以先后指向几个不同的对象。<br>其二，指针无需在定义时赋初值。和其他内置类型一样，在快块作用域内定义的指针如果没有被初始化，也将又有一个不确定的值。</p><hr><p>指针通常难以理解，即使有经验的程序员也常常因为调试指针引发的错误而烦恼</p><hr><p>定义指针类型的方法将声明符写成 <em>x(变量) 的形式。<br>如果在一条语句中定义了几个指针变量，每个变量都要有 </em> 。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *pi1, *pi2, *pi3;   <span class="comment">//都是指向int类型对象的指针。</span></div><div class="line"><span class="keyword">double</span> *pd1, pd2;       <span class="comment">//pd1是指向double类型对象的指针</span></div></pre></td></tr></table></figure></p><h4 id="获取对象的地址"><a href="#获取对象的地址" class="headerlink" title="获取对象的地址"></a>获取对象的地址</h4><p>指针存放某个对象的地址，要想获取该地址，需要使用<strong>取地址符(&amp;)</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> *pval = &amp;ival; <span class="comment">//pval存放变量ival的地址，或者说pval是指向val变量的指针。</span></div></pre></td></tr></table></figure></p><p>第二条语句吧pval定义为一个指向int的指针，随后初始化pval另其指向名为ival的int对象。<br>因为引用不是对象，没有实际地址，所以不能定义指向引用的指针。<br>和引用一样，指针只能绑定在对象上，而不能与字面值或者某个表达式的计算结果绑定在一起。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval;</div><div class="line"><span class="keyword">double</span> *pd = &amp;dval;     <span class="comment">//正确：初始值是double型对象的地址。</span></div><div class="line"><span class="keyword">double</span> *pd2 = pd;       <span class="comment">//正确：初始值是指向double对象的指针</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> *pi = pd;           <span class="comment">//错误：指针类型和pd类型不匹配</span></div><div class="line">pi = &amp;dval;             <span class="comment">//错误：视图把double型对象的地址赋给int型指针</span></div></pre></td></tr></table></figure></p><p>因为在声明语句中指针的类型实际上被用于指定它所指向对象的类型，所以二者必须匹配。如果指针指向了一个其他类型的对象，对该对象的操作将发生错误。</p><h4 id="指针值"><a href="#指针值" class="headerlink" title="指针值"></a>指针值</h4><p>指针的值（即地址）应属于下列四中状态之一：</p><ul><li>指向一个对象</li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，意味着指针没有指向任何对象</li><li>无效指针，也就是上述情况之外的其他值，</li></ul><p>试图拷贝火以其他方式访问无效的指针豆浆引发错误。<br>编译器并不负责检查此类错误。，这一点和试图使用未经初始化的变量是一样的。访问无效指针的后果无法预计，因此程序员必须清楚任意给定的指针是否有效。</p><p>尽管第二种和第三种形式的指针是有效的，蛋其使用同样受到限制。显然这些指针没有指向任何具体对象，所以试图访问此类指针（假定的）对象的行为不被允许。如果这样做了，后果也无法预计。</p><h4 id="利用指针访问对象"><a href="#利用指针访问对象" class="headerlink" title="利用指针访问对象"></a>利用指针访问对象</h4><p>如果指针指向了一个对象，则允许使用<strong>解引用符(*)</strong>来访问对象。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival - <span class="number">42</span>;      </div><div class="line"><span class="keyword">int</span> *p = &amp;ival;     <span class="comment">//p存放着变量ival的地址，或者说p是指向变量ival的指针</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;    <span class="comment">//由符号*得到指针p所指的对象，输出42。</span></div></pre></td></tr></table></figure></p><p>对指针解引用会得出所指的对象，因此如果给解引用的结果赋值，实际上也就是给指针所指的对象赋值。<br>解引用操作仅适用于那些确实指向了某个对象的有效指针。</p><p><strong>关键概念：某些符号有多重含义</strong></p><hr><p>像 &amp; * 这样的符号，技能用做表达式里的运算符，也能作为声明的一部分出现，符号的上下文决定了符号的意义：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> &amp;r = i;     <span class="comment">//&amp;紧随类型名出现，因此是声明的一部分，所以是引用</span></div><div class="line"><span class="keyword">int</span> *p;         <span class="comment">//*紧随类型名出现，因此是声明的一部分，所以是指针</span></div><div class="line">p = &amp;i;         <span class="comment">//&amp;出现在表达式中，是一个取地址符</span></div><div class="line"><span class="keyword">int</span> &amp;r2 = *p;   <span class="comment">//&amp;是声明的一部分，*是一个解引用符。</span></div></pre></td></tr></table></figure></p><p>在声明语句中， &amp; 和 * 用于组成复合类型；在表达式中，他们的角色又转变成运算符。在不同场景下出现的虽然是同一个符号，但是由于含义截然不同，所以我们完全可以吧它当做不同的符号来看待。</p><hr><h4 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h4><p><strong>空指针</strong>不指向任何对象，在试图使用一个指针之前，代码可以首先检查它是否为空，以下列出几个生成空指针的方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p1 = <span class="literal">nullptr</span>;</div><div class="line"><span class="keyword">int</span> *p2 = <span class="number">0</span>;</div><div class="line">itn *p3 = <span class="literal">NULL</span>;</div></pre></td></tr></table></figure></p><p>得到空指针最直接的办法就是采用字面值 nullptr来初始化指针，这也是C++11新标准刚刚引入的一种方法。<br>nullptr是一种特殊类型的字面值，它可以被转换成任意其他的指针类型。<br>过去的程序还会用到一个名为<strong>NULL</strong>的<strong>预处理变量</strong>来给指针赋值，这个变量在头文件catdlib中定义，它的值就是0。<br>预处理变量不属于命名空间std，它由预处理器负责管理，因此我们可以直接使用预处理白能量儿无需在前面加域操作符<br>当用到一个预处理变量时，预处理器会自动的将它替换为实际值，因此用NULL初始化指针和0初始化指针是一样的。在新标准下，现在的C++程序最好使用nullptr，同事尽量避免使用NULL。</p><p>把int变量直接赋给指针是错误的操作，即使int变量的值签好等于0也不行。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> zero = <span class="number">0</span>;</div><div class="line">ip = zero;</div></pre></td></tr></table></figure></p><p><strong>建议：初始化所有指针</strong></p><hr><p>使用未经初始化的指针是引发运行时错误的一大原因。<br>和其他变量一样，访问未经初始化的指针所引发的后果也是无法预计的。<br>通常这一行为将造成程序崩溃，而且一旦崩溃，要想定位到出错位置讲师特别棘手的问题。<br>在大多数编译器环境下，如果使用了未经初始化的指针，则该指针所占内存空间的当前内容将会被看做一个地址值。<br>访问该指针们相当于去访问一个本不存在位置上的本不存在的对象。如果指针所占内存空间中恰好有内容，而这些内容又恰好被当做了某个地址，我们就很难分清它是合法的还是非法的了。<br>因此建议初始化所有的指针，并且在可能的情况下，尽量等定义了对象之后再定义指向他的指针，如果实在步行出指针应该指向何处，就初始化为nullptr，这样程序就能检测并知道它有没有指向任何具体的对象了。</p><hr><h4 id="赋值和指针"><a href="#赋值和指针" class="headerlink" title="赋值和指针"></a>赋值和指针</h4><p>指针和引用都能提供对其他对象的间接访问，然而在具体实现细节上二者有很大不同，其中最重要的一点就是引用本身并非是一个对象。一旦定义了引用，就无法另其再绑定到另外的对象，之后每次使用这个引用都是访问它最初绑定的那个对象。<br>指针和它存放的地址之间就没有这种限制了。和其他任何变量(只要不是引用)一样，给指针赋值就是令它存放一个新的地址，从而指向一个新的对象：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> *pi = <span class="number">0</span>;        <span class="comment">//pi被初始化,没有指向任何对象</span></div><div class="line"><span class="keyword">int</span> *pi2 = &amp;i;      <span class="comment">//pi2被初始化并指向了i的地址。</span></div><div class="line"><span class="keyword">int</span> *pi3;           <span class="comment">//pi3被定义，但未被初始化，所以pi3的值不确定。</span></div><div class="line"></div><div class="line">pi3 = pi2;          <span class="comment">//pi3和pi2指向同一个对象i</span></div><div class="line">pi2 = <span class="number">0</span>;            <span class="comment">//pi2又被初始化，并不指向任何对象</span></div></pre></td></tr></table></figure></p><h4 id="其他指针操作"><a href="#其他指针操作" class="headerlink" title="其他指针操作"></a>其他指针操作</h4><p>只要指针拥有一个合法值，就能将它用在条件表达式中。和采用算数值作为条件遵循的规则类似，如果指针的值是0；则条件取false。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;    <span class="comment">//</span></div><div class="line"><span class="keyword">int</span> *pi = <span class="number">0</span>;        <span class="comment">// pi是一个空指针。</span></div><div class="line"><span class="keyword">int</span> *pi2 = &amp;ival;   <span class="comment">// pi2存这ival的地址、</span></div><div class="line"><span class="keyword">if</span>(pi)&#123;             <span class="comment">// pi的值是0，因此条件为false</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(pi2)&#123;            <span class="comment">// pi2的值是1024，因此条件为true</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结论：任何非0指针对应的条件都是true。<br>对于两个类型的合法指针，可以用相等操作符(==)或不相等操作符(!=)来比较他们，比较的结果是布尔类型。如果两个指针村法规的地址值相同，则他们相等，反之则不等。<br>这里两个指针存放的地址值相同(两个指针相等),有三种可能，它们都为空，都指向同一个对象，或者都指向了同一个对象的下一地址。<br>需要注意的是，一个指针指向某对象，同时另一个指针指向另外对象的下一地址，此时也有可能出现这两个指针值相同的情况，即指针相等。<br>因为上述操作要用到指针的值，所以不论是作为条件出现还是参与比较运算，都必须使用合法指针，使用非法指针作为条件或进行比较都会引发不可预计的后果。</p><h4 id="void-指针"><a href="#void-指针" class="headerlink" title="void* 指针"></a>void* 指针</h4><p><strong>void*</strong> 是一种特殊的指针类型，可用于存放任意对象的地址。一个void*的指针存放着一个地址，这一点和其他指针类似。不同的是，我们对该地址中到底是个什么类型的对象并不了解：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;</div></pre></td></tr></table></figure></p><p>利用viod*指针能做的事情比较有限：拿它和别的指针比较、作为函数的输入或输出，或者赋给另一个void*指针。不能直接操作void*所指的对象，因为我们并不知道这个对象的类型，也就无法确定能在这个对象上进行什么操作。<br>概括来讲，以void*的视角来看内存空间也就仅仅是内存空间，没办法访问内存空间中所存的对象。</p><h3 id="理解复合类型的声明"><a href="#理解复合类型的声明" class="headerlink" title="理解复合类型的声明"></a>理解复合类型的声明</h3><p>变量的定义包括一个基本数据类型和一组声明符。子啊同一条定义语句中，虽然基本数据类型只有一个，但是声明符的形式却可以不同，也就是说，一条定义语句可能定义出不同类型的变量。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// i是一个int型的整数，p是一个int型的指针，r是一个int型的引用。</span></div><div class="line"><span class="keyword">int</span> i = <span class="number">1024</span>, *p - &amp;i, &amp;r = i;</div></pre></td></tr></table></figure></p><hr><p>很多程序员迷惑于基本数据类型和类型修饰符的关系，其实后者不过是声明符的一部分。</p><hr><h4 id="定义多个变量"><a href="#定义多个变量" class="headerlink" title="定义多个变量"></a>定义多个变量</h4><p>经常有一种观点会误以为，在定义语句中，类型修饰符(*或&amp;)作用于本次定义的全部变量。造成这种错误看法的原因有很多，其中之一是我们可以把空格写在类型修饰符和变量名中间<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>* p; <span class="comment">// 合法但是容易产生误导。</span></div></pre></td></tr></table></figure></p><p>我们说这种写法可能产生误导是因为int<em>放在一起好像是这条语句中所有变量共同的类型一样，其实恰恰相反，基本数据类型是int而非int\</em>。 *仅仅是修饰了p而已，对该声明语句中的其它变量，它并不产生任何作用：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// p1是指向int类型的指针，p2是int</span></div><div class="line"><span class="keyword">int</span>* p1, p2;</div></pre></td></tr></table></figure></p><p>涉及指针或引用的声明，一般有两种写法，第一种把修饰符和变量标识符写在一起：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p1, *p2; <span class="comment">// p1 和 p2都是指向int的指针。</span></div></pre></td></tr></table></figure></p><p>这种形式着重强调变量具有的复合类型。第二种把修饰符和类型名卸载一起，并且每条语句只定义一个变量。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>* p1; <span class="comment">// p1 是指向int的指针。</span></div><div class="line"><span class="keyword">int</span>* p2; <span class="comment">// p2 是指向int的指针。</span></div></pre></td></tr></table></figure></p><p>这种形式则强调了本次声明定义了一种复合类型。</p><hr><p>上述两种定义指针或引用的不同方法没有对错之分，关键是选择并坚持其中的一种写法，不要总是变来变去。</p><hr><h4 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h4><p>一般来说，盛明富中修饰符的个数并没有显示。当有多个修饰符连写在一起时，按照其逻辑关系详加解释即可。<br>以指针为例，指针是内存中的对象，像其他对象一样也有自己的地址，因此允许把指针的地址再放到另一个指针中。</p><p>通过*的个数可以区分指针的级别，也就是说，**表示指向指针的指针，***表示指向指针的指针的指针，以此类推。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</div><div class="line"><span class="keyword">int</span> *pi = &amp;ival; <span class="comment">// p1 指向一个int类型的数。</span></div><div class="line"><span class="keyword">int</span> **ppi = &amp;p1;   <span class="comment">// p2 指向一个int类型的指针。</span></div></pre></td></tr></table></figure></p><p>此处pi是指向int型数的指针，而ppi是指向int型指针的指针。<br>解引用int型指针会得到一个int型的数，同样，解引用指向指针的指针会得到一个指针。此时为了访问最原始的对象，需要对指针的指针 做两次解引用。</p><h4 id="指向指针的引用"><a href="#指向指针的引用" class="headerlink" title="指向指针的引用"></a>指向指针的引用</h4><p>引用本身不是一个对象，因此不能定义指向引用的指针。但指针是对象，所以存在对指针的引用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"></div><div class="line">    <span class="comment">// p是一个int型指针。</span></div><div class="line">    <span class="keyword">int</span> *p;</div><div class="line"></div><div class="line">    <span class="comment">//r是对指针p的引用</span></div><div class="line">    <span class="keyword">int</span> *&amp;r = p;</div><div class="line"></div><div class="line">    <span class="comment">// r 引用 i 的指针，因此给 r 赋值 &amp;i 就是令 p 指向 i</span></div><div class="line">    r = &amp;i;</div><div class="line"></div><div class="line">    <span class="comment">//解引用 r 得到 i，也就是p指向的对象，将i的值改为0。</span></div><div class="line">    *r = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>要理解 r 的类型到底是什么，最简单的办法就是从右向左阅读 r 的定义。<br>离变量名最近的符号 &amp; 对变量的类型有最直接的音箱，因此r是一个引用。声明符的其余部分用以确定r引用的类型是什么，此例中的符号 * 说明 r 引用的是一个指针。最后，声明的基本数据类型部分指出 r 引用的是一个int指针。</p><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><p>有时我们希望定义这样一种变量，它的值不能被改变。例如，用一个变量来表示缓冲区的大小。使用变量的好处是当我们觉得缓冲区大小不再合适时，很容易对其进行调整。另一方面，也应随时警惕防止程序一不小心改变了这个值。为了满足这一要求，可以用关键字const对变量的类型加以限定。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>; <span class="comment">// 输入缓冲区大小</span></div></pre></td></tr></table></figure></p><p>这样就把bufSize定义成了一个常亮。任何试图为bufSize赋值的行为都将引发错误。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bufSize = <span class="number">512</span>; <span class="comment">// 错误：试图像const对象写入。</span></div></pre></td></tr></table></figure></p><p>因为const对象一旦创建后其值就不能再改变，所以const对象必须初始化。一如既往，初始值可以使任意复杂的表达式。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = getsize();  <span class="comment">// 正确：运行时初始化。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> j = <span class="number">42</span>;         <span class="comment">// 正确：编译时初始化。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> k;              <span class="comment">// 错误：k是一个未经初始化的常量。</span></div></pre></td></tr></table></figure></p><h4 id="初始化和const"><a href="#初始化和const" class="headerlink" title="初始化和const"></a>初始化和const</h4><p>正如之前反复提到的，对象的类型决定了其上的操作。与非const类型所能参与的操作相比，const类型的对象能完成其中大部分，但也不是所有的操作都适合。<br>主要的限制就是只能在const类型的对象上执行不改变其内容的操作。例如，const int 和普通的 int 一样都能参与算术运算，也都能转换成一个布尔值。</p><p>在不改变const对象的操作中还有一种是初始化，如果利用一个对象去初始化另外一个对象，则它们是不是const都无关紧要。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i;</div><div class="line"><span class="keyword">int</span> j = ci;</div></pre></td></tr></table></figure></p><p>尽管ci是整型常量，但无论如何 ci 中的值还是一个整型数。ci 的常量特征仅仅在执行改变ci的操作时才会发挥作用。当用 ci 去初始化j时，根本无需在意ci是不是一个常量。拷贝一个对象的值并不会改变它，一旦拷贝完成，新的对象就和原来的对象没什么关系了。</p><h4 id="默认状态下，const对象仅在文件内有效"><a href="#默认状态下，const对象仅在文件内有效" class="headerlink" title="默认状态下，const对象仅在文件内有效"></a>默认状态下，const对象仅在文件内有效</h4><p>当以编译时初始化的方式定义一个const对象时，就如对bufSize的定义一样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>; <span class="comment">// 输入缓冲区大小</span></div></pre></td></tr></table></figure></p><p>编译器将在编译的过程中把用到该变量的地方都替换成相对应的值。也就是说，编译器会找到代码中所有用到 bufSize 的地方，然后用 512 替换。</p><p>为了执行上述替换，编译器必须知道变量的初始值。如果程序包含多个文件，则每个用了const对象的文件都必须得能访问它的初始值才行，要做到这一点，就必须在每个用到变量的的文件中都有对它的定义。为了支持这一用法，同时避免对同一个变量的抽工夫定义，默认情况徐昂西啊，const对象被设定为仅在文件内有效。但你给多个文件中出现了同名的const变量时，其实等同于在不同文件中分别定义了独立的变量。</p><p>某些时候有这样一种const变量，它的初始值不是一个常量表达式，但又确实有必要在文件间共享。这种情况下，我们不希望编译器为每个文件分别生成独立的变量。<br>相反，我们想让这类const对象像其他(非常量)一样工作。也就是说，只在一个文件中定义const，而在其他多个文件中声明并使用它。</p><p>而解决方法非常简单，对于const变量不管是声明还是定义都添加<strong>extern</strong>关键字，这样只需要定义一次。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  FILE1: str.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STR_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 在头文件中可以选择将其初始化。</span></div><div class="line"><span class="comment">// extern const std::string str = "AB";</span></div><div class="line"></div><div class="line"><span class="comment">// 也可以选择不初始化，到引用头文件的地方进行初始化。</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> str;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span> &#123;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//STR_H</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// FILE2: str.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"str.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> str = <span class="string">"ABCDE"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"abc"</span>&lt;&lt; ceshi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// 输出字符为 AB</span></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"abc"</span>&lt;&lt; ceshi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// 输出字符为 AB</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为str是一个常量，所以必须用 <strong>extern</strong>关键字修饰。</p><h3 id="const的作用"><a href="#const的作用" class="headerlink" title="const的作用"></a>const的作用</h3><p>可以把引用绑定到const对象上，就像绑定到其他对象上一样，我们称之为对常量的引用。与普通引用不同的是，对常量的引用不能被用作修改它所绑定的对象。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> c1 = <span class="number">1024</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = c1 <span class="comment">// 引用及其对应的对象都应该是常量</span></div><div class="line">r1 = <span class="number">42</span>; <span class="comment">// 错误， r1是常量。</span></div><div class="line"><span class="keyword">int</span> &amp;r2 = c1  <span class="comment">// 错误，非常量不能引用常量。</span></div></pre></td></tr></table></figure></p><p>因为不允许直接为c1赋值，当然也就不能通过引用取改变c1，因此，对r2的初始化是错误的。假设改初始化合法，则可以通过r2来改变它引用对象的值，这显然是不正确的。</p><hr><p>C++程序员经常把词组 “对const的引用” 简称为 “常量引用”，这一简称还是挺靠谱的，不过前提是你得时刻记着这就是个简称而已。<br>严格来说，并不存在常量引用。因为引用不是一个对象，所以我们没法让引用本身恒定不变。事实上，由于C++语言并不允许随意改变引用所绑定的对象，所以从这层意义上理解所有的引用又都算是常量。引用的对象是常量还是非常量可以决定其所能参与的操作，却无论如何都不会影响到引用和对象的绑定关系本身。</p><hr><h4 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h4><p>上一节提到，引用的类型必须与其所引用对象的类型一致，但是有两个例外。<br>第一种例外情况是在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象，字面值，甚至是一个表达式。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i;      <span class="comment">// 允许将const引用绑定到普通int对象上。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">42</span>;     <span class="comment">// 正确。r1是一个常量引用。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r3 = r1 * <span class="number">2</span>; <span class="comment">// 正确。r2是一个常量引用</span></div><div class="line"><span class="keyword">int</span> &amp;r4 = r1 * <span class="number">2</span>;       <span class="comment">// 错误。r4是一个普通的非常量引用。非const引用的右值不能是表达式</span></div></pre></td></tr></table></figure></p><p>要想理解这种例外情况的原因，最简单的办法就是弄清楚当一个常量引用被绑定到另外一种类型上时到底发生了什么：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = dval;</div></pre></td></tr></table></figure></p><p>此处ri引用了一个int型的数，对ri的操作应该是整数运算，但dval却是一个双精度浮点而非整数。因此为了缺包让ri的绑定一个整数，编译器吧上述代码变成了如下形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp = dval;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = temp;</div></pre></td></tr></table></figure></p><p>在这种情况下，ri做了一个临时量对象。所谓临时量对象就是当编译器需要一个空间来暂存表达式的求职结果时，临时常见的一个未命名的对象。C++程序员们常常把临时量对象简称为临时量。</p><p>接下来探讨当ri不是常量时，如果执行了类似于上面的初始化过程将带来什么样的后果。如果ri不是常量，就允许对ri赋值，这样就会改变ri所引用对象的值。注意，此时绑定的对象是一个临时变量而非dval。程序员既然让ri引用dval，就肯定想通过ri改变dval的值，否则干什么要给ri赋值呢？如此看来，既然大家基本上不会想着把引用绑定到临时量上，C++语言也就把这种行为归为非法。</p><h4 id="对const的引用可能引用一个并非const的对象"><a href="#对const的引用可能引用一个并非const的对象" class="headerlink" title="对const的引用可能引用一个并非const的对象"></a>对const的引用可能引用一个并非const的对象</h4><p>必须认识到，常量引用仅对引用可参与的操作做出了限定，对于引用的对象本身是不是一个常量未做限定。因为对象也可能是个非常量，所以允许其他途径改变它的值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line">    <span class="keyword">int</span> &amp;r1 = i;        <span class="comment">// 引用r1 绑定对象i。</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i;  <span class="comment">// 引用r2也绑定了对象i，但因为r2是const，所以不允许通过其修改i的值</span></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 通过更改源的方式来改变const引用的值</span></div><div class="line">    r1 = <span class="number">0</span>;             <span class="comment">// r1 不是常量，i的值被修改为0；</span></div><div class="line"><span class="comment">//    r2 = 0;             // 错误：r2 是常量引用。</span></div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// const常量不能更改</span></div><div class="line">    r1 = <span class="number">15</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> num = i;;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 输出15</span></div><div class="line"></div><div class="line">    i = <span class="number">20</span>;</div><div class="line">    r1 = <span class="number">20</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// 输出15，const常量不可更改。</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>r2 绑定整数i是合法的，然而，不允许通过r2修改i的值。尽管如此，i的值仍然允许通过其他途径修改，既可以直接给i复制，也可与通过像r1一样绑定到i的其他引用来修改。</p><h3 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h3><p>与引用一样，也可以令指针指向常量或非常量。类似于常量引用。,<strong>指向敞亮的指针</strong>不能用不改变其所指对象打的值。要想存放敞亮的对象的地址，只能使用指向常量的指针：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;     <span class="comment">// pi是个常量，他的值不能改变。</span></div><div class="line"><span class="keyword">double</span> *ptr = &amp;pi;          <span class="comment">// 错误：ptr是一个普通指针。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi;   <span class="comment">// 正确：cptr可一直想一个双精度常量</span></div><div class="line">*cptr = <span class="number">42</span>;                 <span class="comment">// 错误：不能给*cptr赋值。</span></div></pre></td></tr></table></figure></p><p>2.3.2节提到，只针对的类型必须与其所指对象的类型一直，但是有两个例外、第一种类外情况是允许另一个纸箱厂凉的指针指向一个非常量对象：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;     <span class="comment">// dval是一个双精度浮点数，它的值可以改变。</span></div><div class="line">cptr = &amp;dval;           <span class="comment">// 正确：但是不能通过cptr改变dval的值。</span></div></pre></td></tr></table></figure></p><p>和常量引用一样，指向敞亮的指针也没有规定其所指的对象必须是一个常量。所谓指向敞亮的指针仅仅要求不能通过该指针改变的对象的值，而没有规定那个对象的值不能通过其他途径改变。</p><hr><p>试试这样想：所谓指向敞亮的指针或引用，不过是指针或引用“自以为是”罢了。它们觉得自己指向了常量，所以自觉地不去改变所指向对象的值。</p><hr><h4 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h4><p>指针是对象而引用不是，因此就像其他对象类型一样，允许把指针本身定位常量。常量指针必须初始化，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再改变了。把*放在const关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>*<span class="keyword">const</span> curErr = &amp;errNumb     <span class="comment">// curErr将一直直系那个errNumb</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;  <span class="comment">// pip是一个指向常量对象的常量指针</span></div></pre></td></tr></table></figure></p><p>如同2.3.2节所讲的，要想弄清楚这些生命的含义，最行之有效的办法是从右向左阅读。此例中，离curErr最近的符号是 const，意味着curErr 本身是一个常量对象，对象的了O型由声明福的其余部分决定。声明福中的下一个符号是*，意思是curErr是一个常量指针。最后，该声明语句的基本数据类型部分确定了常量指针指向的是一个int对象。与之相似，我们也能推断出，pip是一个常量指针，它指向的对象是一个双精度浮点型常量。</p><p>指针本身是一个常量并不意味着不能通过指针修改其所指对象的值，能否这样做完全依赖于所指对象的类型，例如，pip是一个指向常量的常量指针，则不论是pip所指的对象值还是pip自己存储的那个地址都不能改变。相反的，curErr指向的是一个一般非常量整数，那么就完全可以用curErr去修改errNumb的值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">*pip = <span class="number">2.72</span>；            <span class="comment">// 错误：pip是一个指向常量的指针</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(*curErr)&#123;            <span class="comment">// 如果curErr所指的对象（也就是errNumb）的值不为0</span></div><div class="line">    errorHandler();     <span class="comment">//</span></div><div class="line">    *curErr = <span class="number">0</span>;        <span class="comment">// 正确：把curErr所指的对象的值重置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><p>如前所述，指针本身是一个对象，它又可以指向另外一个对象。因此，指针本身是不是常量以及指针所指的是不是一个常量就是两个相互独立的问题。<br>用名词<strong>顶层const</strong>表示指针本身是个常量，而用名词<strong>底层const</strong>表示指针所指的对象是一个常量。<br>更一般的，顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用。如算数类型、类、指针等。底层const则与指针和引用等复合类型的基本类型部分有关。比较特殊的是，指针类型既可以是顶层const也可以是底层const，这一点和其他类型相比区别明显。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;                  </div><div class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;<span class="number">1</span>;         <span class="comment">// 不能改变p1的值，这是一个顶层const。</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">42</span>;          <span class="comment">// 不能改变ci的值，这是一个顶层const</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;ci         <span class="comment">// 允许改变p2的值，这是一个底层const</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = p2;   <span class="comment">// 不能修改p3的值，右边顶层const，左边是底层const</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = ci;          <span class="comment">// 用于声明引用的const都是底层const</span></div></pre></td></tr></table></figure><p>当执行对象的拷贝操作时，常量是顶层const还是底层const区别明显。其中，顶层const不受什么影响：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">i = ci;     <span class="comment">// 正确：拷贝ci的值，ci是一个顶层const，对此操作无影响</span></div><div class="line">p2 = p3;    <span class="comment">// 正确：p2和p3指向的对象类型相同，p3顶层const的部分不受影响</span></div></pre></td></tr></table></figure></p><p>执行拷贝操作并不会改变被拷贝对象的值，因此，拷入和拷出的对象是否是常量都没什么影响。</p><p>另一方面，底层const的限制却不能忽视。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者来年各个对象的数据类型必须能够转换。一般来说，非常量可以转换成常量，反之则不行：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p = p3;        <span class="comment">// 错误，p3有const定义而p没有。</span></div><div class="line">p2 = p3;            <span class="comment">// 正确：p2和p3都是底层const</span></div><div class="line">p2 = &amp;<span class="number">1</span>;            <span class="comment">// 正确，int*能转换成 const int*</span></div><div class="line"><span class="keyword">int</span> &amp;r = ci;        <span class="comment">// 错误，普通的int&amp;不能绑定在int常量上</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">1</span>;  <span class="comment">// 正确：const int&amp;可以绑定到一个普通int上。</span></div></pre></td></tr></table></figure></p><p>p3即是顶层const也是底层const，拷贝p3时可以不在乎它是一个顶层const，但是必须说清楚它指向的对象得是一个常量。因此，不能用p3区初始化p，因为p指向的是一个普通的(非常量)整数。另一方面，p3的值可以赋给p2，是因为这两个指针都是底层const，尽管p3同时也是一个常量指针(顶层const)，仅就这次赋值而言不会有什么影响。</p><h3 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h3><p><strong>常量表达式</strong>是指值不会发生改变并且在编译过程就能得到计算结果的表达式。显然，字面值属于常量表达式。<br>用常量表达式初始化的const对象也是常量表达式。后面将会提到。<br>C++语言中有几种情况下是要用到常量表达式的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_files = <span class="number">20</span>;           <span class="comment">//</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = max_files + <span class="number">1</span>;    <span class="comment">//</span></div><div class="line"><span class="keyword">int</span> staff_size = <span class="number">27</span>;                <span class="comment">//</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = get_size();          <span class="comment">//</span></div></pre></td></tr></table></figure></p><p>尽管staff_size的初始值是个字面值常量，但由于它的数据类型只是一个普通int而非const_int，所以他不属于常量表达式。另一方面，尽管sz本身是一个常量，但它的具体值知道运行时才能获取到，所以也不是常量表达式。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;做点什么吧
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C++" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://gmle.github.io/tags/C/"/>
    
      <category term="C++ Primer" scheme="http://gmle.github.io/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>C语言的文件操作</title>
    <link href="http://gmle.github.io/2018/05/28/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://gmle.github.io/2018/05/28/C语言的文件操作/</id>
    <published>2018-05-28T12:50:08.471Z</published>
    <updated>2018-05-28T12:50:08.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读写文件与printf、scanf关联"><a href="#读写文件与printf、scanf关联" class="headerlink" title="读写文件与printf、scanf关联"></a>读写文件与printf、scanf关联</h2><p>printf  : 将数据写出到屏幕    stdin    标准输入 –&gt; 0<br>scanf   : 从键盘获取用户数据   stdout   标准输出 –&gt; 1<br>perror  : 将错误信息写出到屏幕  stderr   标准错误 –&gt; 2</p><a id="more"></a><p>系统文件：<br>    标准输入、标准输出。标准错误。<br>    会在程序加载到内存后运行时，由操作系统自动打开，自动关闭，</p><h2 id="文件指针和普通指针的区别"><a href="#文件指针和普通指针的区别" class="headerlink" title="文件指针和普通指针的区别"></a>文件指针和普通指针的区别</h2><ul><li>定义文件指针<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">File *fp; <span class="comment">// 一定是野指针。</span></div><div class="line">通过fopen将fp初始化为有效指针。</div></pre></td></tr></table></figure></li></ul><h2 id="文件分类："><a href="#文件分类：" class="headerlink" title="文件分类："></a>文件分类：</h2><h3 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h3><p>= 屏幕、键盘等。</p><h3 id="磁盘文件"><a href="#磁盘文件" class="headerlink" title="磁盘文件"></a>磁盘文件</h3><ul><li>各种文件</li><li>在计算机内数据以各种格式的文件存储。</li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li>打开文件 fopen<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode )</span></span>;</div><div class="line"><span class="comment">// 1、文件路径</span></div><div class="line"><span class="comment">// 2、打开文件的方式 读/写</span></div><div class="line"><span class="comment">// 返回值：执行成功打开的文件的 “文件指针”</span></div><div class="line"><span class="comment">//      成功：指针。</span></div><div class="line"><span class="comment">//      失败：NULL。</span></div></pre></td></tr></table></figure></li></ul><h3 id="文件打开的方式"><a href="#文件打开的方式" class="headerlink" title="文件打开的方式"></a>文件打开的方式</h3><p>r : 读文件，若文件存在，则返回成功指针；若文件不存在，报错。<br>w : 写文件，若文件存在，则清空文件，若文件不存在，则创建文件<br>a : 追加打开。<br>r+: 读写方式打开文件，若文件存在，则返回成功指针；若文件不存在，报错。<br>w+: 读写方式打开文件，若文件存在，则清空文件，若文件不存在，则创建文件<br>a+: 追加打开。<br>b : 表示打开的是一个二进制文件。</p><p>写方式打开文件：<br>写方式打开文件：</p><ul><li>对文件进行读写操作：<ul><li>按字符读写文件：fputc(), fgetc();</li><li>按行读写文件。 fgets(), fputs();</li><li>找文件结束标记。（EOF）</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><ul><li>关闭文件，<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span><span class="params">( FILE *stream )</span></span>;</div><div class="line"><span class="comment">// 1、传入文件指针，fopen的指针值。</span></div><div class="line"><span class="comment">// 返回值：success：0，failed：-1.</span></div></pre></td></tr></table></figure></li></ul><h2 id="文件访问路径"><a href="#文件访问路径" class="headerlink" title="文件访问路径"></a>文件访问路径</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><hr><p>从系统根目录位置起始，描述的文件访问路径。</p><hr><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><hr><p>相对于当前的工作目录。不纠结编译工具。</p><hr><h3 id="fputc"><a href="#fputc" class="headerlink" title="fputc"></a>fputc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>          *str, FILE          *stream )</span></span>;</div></pre></td></tr></table></figure><h3 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc"></a>fgetc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>          *str, FILE          *stream )</span></span>;</div></pre></td></tr></table></figure><p>Example<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0201</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    FILE *fp = fopen(<span class="string">"abc.txt"</span>,<span class="string">"w"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 输出到文件26个字母。</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt; <span class="number">91</span>; i++) &#123;</div><div class="line">        fputc(i, fp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line">    FILE *fp2 = fopen(<span class="string">"abc.txt"</span>,<span class="string">"r"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">char</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</div><div class="line">        c = (<span class="keyword">char</span>) fgetc(fp2);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>文件结束标记：值为-1</p><h3 id="feof函数"><a href="#feof函数" class="headerlink" title="feof函数"></a>feof函数</h3><hr><p>技能判断文本文件，也能判断二进制文件的结尾，-1也可以读出来。<br>要使feof函数生效，必须在feof函数调用前进行读文件操作。</p><hr><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h3><hr><p>从文件中读取字符串数据，保存在存储空间中。</p><hr><ul><li>一次读一行，一行内默认\n结束。会读取到\n。</li><li>当char *str【n】空间不足，则预留\0的位置，实际读到 n-1个字符。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fgets</span><span class="params">(<span class="keyword">char</span> * str, <span class="keyword">int</span> size, FILE * stream)</span></span>;</div><div class="line"><span class="comment">// 1、存储读到的数据空间</span></div><div class="line"><span class="comment">// 2、空间大小</span></div><div class="line"><span class="comment">// 3、数据来源的文件。</span></div><div class="line"><span class="comment">// 4、返回值：成功：读到的字符串/失败：NULL/读到文件末尾：NULL</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0301</span> <span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 文件指针</span></div><div class="line">    FILE *fp = fopen(<span class="string">"/Users/lele/Desktop/default.txt"</span>, <span class="string">"r"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 判空</span></div><div class="line">    <span class="keyword">if</span> (!fp)&#123;</div><div class="line">        perror(<span class="string">"error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义存储大小</span></div><div class="line">    <span class="keyword">int</span> sizenum = <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">4096</span>;</div><div class="line">    <span class="keyword">char</span> *str = <span class="built_in">malloc</span>((<span class="keyword">size_t</span>) sizenum);</div><div class="line"></div><div class="line">    <span class="comment">// 字符串置空</span></div><div class="line">    <span class="built_in">memset</span>(str, <span class="number">0</span>, sizenum);</div><div class="line"></div><div class="line">    <span class="comment">// 逐行打印文件内容</span></div><div class="line">    <span class="keyword">while</span> (!feof(fp)) &#123;</div><div class="line">        fgets(str, sizenum, fp);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 释放并置空malloc的内存</span></div><div class="line">    <span class="built_in">free</span>(str);</div><div class="line">    str = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h3><hr><p>将一个字符串的数据写入到文件中，</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fgets</span><span class="params">(<span class="keyword">char</span> * str, <span class="keyword">int</span> size, FILE * stream)</span></span>;</div><div class="line"><span class="comment">// 1、存储读到的数据空间</span></div><div class="line"><span class="comment">// 2、空间大小</span></div><div class="line"><span class="comment">// 3、数据来源的文件。</span></div><div class="line"><span class="comment">// 4、返回值：成功：读到的字符串/失败：NULL/读到文件末尾：NULL</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0401</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    FILE *fp = fopen(<span class="string">"./hello.c"</span>, <span class="string">"w"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!fp)&#123;</div><div class="line">        perror(<span class="string">"error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sizenum = <span class="keyword">sizeof</span>(<span class="keyword">char</span>);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *buf = <span class="built_in">malloc</span>((<span class="keyword">size_t</span>) sizenum);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, sizenum);</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, buf);</div><div class="line">        getchar();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, <span class="string">":quit"</span>) == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcat</span>(buf, <span class="string">"\n"</span>);</div><div class="line"></div><div class="line">        <span class="built_in">fputs</span>(buf, fp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(buf);</div><div class="line">    buf = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure><h3 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h3><p>printf      sprintf      fprintf<br>scanf       sscanf       fscanf</p><p>键盘、屏幕   string        file</p><p><strong>共性：都有格式串“%d, %s, %c, %x…”，变参</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">( FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ... )</span></span>;</div></pre></td></tr></table></figure><ul><li>参数一：待写入文件的指针</li><li>参数二：格式串</li><li>变参：对应格式串的数据</li><li>返回值： 成功：成功写入字符串的个数/失败：-1</li></ul><h3 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​<span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>          *format, ... )</span></span>;​</div></pre></td></tr></table></figure><ul><li>参数一：待写入文件的指针</li><li>参数二：格式串</li><li>变参：对应格式串的数据</li><li>返回值： 成功：成功写入字符串的个数/失败：-1</li></ul><hr><p>特性：<br>fscanf函数每次调用时，会判断下一次参数是否满足匹配条件，若不满足，提前返回</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/28.</span></div><div class="line"><span class="comment">  * FileName: 0x01_fscanf_sprintf.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">random2file</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line"></div><div class="line">    FILE *fp = fopen(<span class="string">"num.txt"</span>, <span class="string">"w"</span>);</div><div class="line">    <span class="keyword">if</span> (!fp) &#123;</div><div class="line">        perror(<span class="string">"fopen error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, rand() % <span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</div><div class="line">                tmp = arr[j];</div><div class="line">                arr[j] = arr[j+<span class="number">1</span>];</div><div class="line">                arr[j+<span class="number">1</span>] = tmp;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">file2arr</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>, i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FILE *fp = fopen(<span class="string">"num.txt"</span>, <span class="string">"r"</span>);</div><div class="line">    <span class="keyword">if</span> (!fp) &#123;</div><div class="line">        perror(<span class="string">"fopen error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">1024</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">fscanf</span>(fp, <span class="string">"%d\n"</span>, &amp;num);</div><div class="line">        arr[i] = num;</div><div class="line">        i++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (feof(fp))&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);</div><div class="line">    BubbleSort(arr, i);</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[j]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fp = fopen(<span class="string">"num.txt"</span>, <span class="string">"w"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%d\n"</span>, arr[j]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">free</span>(arr);</div><div class="line">    arr = <span class="literal">NULL</span>;</div><div class="line">    fclose(fp);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    random2file();</div><div class="line">    file2arr();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Windows二进制的读写"><a href="#Windows二进制的读写" class="headerlink" title="Windows二进制的读写"></a>Windows二进制的读写</h2><hr><p>二进制读写的参数，只在Windows下用b权限，在linux下不需要。</p><hr><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    SIZE = <span class="number">5</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> a[SIZE] = &#123;<span class="number">1.21</span>, <span class="number">2.32</span>, <span class="number">3.23</span>, <span class="number">4.34</span>, <span class="number">5.45</span>&#125;;</div><div class="line"></div><div class="line">    FILE *fp = fopen(<span class="string">"test.bin"</span>, <span class="string">"wb"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Write double array to file.</span></div><div class="line">    fwrite(a, <span class="keyword">sizeof</span>(*a), SIZE, fp);</div><div class="line">    fclose(fp);</div><div class="line"></div><div class="line">    <span class="comment">// Read file</span></div><div class="line">    <span class="keyword">double</span> b[SIZE];</div><div class="line">    fp = fopen(<span class="string">"test.bin"</span>, <span class="string">"rb"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Return success write to file's number</span></div><div class="line">    <span class="keyword">size_t</span> ret_code = fread(b, <span class="keyword">sizeof</span>(*b), SIZE, fp);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret_code == SIZE) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"Read successfully!, This array contents:"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; ++i) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf "</span>, b[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">        <span class="keyword">if</span> (feof(fp))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Error reading test.bin: unexpected end of file\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ferror(fp)) &#123;</div><div class="line">            perror(<span class="string">"Error reading test.bin"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="文件的随机读写"><a href="#文件的随机读写" class="headerlink" title="文件的随机读写"></a>文件的随机读写</h2><h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fseek()</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">(FILE *stream, <span class="keyword">long</span> offset, <span class="keyword">int</span> whence)</span></span>;</div></pre></td></tr></table></figure><ul><li>参数：<ul><li>参数1：文件指针</li><li>参数2：偏移量（正、负)）</li><li>参数3：偏移的其实文职：SEEK_SET：文档开头<pre><code>SEEK_CUR：当前位置seek_END：文件结尾</code></pre></li><li>返回值：<ul><li>成功：0</li><li>失败：-1</li></ul></li></ul></li></ul><h3 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h3><hr><p>光标到文件开头的偏移量</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">ftell</span><span class="params">(FILE *stream)</span></span></div></pre></td></tr></table></figure><ul><li>返回值：<br>  光标到文件开头的偏移量。</li></ul><h3 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h3><hr><p>将光标移动至文件起始位置。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rewind</span><span class="params">(FILE *stream)</span></span></div></pre></td></tr></table></figure><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;读写文件与printf、scanf关联&quot;&gt;&lt;a href=&quot;#读写文件与printf、scanf关联&quot; class=&quot;headerlink&quot; title=&quot;读写文件与printf、scanf关联&quot;&gt;&lt;/a&gt;读写文件与printf、scanf关联&lt;/h2&gt;&lt;p&gt;printf  : 将数据写出到屏幕    stdin    标准输入 –&amp;gt; 0&lt;br&gt;scanf   : 从键盘获取用户数据   stdout   标准输出 –&amp;gt; 1&lt;br&gt;perror  : 将错误信息写出到屏幕  stderr   标准错误 –&amp;gt; 2&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的结构体</title>
    <link href="http://gmle.github.io/2018/05/28/C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://gmle.github.io/2018/05/28/C语言的结构体/</id>
    <published>2018-05-28T00:27:22.648Z</published>
    <updated>2018-05-28T00:27:22.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><ul><li>结构体：通常定义为全局位置，放在.h头文件中</li><li>成员变量不允许赋初始值。</li><li>结构体仅是一个数据类型。<a id="more"></a></li></ul><h2 id="结构体变量定义及初始化"><a href="#结构体变量定义及初始化" class="headerlink" title="结构体变量定义及初始化"></a>结构体变量定义及初始化</h2><h3 id="普通变量初始化"><a href="#普通变量初始化" class="headerlink" title="普通变量初始化"></a>普通变量初始化</h3><h3 id="指针变量初始化"><a href="#指针变量初始化" class="headerlink" title="指针变量初始化"></a>指针变量初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 定义时初始化</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> = &#123;</span><span class="number">19</span>, <span class="string">"lele"</span>, <span class="number">123</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 普通变量初始化</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span>;</span></div><div class="line"></div><div class="line">    stu2.age = <span class="number">10</span>;</div><div class="line">    <span class="built_in">strcpy</span>(stu2.name, <span class="string">"andy"</span>);</div><div class="line">    stu2.num = <span class="number">1234</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 用指针初始化</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p_sut</span> = &amp;<span class="title">stu</span>;</span></div><div class="line"></div><div class="line">    p_sut-&gt;num = <span class="number">20</span>;</div><div class="line">    <span class="built_in">strcpy</span>(p_sut-&gt;name, <span class="string">"andy"</span>);</div><div class="line">    p_sut-&gt;age = <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"st2 age = %d, st2 name = %s, st2 num = %d.\n"</span>, stu2.age, stu2.name, stu2.num);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure><h3 id="非常规定义方法"><a href="#非常规定义方法" class="headerlink" title="非常规定义方法"></a>非常规定义方法</h3><h3 id="访问结构体成员的方法"><a href="#访问结构体成员的方法" class="headerlink" title="访问结构体成员的方法"></a>访问结构体成员的方法</h3><h4 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h4><ul><li>使用. 访问</li><li>使用&amp;(obj)-&gt;age = 1234;<h4 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h4></li><li>使用-&gt;访问<br><strong>指针不能是野指针(未赋初值的)</strong><br><strong>结构体的数组成员，如果没有在定义时初始化，那么后期赋值，只能用strcpy,strncpy,memcpy</strong></li></ul><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</div><div class="line"><span class="keyword">char</span> arr[<span class="number">5</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">studennt</span> <span class="title">arr</span>[5] = &#123;</span></div><div class="line">    &#123;<span class="number">10</span>, <span class="string">"andy"</span>, <span class="number">10</span>&#125;,</div><div class="line">    &#123;<span class="number">11</span>, <span class="string">"bndy"</span>, <span class="number">11</span>&#125;,</div><div class="line">    &#123;<span class="number">12</span>, <span class="string">"cndy"</span>, <span class="number">12</span>&#125;,</div><div class="line">    &#123;<span class="number">13</span>, <span class="string">"dndy"</span>, <span class="number">13</span>&#125;,</div><div class="line">    &#123;<span class="number">14</span>, <span class="string">"endy"</span>, <span class="number">14</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="结构体数组的初始化"><a href="#结构体数组的初始化" class="headerlink" title="结构体数组的初始化"></a>结构体数组的初始化</h3><h4 id="批量初始化"><a href="#批量初始化" class="headerlink" title="批量初始化"></a>批量初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    struct student stu = &#123;stu.age = 10&#125;;</span></div><div class="line"><span class="comment">//    printf("age = = = = =%d\n", stu.age);</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stuarr</span>[5] = &#123;</span></div><div class="line">            &#123;<span class="number">22</span>, <span class="string">"aaa"</span>, <span class="number">001</span>&#125;,</div><div class="line">            &#123;<span class="number">23</span>, <span class="string">"bbb"</span>, <span class="number">002</span>&#125;,</div><div class="line">            &#123;<span class="number">21</span>, <span class="string">"ccc"</span>, <span class="number">003</span>&#125;,</div><div class="line">            &#123;<span class="number">25</span>, <span class="string">"ddd"</span>, <span class="number">004</span>&#125;,</div><div class="line">            &#123;<span class="number">24</span>, <span class="string">"eee"</span>, <span class="number">005</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sizearr = <span class="keyword">sizeof</span>(stuarr)/<span class="keyword">sizeof</span>(stuarr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> avgAge = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sizearr; i++) &#123;</div><div class="line"></div><div class="line">        avgAge+=stuarr[i].age;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, stuarr[i].age);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"avgAge = %d"</span>, avgAge/sizearr);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="逐个初始化"><a href="#逐个初始化" class="headerlink" title="逐个初始化"></a>逐个初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">stuarr[<span class="number">0</span>].age = <span class="number">19</span>;</div><div class="line"><span class="built_in">strcpy</span>(stuarr[<span class="number">0</span>].name, <span class="string">"1111"</span>);</div><div class="line">stuarr[<span class="number">0</span>].num = <span class="number">19</span>;</div><div class="line"></div><div class="line">(*(stuarr+<span class="number">1</span>)).age = <span class="number">191</span>;</div><div class="line"><span class="built_in">strcpy</span>((*(stuarr + <span class="number">1</span>)).name, <span class="string">"2222"</span>);</div><div class="line">(*(stuarr + <span class="number">1</span>)).num = <span class="number">192</span>;</div><div class="line"></div><div class="line">(stuarr + <span class="number">2</span>)-&gt;age = <span class="number">193</span>;</div><div class="line"><span class="built_in">strcpy</span>((stuarr + <span class="number">2</span>)-&gt;name, <span class="string">"333"</span>);</div><div class="line">(stuarr + <span class="number">2</span>)-&gt;num = <span class="number">192</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span> = <span class="title">stuarr</span>;</span></div><div class="line"></div><div class="line">(*(p + <span class="number">3</span>)).age = <span class="number">194</span>;</div><div class="line"><span class="built_in">strcpy</span>((*(p + <span class="number">3</span>)).name, <span class="string">"444"</span>);</div><div class="line">(*(p + <span class="number">3</span>)).num = <span class="number">192</span>;</div><div class="line"></div><div class="line">(p + <span class="number">4</span>)-&gt;age = <span class="number">196</span>;</div><div class="line"><span class="built_in">strcpy</span>((p + <span class="number">4</span>)-&gt;name, <span class="string">"444"</span>);</div><div class="line">(p + <span class="number">4</span>)-&gt;num = <span class="number">192</span>;</div></pre></td></tr></table></figure><h2 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">peaple</span>&#123;</span></div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">peaple</span> <span class="title">pp</span>;</span></div><div class="line">    <span class="keyword">int</span> score;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0301</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span> = <span class="title">NULL</span>;</span></div><div class="line"></div><div class="line">    stu = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct student));</div><div class="line">    <span class="built_in">strcpy</span>(stu-&gt;pp.name, <span class="string">"hello"</span>);</div><div class="line">    stu-&gt;score = <span class="number">100</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"stu.pp.name = %s\n</span></div><div class="line"><span class="string">            stu.pp.age = %d\n</span></div><div class="line"><span class="string">            stu.score = %d\n"</span>,</div><div class="line"></div><div class="line">            stu-&gt;pp.name,</div><div class="line">            stu-&gt;pp.age,</div><div class="line">            stu-&gt;score);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>结构体内的数组成员，如果没有在定义时初始化，那么后期赋值，只能使用strcpy,strncpy,memcpy。</p><hr><h2 id="同类型结构体变量赋值"><a href="#同类型结构体变量赋值" class="headerlink" title="同类型结构体变量赋值"></a>同类型结构体变量赋值</h2><hr><p>要求被赋值的结构体变量和源结构体变量成员的类型、个数、顺序必须严格一致。</p><hr><h2 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h2><h3 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h3><ul><li>在函数内部赋值，只可以修改结构体形参，无法改变外部变量。</li></ul><h3 id="传址"><a href="#传址" class="headerlink" title="传址"></a>传址</h3><ul><li>在函数挖爱步赋值，可以借助地址修改函数以外的变量值。</li><li>好处：节省栈的空间。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/24.</span></div><div class="line"><span class="comment">  * FileName: 0x04_jiehoutihavepoint.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 结构体外部初始化函数 **p == &amp;p</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_stu</span><span class="params">(struct student **p)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// *p == p的内容 == NULL。</span></div><div class="line">    *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct student));</div><div class="line">    <span class="keyword">if</span> (*p == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Malloc Error!"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// *p malloc 赋值为堆空间的地址</span></div><div class="line">    (*p)-&gt;age = <span class="number">199</span>;</div><div class="line">    (*p)-&gt;name = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">20</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 不允许直接赋值，直接赋值会出现如下问题：</span></div><div class="line"><span class="comment">     * 0x008_day09(92229,0x7fffb2197380) malloc: *** error for object 0x10d67ef8c: pointer being freed was not allocated</span></div><div class="line"><span class="comment">     * *** set a breakpoint in malloc_error_break to debug</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="comment">// (*p)-&gt;name = "hello";</span></div><div class="line">    <span class="built_in">strcpy</span>((*p)-&gt;name, <span class="string">"hello"</span>);</div><div class="line"></div><div class="line">    (*p)-&gt;num = <span class="number">29</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0401</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 定义结构体指针</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span> = <span class="title">NULL</span>;</span></div><div class="line"></div><div class="line">    <span class="comment">// *p = null, &amp;p = 在栈中的0xxxxxxx 地址</span></div><div class="line">    init_stu(&amp;p);</div><div class="line"></div><div class="line">    <span class="comment">// p 为struct student * 类型，是指针类型。所以 p是地址。</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"age = %d\nname = %s\nnum = %d\n"</span>, p-&gt;age, p-&gt;name, p-&gt;num);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p-&gt;name);</div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="含有指针成员的结构体"><a href="#含有指针成员的结构体" class="headerlink" title="含有指针成员的结构体"></a>含有指针成员的结构体</h2><ul><li>见上例。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h2 id="联合体和共用体"><a href="#联合体和共用体" class="headerlink" title="联合体和共用体"></a>联合体和共用体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">union</span> test&#123;</div><div class="line">    <span class="keyword">char</span> a;</div><div class="line">    <span class="keyword">short</span> b;</div><div class="line">    <span class="keyword">int</span> c;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>所有联合体成员公用一片地址空间</li><li>修改任意一个成员变量，其他成员都会发生变化</li><li>整个联合体大小为最大成员变量的大小。</li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>枚举常量默认从0开始计数，后一个元素的值是前一个元素的值+1，也可任意指定一个元素的初值。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认值</span></div><div class="line"><span class="keyword">enum</span> num&#123;</div><div class="line">    a,  <span class="comment">// 0</span></div><div class="line">    b,  <span class="comment">// 1</span></div><div class="line">    c,  <span class="comment">// 2</span></div><div class="line">    d   <span class="comment">// 3</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> color&#123;</div><div class="line">    red = <span class="number">0010</span>,</div><div class="line">    yellow = <span class="number">0020</span>,</div><div class="line">    pink = <span class="number">0030</span>,</div><div class="line">    green = <span class="number">0040</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><hr><p>给类型起别名</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="keyword">a_t</span>;</div></pre></td></tr></table></figure><ul><li>给较长的变量起一个别名，便于使用。<ul><li>大多用于结构体。</li></ul></li><li>便于结构体的定义和理解。</li><li>便于代码的修改和维护。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 加上typedef使其定义自定义变量的时候更简单。</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">&#125; stu;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    stu s1 = &#123;<span class="number">0</span>, <span class="string">""</span>, <span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结构体定义&quot;&gt;&lt;a href=&quot;#结构体定义&quot; class=&quot;headerlink&quot; title=&quot;结构体定义&quot;&gt;&lt;/a&gt;结构体定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;结构体：通常定义为全局位置，放在.h头文件中&lt;/li&gt;
&lt;li&gt;成员变量不允许赋初始值。&lt;/li&gt;
&lt;li&gt;结构体仅是一个数据类型。
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的内存管理</title>
    <link href="http://gmle.github.io/2018/05/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://gmle.github.io/2018/05/23/C语言的内存管理/</id>
    <published>2018-05-23T11:13:52.754Z</published>
    <updated>2018-05-23T11:13:52.754Z</updated>
    
    <content type="html"><![CDATA[<pre><code>C语言的内存管理：理论居多，有助于理解理论。</code></pre><a id="more"></a><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><hr><p>局部变量就是定义在函数内部的变量。</p><hr><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>从定义位置开始，到包裹该变量的第一个右大大括号结束。</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>等同于作用域</li></ul><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><hr><p>auto 关键字用来修饰局部变量。通常可以省略。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</div></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><hr><p>定义在函数外部的变量</p><hr><ul><li>如果全局变量和局部变量重名，采用就近原则。</li></ul><h3 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h3><ul><li>从定义位置开始，到当前文件结束。</li><li>可以再本项目的其他文件中，通过‘声明’的方式导出该变量打的作用域。</li><li>如果全局变量和static局部变量重名，采用就近原则</li></ul><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>从程序创建开始，到程序终止结束。</li></ul><h2 id="static局部变量"><a href="#static局部变量" class="headerlink" title="static局部变量"></a>static局部变量</h2><hr><p>static局部变量：加了static关键字，定义在函数内部的变量</p><hr><ul><li>static局部变量只能定义一次并且不能跟随函数的的调用儿产生。只随程序的创建而产生。</li></ul><h3 id="生命周期-2"><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>从程序创建开始，到程序终止结束。</li></ul><h2 id="static全局变量"><a href="#static全局变量" class="headerlink" title="static全局变量"></a>static全局变量</h2><hr><p>static全局变量：加了static关键字，定义在函数外部的变量</p><hr><h3 id="作用域-2"><a href="#作用域-2" class="headerlink" title="作用域"></a>作用域</h3><ul><li>从定义位置开始，到当前文件结束。即使使用声明也不能导出作用域，相当于static全局变量限定在了本文件内。</li></ul><h3 id="生命周期-3"><a href="#生命周期-3" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>从程序创建开始，到程序终止结束。</li></ul><h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><hr><p>默认定义的所有函数都是全局函数。</p><hr><h3 id="作用域-3"><a href="#作用域-3" class="headerlink" title="作用域"></a>作用域</h3><ul><li>从定义位置开始，到当前文件结束。</li><li>在调用之前，没有函数定义时没需要使用声明向编译器做注册。</li></ul><h3 id="生命周期-4"><a href="#生命周期-4" class="headerlink" title="生命周期"></a>生命周期</h3><p>-</p><h2 id="static全局函数"><a href="#static全局函数" class="headerlink" title="static全局函数"></a>static全局函数</h2><hr><p>限定在了文件内部。即使通过生命呢也不能导出作用域。</p><hr><p><strong>总结： static对于变量、全局函数起限定作用域的作用。被限定在定义的文件内。</strong></p><h2 id="变量内存存储"><a href="#变量内存存储" class="headerlink" title="变量内存存储"></a>变量内存存储</h2><h3 id="data区"><a href="#data区" class="headerlink" title="data区"></a>data区</h3><ul><li>初始化为非0的全局变量 和 初始化为非0的static变量</li></ul><h3 id="bss区"><a href="#bss区" class="headerlink" title="bss区"></a>bss区</h3><ul><li>初始化为、未初始化的全局变量、static变量。</li></ul><h3 id="rodata"><a href="#rodata" class="headerlink" title="rodata"></a>rodata</h3><ul><li>常量</li></ul><h3 id="代码区-text区"><a href="#代码区-text区" class="headerlink" title="代码区(text区)"></a>代码区(text区)</h3><ul><li>程序内容</li><li>代码片段</li><li>函数定义</li><li>变量定义</li></ul><h3 id="数据区-rodata-bss-data"><a href="#数据区-rodata-bss-data" class="headerlink" title="数据区(rodata|bss|data)"></a>数据区(rodata|bss|data)</h3><ul><li>data:初始化为非-的全局变量和static变量</li><li>bss：未初始化和初始化未0的全局变量、static变量。程序编译成功，加载执行时该数据区会被自动置0。</li><li>rodata：常量</li></ul><h3 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack(栈)"></a>stack(栈)</h3><hr><p>普通局部变量，默认大小：Windows：1-10M/ Linux:8-16M</p><hr><p>存放位置：栈帧，为函数运行提供空间。</p><h3 id="heap-堆"><a href="#heap-堆" class="headerlink" title="heap(堆)"></a>heap(堆)</h3><hr><p>用户自定义申请的内存空间。<br>大小 ：1G+</p><hr><h2 id="堆空间的使用"><a href="#堆空间的使用" class="headerlink" title="堆空间的使用"></a>堆空间的使用</h2><hr><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><hr><p>申请堆空间</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数：要申请的空间大小。</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</div><div class="line"><span class="comment">// 返回值，成功申请的空间的首地址。失败返回NULL。</span></div></pre></td></tr></table></figure><ul><li>申请的空间是一片连续的地址空间。</li><li>几乎每次都将这片空间当成数组使用。</li></ul><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><hr><p>释放堆空间</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数：malloc申请的首地址。</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</div><div class="line"><span class="comment">// 返回值，成功 的空间呢的首地址。失败返回NULL。</span></div></pre></td></tr></table></figure><p><strong>错误应用</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">    p[<span class="number">0</span>] = <span class="number">10</span>;</div><div class="line">    p[<span class="number">1</span>] = <span class="number">11</span>;</div><div class="line">    p[<span class="number">2</span>] = <span class="string">'c'</span>;</div><div class="line">    p[<span class="number">3</span>] = <span class="string">'d'</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[<span class="number">3</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[<span class="number">4</span>]);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"free"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="二级指针对应的堆空间"><a href="#二级指针对应的堆空间" class="headerlink" title="二级指针对应的堆空间"></a>二级指针对应的堆空间</h2><h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3><ul><li>先申请外层指针，再循环申请内层指针。</li></ul><h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3><ul><li>先释放内层内存，再释放外层内存。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0201</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 申请一个二维指针</span></div><div class="line"><span class="comment">//    int **p = (int **)malloc(sizeof(int *) * 4);</span></div><div class="line">    <span class="comment">// 不能忘掉int *</span></div><div class="line">    <span class="keyword">int</span> **p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * <span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 二维指针对应空间的申请</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">        p[i] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 二维指针对应一个二维数组，填满二维数组。</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">            p[i][j] = j+i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 打印二维数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span> ; k++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p[k][i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 释放内层内存。</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">4</span>; l++) &#123;</div><div class="line">        <span class="built_in">free</span>(p[l]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 释放外层内存。</span></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="栈空间的存储特性"><a href="#栈空间的存储特性" class="headerlink" title="栈空间的存储特性"></a>栈空间的存储特性</h2><h3 id="局部变量-1"><a href="#局部变量-1" class="headerlink" title="局部变量"></a>局部变量</h3><h4 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h4><ul><li>地址从高到低</li><li>不连续分配，先进后出，后进先出。</li></ul><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><h4 id="内存分配-1"><a href="#内存分配-1" class="headerlink" title="内存分配"></a>内存分配</h4><ul><li>压栈顺序：从右向左 int abc(int a, int b, int c) 从右向左</li><li>地址从高到低</li><li>连续分配内存</li></ul><p><strong>申请内存的两种方式</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/23.</span></div><div class="line"><span class="comment">  * FileName: 0x03_main_mem.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 传二级指针</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">malloc_mem1</span><span class="params">(<span class="keyword">int</span> **p)</span> </span>&#123;</div><div class="line">    *p = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">199</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mem1_malloc = %p\n"</span>, *p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回指针接收</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc_mem2</span><span class="params">(<span class="keyword">int</span> *p)</span> </span>&#123;</div><div class="line">    p = <span class="built_in">malloc</span>(<span class="number">199</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mem1_malloc = %p\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> p;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">// malloc_mem1(&amp;p);</span></div><div class="line">    <span class="comment">// printf("p = %p\n", p);</span></div><div class="line"></div><div class="line">    <span class="comment">// 接收初始化完成后返回的地址。</span></div><div class="line">    p = malloc_mem2(p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="内存操作函数"><a href="#内存操作函数" class="headerlink" title="内存操作函数"></a>内存操作函数</h2><hr><p>头文件为string.h</p><hr><h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><ul><li>将指定的你内存空间存入指定值。通常用来<strong>置零</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> c, <span class="keyword">size_t</span> n)</span></span>;</div><div class="line"><span class="comment">// - 1&gt;待设置的内存地址</span></div><div class="line"><span class="comment">// - 2&gt;要设置的值，通常为0</span></div><div class="line"><span class="comment">// - 3&gt;大小:单位字节</span></div><div class="line"></div><div class="line"><span class="comment">// 返回值：成功置零的首地址(传入的地址)</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</div><div class="line">    <span class="comment">// 将申请来的内存置空。</span></div><div class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="number">10</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><ul><li>内存拷贝。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memcpy</span><span class="params">( <span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> count )</span></span>;</div><div class="line"><span class="comment">// - 1：目标位置</span></div><div class="line"><span class="comment">// - 2：源位置</span></div><div class="line"><span class="comment">// - 3：字节个数</span></div><div class="line"></div><div class="line"><span class="comment">// 返回值：dest的地址</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr1[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">    <span class="keyword">int</span> arr2[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">memcpy</span>(arr1, arr2, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, arr1[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h3><ul><li>类似memcpy</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memmove</span><span class="params">( <span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> count )</span></span>;</div><div class="line"><span class="comment">// - 1：目标位置</span></div><div class="line"><span class="comment">// - 2：源位置</span></div><div class="line"><span class="comment">// - 3：字节个数</span></div><div class="line"></div><div class="line"><span class="comment">// 返回值：dest的地址</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0601</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line"></div><div class="line">    memmove(arr, (arr+<span class="number">1</span>), <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp"></a>memcmp</h3><hr><p>比较内存单元。<br>相同：return 0,对应位上的 1&gt;2 则return 1，否则 return -1.</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">memcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *s1, <span class="keyword">const</span> <span class="keyword">void</span> *s2, <span class="keyword">size_t</span> n)</span></span></div><div class="line"><span class="function"><span class="comment">// 地址1</span></span></div><div class="line"><span class="function"><span class="comment">// 地址2</span></span></div><div class="line"><span class="function"><span class="comment">// 比较的字节</span></span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr1[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">    <span class="keyword">int</span> arr2[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">memcmp</span>(arr1, arr2, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5</span>) == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"等"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>内存应用细节：</strong></p><hr><ul><li>可以申请大小为0字节的空间，并且可以对返回的地址空间做free操作。<ul><li>要么不做解引用，直接free。</li><li>要么不free，可以解引用，但无意义。</li></ul></li><li>开辟多大空间，使用多大空间，不要越界访问。</li><li>free释放的地址，不是malloc的返回值，通常是由于做了++操作。</li><li>在malloc的时候，定义临时变量存储返回值。</li><li>free后的地址 通常置NULL。</li><li>非空地址，不可以反复free ， NULL 反复free多次不会出错。</li><li>在子函数内部，给main中为NULL的指针初始化。<ul><li>main中的NULL指针，值传递给子函数并malloc申请空间，初始化是失败的。</li><li>main中的NULL指针，将地址传递给子函数并malloc申请空间你则初始化成功。</li><li>main中的NULl指针，借助子函数的返回值初始化malloc的堆空间。</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;C语言的内存管理：理论居多，有助于理解理论。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的灵魂--指针</title>
    <link href="http://gmle.github.io/2018/05/22/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/05/22/C语言的指针/</id>
    <published>2018-05-22T14:18:52.783Z</published>
    <updated>2018-05-22T14:18:52.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><hr><p>指针就是内存地址。</p><hr><a id="more"></a><ul><li>内存地址：内存最小存储单元 –&gt; “内存单元” 大小为一个字节</li><li>每一个内存单元都有唯一的一个编号此编号就是<strong>内存地址</strong></li></ul><h2 id="指针的定义和使用"><a href="#指针的定义和使用" class="headerlink" title="指针的定义和使用"></a>指针的定义和使用</h2><ul><li>指针类型：基础数据类型</li><li>int *a;</li></ul><h2 id="p含义"><a href="#p含义" class="headerlink" title="*p含义"></a>*p含义</h2><ul><li>将p变量的内容取出当成地址看待，找到该地址。</li><li>如果*p在左侧，则指代该空间；</li><li>如果在等号右侧，则取出该变量值。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0301</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;     <span class="comment">// 定义一个int类型的变量a赋值为10</span></div><div class="line">    <span class="keyword">int</span> *p = &amp;a;    <span class="comment">// 定义一个int*类型的变量p赋值为a的地址</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重要解释：</span></div><div class="line"><span class="comment">     * p是 int*类型的变量，存放的是地址。</span></div><div class="line"><span class="comment">     * *p是int*类型p的解引用，即：**p，*p为地址，</span></div><div class="line"><span class="comment">     * 则**p为解引用，所以 下面的*p是int类型的变量，所以可以赋值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    *p = <span class="number">122</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><ul><li>定义但未指定有效地址的指针。</li></ul><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><ul><li>在指针刚刚定义的时候，指针为NULL。</li><li>在明确指针变量不再使用的地方，手动置空。</li></ul><h2 id="泛型指针void"><a href="#泛型指针void" class="headerlink" title="泛型指针void*"></a>泛型指针void*</h2><hr><p>泛型指针可以接受任意数据类型的地址。<br>泛型指针不可以直接解引用读取数据，必须强转为具体数据类型。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0101</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> *p = <span class="literal">NULL</span>; <span class="comment">// 泛型指针</span></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"></div><div class="line">    p = &amp;a;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span> *)p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="const修饰指针变量"><a href="#const修饰指针变量" class="headerlink" title="const修饰指针变量"></a>const修饰指针变量</h2><hr><p>const右边，限制到谁，谁将不可改变。<br>通常用于函数形参修饰，限制参数不可改变。</p><hr><ul><li>const int <em>p;<br>  p可以改变，</em>p不可改变。</li><li>int const <em>p;<br>  p可以改变，</em>p不可改变。</li><li>int <em>const p;<br>  p不可改变，</em>p可以改变。</li><li>const int *const p<br>  都不可改变。</li></ul><p><strong><em>Mac电脑下并不可以，编译器不同引起的一些异同。</em></strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * const变量可以通过指针修改。</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"><span class="comment">//    a = 20;</span></div><div class="line"></div><div class="line">    <span class="comment">// wwindows 下可以改，</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p1;</div><div class="line"><span class="comment">//    p1 = &amp;a;</span></div><div class="line"><span class="comment">//    *p1 = 20;</span></div><div class="line"><span class="comment">//    printf("%d", *p1);</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> <span class="keyword">const</span> *p2 = &amp;a;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//     3. int *const p;</span></div><div class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p;</div><div class="line">    p = &amp;a;</div><div class="line">    *p = <span class="number">234</span>;</div><div class="line"></div><div class="line"><span class="comment">//     4. const int *const p;</span></div><div class="line"><span class="comment">//    const int *const p;</span></div><div class="line"><span class="comment">//    system("pause");</span></div><div class="line"><span class="comment">//    p = &amp;a;</span></div><div class="line"><span class="comment">//    *p = 234;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><hr><p>数组名是地址常量。不能被赋值。但可以赋值给指针变量。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</div><div class="line"><span class="keyword">int</span> *p = arr;</div><div class="line">p[i] = arr[i] = *(arr+i) = *(p+i)</div></pre></td></tr></table></figure><h3 id="指针和数组名的区别"><a href="#指针和数组名的区别" class="headerlink" title="指针和数组名的区别"></a>指针和数组名的区别</h3><hr><p>指针是变量，数组名是常量。</p><hr><ul><li>sizeof(p)获取的是指针大小，sizeof(arr)，是数组大小。</li></ul><h3 id="直接使用指针操作数组"><a href="#直接使用指针操作数组" class="headerlink" title="直接使用指针操作数组"></a>直接使用指针操作数组</h3><ul><li>p会随着读取数据元素不断变化，结束时变成一个野指针。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> arrLengh = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p = arr;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrLengh; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *(p + i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n************************************\n"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 循环结束后，p将变为一个野指针</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrLengh; j++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, *p++ );</div><div class="line"><span class="comment">//        p++;</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n************************************\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p2 = &amp;arr[<span class="number">5</span>];</div><div class="line">    <span class="comment">// int *p = arr == &amp;arr[0]</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p[-2] = %d\n"</span>, p2[<span class="number">-2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"*(p-2) = %d\n"</span>, *(p2<span class="number">-2</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"*(p-2) = %d\n"</span>, *(p2+<span class="number">2</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="指针的算术运算"><a href="#指针的算术运算" class="headerlink" title="指针的算术运算"></a>指针的算术运算</h2><ul><li>指针对 * / % 运算无意义。</li></ul><h3 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h3><h4 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h4><hr><p>+1是加的一个sizeof(指针数据类型)的的大小。 // 此处是数据类型大小，非指针类型大小！</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>  a = <span class="number">0x12345678</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 普通指针变量+-整数</span></div><div class="line">    <span class="keyword">short</span> *p = &amp;a;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p   = %p\n"</span>, p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p+1 = %p\n"</span>, p+<span class="number">1</span>);  <span class="comment">// sizeof(short) * 1 = 2</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p-1 = %p\n"</span>, p<span class="number">-2</span>);  <span class="comment">// sizeof(short) * 2 = 4</span></div><div class="line">    <span class="comment">// +1是加的一个sizeof(指针数据类型)的的大小。 // 此处是数据类型大小，非指针类型大小！</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><hr><p>由于数组中的数组元素是<strong>连续存储</strong>， 所以可以使用指针+-整数操作取出元素。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">    <span class="keyword">int</span> *p = &amp;arr[<span class="number">5</span>];</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p, p-1=%p\n"</span>, p, p - <span class="number">1</span>);  <span class="comment">// 向前偏移 4 字节</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"*p = %d, *(p-1)=%d\n"</span>, *p, *(p - <span class="number">1</span>));</div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针+-指针"></a>指针+-指针</h3><h4 id="指针-指针-1"><a href="#指针-指针-1" class="headerlink" title="指针+指针"></a>指针+指针</h4><ul><li>不允许的操作。<h4 id="指针-指针-2"><a href="#指针-指针-2" class="headerlink" title="指针-指针"></a>指针-指针</h4><h5 id="普通变量指针"><a href="#普通变量指针" class="headerlink" title="普通变量指针"></a>普通变量指针</h5></li><li>语法允许，但无实际意义。<h5 id="数组变量指针"><a href="#数组变量指针" class="headerlink" title="数组变量指针"></a>数组变量指针</h5></li><li>结果为数组的偏移量/sizeof(数组的类型)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</div><div class="line">    <span class="keyword">int</span> *p = arr;</div><div class="line"></div><div class="line">    <span class="comment">// 首元素地址</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %p\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="comment">// 首元素地址</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"arr = %p\n"</span>, arr);</div><div class="line"></div><div class="line">    <span class="comment">// 整个数组的地址。</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;arr = %p\n"</span>, &amp;arr);</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p+1 = %p\n"</span>, p + <span class="number">1</span>);  <span class="comment">// +4</span></div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"arr+1 = %p\n"</span>, arr + <span class="number">1</span>);  <span class="comment">// +4</span></div><div class="line"></div><div class="line">    <span class="comment">// 数组地址取地址 = 整个数组的地址，但是地址值还是首元素的地址。</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;arr+1 = %p\n"</span>, &amp;arr + <span class="number">1</span>);  <span class="comment">// +40 一个数组的大小。</span></div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="指针比较运算"><a href="#指针比较运算" class="headerlink" title="指针比较运算"></a>指针比较运算</h3><ul><li>可以在指针之间比较地址值。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><ul><li>一个数组，数组内部元素为指针。</li><li>指针数组表现形式可以是一个二级指针/二维数组、</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *arr[] = &#123;&amp;a, &amp;b, &amp;c&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(arr[i]));  <span class="comment">// *(*(arr+i))</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二级指针和多级指针"><a href="#二级指针和多级指针" class="headerlink" title="二级指针和多级指针"></a>二级指针和多级指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> *p = &amp;a;</div><div class="line"><span class="keyword">int</span> **pp = &amp;p;</div></pre></td></tr></table></figure><h2 id="指针和函数"><a href="#指针和函数" class="headerlink" title="指针和函数"></a>指针和函数</h2><h3 id="指针作为函数参数"><a href="#指针作为函数参数" class="headerlink" title="指针作为函数参数"></a>指针作为函数参数</h3><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><ul><li>在函数调用期间，实参将自己的值拷贝一份给形参。<h4 id="传址"><a href="#传址" class="headerlink" title="传址"></a>传址</h4></li><li>赞函数滴啊用期间，实参将自己的地址值拷贝给形参。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 不会交换变量</span></div><div class="line"><span class="comment"> * @param a</span></div><div class="line"><span class="comment"> * @param b</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    tmp = a;</div><div class="line">    a = b;</div><div class="line">    b = tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 会交换变量，传的是个指针，修改的原始值。</span></div><div class="line"><span class="comment"> * @param a</span></div><div class="line"><span class="comment"> * @param b</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = *a;</div><div class="line">    *a = *b;</div><div class="line">    *b = temp;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</div><div class="line">    swap2(&amp;a, &amp;b);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h2><hr><p>在封装含有数组作为参数的函数时，一般封装至少两个参数:</p><hr><ul><li>一个表示数组首地址，</li><li>一个表示数组元素个数。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> arrLengh)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrLengh - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrLengh - <span class="number">1</span> - i; j++) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</div><div class="line">                tmp = arr[j];</div><div class="line"></div><div class="line">                arr[j] = arr[j+<span class="number">1</span>];</div><div class="line"></div><div class="line">                arr[j+<span class="number">1</span>] = tmp;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0701</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">44</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">55</span>, <span class="number">63</span>, <span class="number">90</span>, <span class="number">87</span>, <span class="number">74</span>, <span class="number">123</span>, <span class="number">4566</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arrLengh = <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, arrLengh);</div><div class="line"></div><div class="line">    bubbleSort(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="指针作为函数的返回值"><a href="#指针作为函数的返回值" class="headerlink" title="指针作为函数的返回值"></a>指针作为函数的返回值</h2><ul><li>不能返回局部变量的地址.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 指针在返回后，一定要接收，不然栈帧销毁后将没有值。</span></div><div class="line"><span class="comment"> * @param a</span></div><div class="line"><span class="comment"> * @param b</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 相加本就是int类型，为什么还要强转。</span></div><div class="line"><span class="comment">//    return (int *) (*a + *b);</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p_tmp = (<span class="keyword">int</span> *) (*a + *b);</div><div class="line"></div><div class="line">    <span class="comment">// tmp是int*类型。</span></div><div class="line">    <span class="keyword">return</span> p_tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">int</span> suma = (<span class="keyword">int</span>) sum(&amp;a, &amp;b);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, suma);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="指针和字符串"><a href="#指针和字符串" class="headerlink" title="指针和字符串"></a>指针和字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义数组</span></div><div class="line"><span class="keyword">char</span> str1 - &#123;<span class="string">'h'</span>,  <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;</div><div class="line"><span class="keyword">char</span> str2[]  =  <span class="string">"hello"</span></div><div class="line"><span class="comment">// 定义在栈上 str1 == str2;</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> *str3 = <span class="string">"hello"</span></div><div class="line"><span class="comment">// 存储在ro(read only)data上 -&gt; 不能修改：相同的字符串常量在rodata上只存储一份</span></div></pre></td></tr></table></figure><p>int <em> 和 char </em> 作为函数参数的区别：</p><ul><li>字符串含有\0结束标记，不需要辅助参数</li><li>整形数组作为函数参数，由于调用传递的是地址值，因此需要元素个数的参数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 去除空格。</span></div><div class="line"><span class="comment"> * @param str</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">noSpace</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> tmp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (*str) &#123;</div><div class="line">        <span class="keyword">if</span> (*str != <span class="string">' '</span>) &#123;</div><div class="line">            tmp[i] = *str;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, tmp);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 实现strstr，查找子串</span></div><div class="line"><span class="comment"> * @param src</span></div><div class="line"><span class="comment"> * @param sub</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strr</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *sub)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 记录原位置</span></div><div class="line">    <span class="keyword">char</span> *_src = src;</div><div class="line"></div><div class="line">    <span class="comment">// 记录子字符串位置</span></div><div class="line">    <span class="keyword">char</span> *_sub = sub;</div><div class="line"></div><div class="line">    <span class="comment">// 记录回滚位置。</span></div><div class="line">    <span class="keyword">char</span> *_tmp = src;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (*_src) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 回滚位置</span></div><div class="line">        _tmp = _src;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (*_src == *_sub &amp;&amp; *_sub != <span class="string">'\0'</span>) &#123;</div><div class="line">            <span class="comment">// 出现相等字符，继续向下比较</span></div><div class="line">            _src++;</div><div class="line">            _sub++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (*_sub == <span class="string">'\0'</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 子串读取完成，即 已经包含子串，返回src串的地址。</span></div><div class="line">            <span class="keyword">return</span> _tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 不满足条件，回滚至相等的字符串的下一个位置。</span></div><div class="line">        _src = _tmp;</div><div class="line">        _sub = sub;</div><div class="line"></div><div class="line">        _src++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"i fjiodsj faios jfiasd jaisgoa if spofnaos"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// noSpace(str);</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, strr(str, <span class="string">"fi"</span>));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="带参数的main函数"><a href="#带参数的main函数" class="headerlink" title="带参数的main函数"></a>带参数的main函数</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><ul><li><p>无参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>有参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="字符串操作函数"><a href="#字符串操作函数" class="headerlink" title="字符串操作函数"></a>字符串操作函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/20.</span></div><div class="line"><span class="comment">  * FileName: 0x02_charReverse.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 字符串倒置</span></div><div class="line"><span class="comment"> * @param str</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">strReverse</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *start = str;</div><div class="line">    <span class="keyword">char</span> *end = str + <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> tmp = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">        tmp = *start;</div><div class="line">        *start = *end;</div><div class="line">        *end = tmp;</div><div class="line"></div><div class="line">        start++;</div><div class="line">        end--;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 是否为回文字符串  ：abcdcba</span></div><div class="line"><span class="comment"> * @param str</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isBack</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *start = str;</div><div class="line">    <span class="keyword">char</span> *end = str + <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">        <span class="keyword">if</span> (*start != *end)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        start++;</div><div class="line">        end--;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    printf("%s", str);</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba"</span>;</div><div class="line">    <span class="keyword">char</span> str2[] = <span class="string">"aab"</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, isBack(str2));</div><div class="line"><span class="comment">//    strReverse(str);</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串拷贝"><a href="#字符串拷贝" class="headerlink" title="字符串拷贝"></a>字符串拷贝</h3><h4 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h4><hr><p>字符串拷贝,若空间不足，会发生数据溢出。</p><hr><h4 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h4><hr><p>字符串拷贝,拷贝n个字节，拷贝中需要预留 \0的位置</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> src[] = <span class="string">"fdfhelfjljkljke"</span>;</div><div class="line">    <span class="keyword">char</span> dest[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = <span class="built_in">strcpy</span>(dest, src);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"dest = %s\n"</span>, dest);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %s\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> src[] = <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">char</span> dest[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = <span class="built_in">strncpy</span>(dest, src, <span class="number">99</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"dest = %s\n"</span>, dest);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %s\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><h4 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h4><hr><p>字符串拼接，自动添加 \0</p><hr><h4 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h4><hr><p>字符串拼接，拼接位n个字节。自动添加 \0</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0401</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> src[] = <span class="string">"hello"</span>;</div><div class="line">    <span class="keyword">char</span> dest[<span class="number">100</span>] = <span class="string">"world"</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">strcat</span>(dest, src));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0402</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> src[] = <span class="string">"hello"</span>;</div><div class="line">    <span class="keyword">char</span> dest[<span class="number">100</span>] = <span class="string">"world"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = <span class="built_in">strncat</span>(dest, src, <span class="number">8</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h4><hr><p>比较字符串，如果相同，返回0，不同则按位比较ASCII码 若大则返回1，小则返-1</p><hr><h4 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h4><hr><p>比较前n个字符串，如果相同，返回0，不同则按位比较ASCII码 若大则返回1，小则返-1</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0901</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str1[] = <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">char</span> str2[] = <span class="string">"hello z"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="built_in">strcmp</span>(str1, str2);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ret = %d\n"</span>, ret);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0902</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str1[] = <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">char</span> str2[] = <span class="string">"hello worlD"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="built_in">strncmp</span>(str1, str2, <span class="number">5</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ret = %d\n"</span>, ret);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串打印"><a href="#字符串打印" class="headerlink" title="字符串打印"></a>字符串打印</h3><h4 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h4><hr><p>按格式匹配符匹配对应数据输出到字符数组中。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">( <span class="keyword">char</span> *buffer, <span class="keyword">const</span> <span class="keyword">char</span> *format, ... )</span></span>;</div><div class="line">(until C99)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">( <span class="keyword">char</span> *<span class="keyword">restrict</span> buffer, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">restrict</span> format, ... )</span></span>;</div><div class="line">(since C99)</div></pre></td></tr></table></figure><h4 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h4><hr><p>从指定字符串中获取指定数据。以空格和\n为分隔依据，即终止。可以使用正则表达式。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</div><div class="line"></div><div class="line">    <span class="built_in">sprintf</span>(str, <span class="string">"%d + %d = %d"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span> + <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="built_in">puts</span>(str);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><h4 id="strchr"><a href="#strchr" class="headerlink" title="strchr"></a>strchr</h4><hr><p>在字符串中，自左向右查找指定字符的函数。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"helfjwoefjidjfle"</span>;</div><div class="line">    <span class="keyword">char</span> ch = <span class="string">'e'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = <span class="built_in">strrchr</span>(str, <span class="string">'l'</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %s\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h3><h4 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h4><hr><p>返回值为按分隔符分割后的第一个子串。<br>拆分多个字串</p><hr><ul><li>分隔符如果有多个，则罗列到条件参数中。</li><li>第一次调用时，参数1传递待分割的字符串，循环调用的时候传NULL值。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0801</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> *str = <span class="string">"aaa...bb.dsaf.asdf"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = strtok(str, <span class="string">"."</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %s\n"</span>, p);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0802</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"sadn. ksdljf&amp;$jlasdf asdojf"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = strtok(str, <span class="string">".$ "</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, p);</div><div class="line">        p = strtok(<span class="literal">NULL</span>, <span class="string">".$ "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="atoi、atof、atol"><a href="#atoi、atof、atol" class="headerlink" title="atoi、atof、atol"></a>atoi、atof、atol</h4><ul><li>自动忽略空格。可以识别负号。</li><li>从左向右判断，遇到非数字类型的则直接返回。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0901</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str1[] = <span class="string">"          -10"</span>;</div><div class="line">    <span class="keyword">int</span> num1 = atoi(str1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"num1 = %d\n"</span>, num1);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str2[] = <span class="string">"0.123"</span>;</div><div class="line">    <span class="keyword">double</span> num2 = atof(str2);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"num2 = %.2f\n"</span>, num2);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str3[] = <span class="string">"123L"</span>;</div><div class="line">    <span class="keyword">long</span> num3 = atol(str3);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"num3 = %ld\n"</span>, num3);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> str1[] = <span class="string">"12abc10"</span>;</div><div class="line">    <span class="keyword">int</span> num1 = atoi(str1);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"num1 = %d\n"</span>, num1);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"------%p\n"</span>, main0901);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;指针就是内存地址。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言字符串输入输出的几个函数</title>
    <link href="http://gmle.github.io/2018/05/17/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E4%B8%AA%E5%87%BD%E6%95%B0/"/>
    <id>http://gmle.github.io/2018/05/17/C语言中关于字符串的几个函数/</id>
    <published>2018-05-17T13:21:24.837Z</published>
    <updated>2018-05-17T13:21:24.837Z</updated>
    
    <content type="html"><![CDATA[<pre><code>C语言中有几个字符串输入输出的函数很重要。</code></pre><a id="more"></a><h2 id="gets："><a href="#gets：" class="headerlink" title="gets："></a>gets：</h2><p>键盘 -&gt; 标准输入 – stdin</p><ul><li>以 ‘\n’ 作为从stdin读取字符串的结束标记</li><li>不读取 ‘\n’, 不以空格为结束标记</li><li>若字符串的输入大于字符串定义的空间大小，则会出现运行时异常：数组溢出.</li></ul><h2 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h2><ul><li>不安全的(暂不讨论)</li><li>输出到屏幕 – 标准输出 – stdout</li><li>将字符串写出到stdout</li><li>自动添加换行符  \n</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/17.</span></div><div class="line"><span class="comment">  * FileName: 0x01_gets_puts.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arrlengh = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arrlengh);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;arr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line"><span class="comment">//    strcpy(arr, 'a');</span></div><div class="line">    arr[<span class="number">0</span>] = <span class="string">'a'</span>;</div><div class="line"></div><div class="line">    gets(arr);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"!@#!!!!!!!!!!!!!\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"!@#!!!!!!!!!!!!!\n"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">puts</span>(arr+<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(arr, <span class="string">"asdf"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">puts</span>(arr);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在使用gets的过程中出现了一个很有意思的问题。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将如上代码的char数组值置空即可得到如下说明的情况。</span></div><div class="line"><span class="keyword">char</span> arr[] = &#123;&#125;;</div></pre></td></tr></table></figure></p><p>此语句既没有赋初始值，也没有设定长度/大小.但竟然可以编译通过，但在运行后会报错。不过在IDE下没有办法显示错误。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ./a.out</div><div class="line"><span class="number">01</span></div><div class="line"><span class="number">0x7ffeed6b3a5f</span></div><div class="line">warning: this program uses gets(), which is unsafe.</div><div class="line"><span class="number">1</span>nuiuhn</div><div class="line">!@#!!!!!!!!!!!!!</div><div class="line"><span class="number">1</span></div><div class="line">!@#!!!!!!!!!!!!!</div><div class="line">iuhn</div><div class="line">[<span class="number">1</span>]    <span class="number">54873</span> <span class="built_in">abort</span>      ./a.out</div></pre></td></tr></table></figure></p><p>说明一下我的环境：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ gcc -v</div><div class="line"></div><div class="line">Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/<span class="number">4.2</span><span class="number">.1</span></div><div class="line">Apple LLVM version <span class="number">9.1</span><span class="number">.0</span> (clang<span class="number">-902.0</span><span class="number">.39</span><span class="number">.1</span>)</div><div class="line">Target: x86_64-apple-darwin17<span class="number">.5</span><span class="number">.0</span></div><div class="line">Thread model: posix</div><div class="line">InstalledDir: /Library/Developer/CommandLineTools/usr/bin</div><div class="line"></div><div class="line">IDE:Jetbrans Clion</div></pre></td></tr></table></figure></p><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h2><p>fgets(str, sizeof(str), stdin)<br>1: 数组 2。大小。3：读入源。</p><ul><li>以 ‘\n’ 作为从stdin读取字符串的结束标记</li><li>输入完毕后自动添加’\n’</li><li>当空间不足时，自动给读取的字符串添加’\0’的字符串结束标记，但字符串会因此不完整。</li><li>当空间足够时，会在读取的字符串再添加’\n’的结束标记。</li><li>在内存中的存储：“hello\n\0”</li><li>以\0为结束标记，所以会将 \0放在最后。</li></ul><h2 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h2><ul><li>安全的(暂不讨论)</li><li>int fputs(const char <em>str, FILE </em>stream)</li><li>1:写出的字符串。2：输出目标</li><li>不自动添加换行符 \n</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    fgets(arr, <span class="number">100</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="comment">//    数组，大小，标准输入(键盘)</span></div><div class="line"></div><div class="line">    <span class="built_in">fputs</span>(arr, <span class="built_in">stdout</span>);</div><div class="line">    <span class="comment">//    数组，标准输出(屏幕)</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;C语言中有几个字符串输入输出的函数很重要。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言中的函数</title>
    <link href="http://gmle.github.io/2018/05/17/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://gmle.github.io/2018/05/17/C语言的函数/</id>
    <published>2018-05-17T13:08:01.370Z</published>
    <updated>2018-05-17T13:08:01.370Z</updated>
    
    <content type="html"><![CDATA[<pre><code>C语言中的函数：每时每刻都在用到，只要你写C。</code></pre><a id="more"></a><h2 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h2><hr><p>完成某一特定功能的代码片段。</p><hr><ul><li>封装函数的目的：代码复用，使代码简洁。</li></ul><h2 id="函数分类："><a href="#函数分类：" class="headerlink" title="函数分类："></a>函数分类：</h2><ul><li>系统库函数</li><li>自定义函数</li></ul><h2 id="函数的定义和使用："><a href="#函数的定义和使用：" class="headerlink" title="函数的定义和使用："></a>函数的定义和使用：</h2><h3 id="函数定义-函数原型-接口-："><a href="#函数定义-函数原型-接口-：" class="headerlink" title="函数定义(函数原型/接口)："></a>函数定义(函数原型/接口)：</h3><ul><li>C语言中，一个函数有且只有一次<h4 id="返回值类型："><a href="#返回值类型：" class="headerlink" title="返回值类型："></a>返回值类型：</h4></li><li>返回给调用者的数据类型</li><li>void表示无返回<h4 id="函数名："><a href="#函数名：" class="headerlink" title="函数名："></a>函数名：</h4></li><li>见名知意。推荐用英文名次。<h4 id="形参列表："><a href="#形参列表：" class="headerlink" title="形参列表："></a>形参列表：</h4></li><li>形式参数列表：包含类型名，形参名，可有多个。</li></ul><h4 id="函数体："><a href="#函数体：" class="headerlink" title="函数体："></a>函数体：</h4><ul><li>若函数有返回值，函数中必须有return关键词并有实际返回。</li></ul><h3 id="函数声明："><a href="#函数声明：" class="headerlink" title="函数声明："></a>函数声明：</h3><ul><li>C语言中，有 0-n次。</li><li><p>响编译器注册该函数。</p></li><li><p>使用场景：在函数调用之前没有函数定义时，需要声明。</p></li></ul><h3 id="函数调用："><a href="#函数调用：" class="headerlink" title="函数调用："></a>函数调用：</h3><hr><p>使用该函数实现对应的功能。</p><hr><ul><li>需匹配形参列表，与形参类型严格匹配。</li><li>若函数无返回值，则参数不写。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 函数引用 - 无返回值</span></div><div class="line"><span class="comment"> * @param a</span></div><div class="line"><span class="comment"> * @param b</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 函数引用 - 有返回值</span></div><div class="line"><span class="comment"> * @param a</span></div><div class="line"><span class="comment"> * @param b</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span> </span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">19</span>, b = <span class="number">21</span>;</div><div class="line">    <span class="keyword">int</span> sum = add(&amp;a, &amp;b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sum = %d\n"</span>, sum);</div><div class="line">    printMax(a, b);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Max = %d \n"</span>, a &gt; b ? a : b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> *a + *b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="exit-函数："><a href="#exit-函数：" class="headerlink" title="exit()函数："></a>exit()函数：</h2><hr><p>退出当前程序。</p><hr><ul><li>exit如果包含在main函数中使用，与return作用相同，但不建议使用。</li><li>return：返回当前函数条用。</li></ul><h2 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h2><hr><p>一个main函数，其他源文件都是功能函数。</p><hr><p>文件1：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/17.</span></div><div class="line"><span class="comment">  * FileName: sorts.h.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INC_0X005_DAY05_SORTS_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INC_0X005_DAY05_SORTS_H</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//INC_0X005_DAY05_SORTS_H</span></span></div></pre></td></tr></table></figure></p><p>文件2：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/17.</span></div><div class="line"><span class="comment">  * FileName: bubbleSort.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// int lengh = sizeof(arr) / sizeof(arr[0]);</span></div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengh - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">10</span> - <span class="number">1</span> - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                tmp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[k]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>文件3：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/17.</span></div><div class="line"><span class="comment">  * FileName: main.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"includes/sorts.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main001</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">64</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lengh = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lengh);</div><div class="line"></div><div class="line"></div><div class="line">    bubbleSort(arr[<span class="number">10</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;C语言中的函数：每时每刻都在用到，只要你写C。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的数组</title>
    <link href="http://gmle.github.io/2018/05/15/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://gmle.github.io/2018/05/15/C语言的数组/</id>
    <published>2018-05-15T12:26:40.990Z</published>
    <updated>2018-05-15T12:26:40.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h2><hr><p>定义：数组就是在内存中连续的相同类型的变量空间。</p><ul><li>数组创建在栈上。</li><li>数组的下标从0开始。</li></ul><hr><p>数组类型 数组名[数组大小];</p><a id="more"></a><hr><p>求数组的元素个数</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div></pre></td></tr></table></figure><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/15.</span></div><div class="line"><span class="comment">  * FileName: 0x01_array.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span> = &#123;<span class="number">0</span>&#125;; <span class="comment">// 将数组的所有元素全部初始化为0.</span></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>]; <span class="comment">// 随机显示各个值</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>C语言的数组首地址和第一个元素的地址相同</p><hr><h3 id="一维数组练习"><a href="#一维数组练习" class="headerlink" title="一维数组练习"></a>一维数组练习</h3><p>练习1：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/15.</span></div><div class="line"><span class="comment">  * FileName: 0x01_array.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 数组倒置打印</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 数组大小</span></div><div class="line">    <span class="keyword">int</span> num = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, num);</div><div class="line"></div><div class="line">    <span class="comment">// 大小下标与临时变量。</span></div><div class="line">    <span class="keyword">int</span> index_min = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> index_max = num - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (index_min &lt; index_max) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"arrmin = %d---"</span>, arr[index_min]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"arrmax = %d\n"</span>, arr[index_max]);</div><div class="line"></div><div class="line">        tmp = arr[index_min];</div><div class="line">        arr[index_min] = arr[index_max];</div><div class="line">        arr[index_max] = tmp;</div><div class="line"></div><div class="line">        index_min++;</div><div class="line">        index_max--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>练习2：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 十只猪称体重</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">123</span>, <span class="number">213</span>, <span class="number">333</span>, <span class="number">412</span>, <span class="number">234</span>, <span class="number">452</span>, <span class="number">112</span>, <span class="number">341</span>, <span class="number">122</span>, <span class="number">142</span>&#125;;</div><div class="line">    <span class="keyword">int</span> num = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> weight = <span class="number">0</span>, pigx = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (weight &lt; arr[i]) &#123;</div><div class="line">            weight = arr[i];</div><div class="line">            pigx = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"第%d只小猪重量：%d"</span>, pigx + <span class="number">1</span>, weight);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>冒泡排序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 冒泡排序</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">64</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lengh = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengh - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= lengh - <span class="number">1</span> - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                tmp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lengh; k++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[k]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组的使用：<br>    数组类型 数组名称 [行数] [列数]</p><pre><code>int arr[] = {{1, 2, 3, 4},{5, 6, 7, 8}}</code></pre><h3 id="常用定义"><a href="#常用定义" class="headerlink" title="常用定义"></a>常用定义</h3><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><p>二维数组的首地址与首行元素的地址与首个元素的地址相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>,arr)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>,arr[<span class="number">0</span>])</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>,arr[<span class="number">0</span>][<span class="number">0</span>])</div></pre></td></tr></table></figure><h4 id="二维数组的大小"><a href="#二维数组的大小" class="headerlink" title="二维数组的大小"></a>二维数组的大小</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%u\n"</span>,<span class="keyword">sizeof</span>(arr));</div></pre></td></tr></table></figure><h4 id="二维数组的行数"><a href="#二维数组的行数" class="headerlink" title="二维数组的行数"></a>二维数组的行数</h4><h4 id="二维数组的列数"><a href="#二维数组的列数" class="headerlink" title="二维数组的列数"></a>二维数组的列数</h4><h4 id="二维数组元素的个数"><a href="#二维数组元素的个数" class="headerlink" title="二维数组元素的个数"></a>二维数组元素的个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0301</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</div><div class="line">                     &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 地址</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, arr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, arr[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;arr[<span class="number">0</span>][<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="comment">// 大小</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"数组大小：%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line">    <span class="comment">// 元素个数</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"数组行数：%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) (<span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>])));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"数组列数：%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) (<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>])));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"元素个数：%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) (<span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>])));</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, arr[i][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>练习：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 学生成绩</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main0302</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">12 23 24 56</span></div><div class="line"><span class="comment">12 42 45 32</span></div><div class="line"><span class="comment">33 22 11 42</span></div><div class="line"><span class="comment">12 54 12 53</span></div><div class="line"><span class="comment">*/</span></div><div class="line">    <span class="keyword">int</span> score[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> row = <span class="keyword">sizeof</span>(score) / <span class="keyword">sizeof</span>(score[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> col = <span class="keyword">sizeof</span>(score[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(score[<span class="number">0</span>][<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"************************************\n"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t"</span>, score[i][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"************************************\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</div><div class="line">            sum += score[i][j];</div><div class="line"><span class="comment">//            printf("第%d个学生的成绩为%d", i, sum);</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第%d个学生的成绩为%d\n"</span>, i, sum);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"************************************\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; k++) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</div><div class="line">            sum += score[i][k];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"第%d门学科的总成绩为%d\n"</span>, k + <span class="number">1</span>, sum);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h2><p>数组的首地址 = 数组首层的地址 = 数组的首层首行的地址 = 数组的首层首行首列的地址。<br>arr = arr[0] = arr[0][0] = arr[0][0][0]</p><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><hr><p>一系列连续的字符集合，没有 \0结束标记。<br>含有结束标记的，称之为 字符串。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><pre><code>strlen() 获取字符串的字符个数，不包含`\0`</code></pre><h3 id="scanf-添加正则"><a href="#scanf-添加正则" class="headerlink" title="scanf 添加正则"></a>scanf 添加正则</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%[.*]s"</span>, &amp;str)</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]s"</span>, &amp;str) <span class="comment">// 获取带有空格的字符串</span></div></pre></td></tr></table></figure><p>C语言中 数组中的数值必须为常量，不能为变量。</p><p>```c<br>char str[] = helloworld;<br>scanf(“%s”, &amp;str);<br>/**</p><ul><li>最后的 \0 无法存储。<br>*/</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组定义&quot;&gt;&lt;a href=&quot;#数组定义&quot; class=&quot;headerlink&quot; title=&quot;数组定义&quot;&gt;&lt;/a&gt;数组定义&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;定义：数组就是在内存中连续的相同类型的变量空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组创建在栈上。&lt;/li&gt;
&lt;li&gt;数组的下标从0开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;数组类型 数组名[数组大小];&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的运算符</title>
    <link href="http://gmle.github.io/2018/05/15/C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://gmle.github.io/2018/05/15/C语言的运算符/</id>
    <published>2018-05-15T11:16:43.424Z</published>
    <updated>2018-05-15T11:16:43.424Z</updated>
    
    <content type="html"><![CDATA[<hr><p>小知识<br>随机数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 放入随机数种子，若无则随机数将只有一个值</span></div><div class="line">srand(time(<span class="literal">NULL</span>));</div><div class="line"><span class="comment">// 限定随机数范围</span></div><div class="line"><span class="keyword">int</span> num = rand() % <span class="number">100</span>;</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h2><ul><li>除法：不能除0</li><li>取模：不能对小数取余。<!--more--></li></ul><h2 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h2><p>a++  =   a = a + 1    </p><ul><li>前自增/减,先+1，再取值</li><li>后自增/减,先取值，再+1</li></ul><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ul><li>后缀运算符比前缀运算符优先级高。</li></ul><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><ul><li>格式： a&gt;b?a:b</li><li>成立则a，不成立则b</li></ul><h2 id="逗号运算符："><a href="#逗号运算符：" class="headerlink" title="逗号运算符："></a>逗号运算符：</h2><ul><li>逗号运算符的结果是表达式最后一个值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/12.</span></div><div class="line"><span class="comment">  * FileName: 0x05_yunsuanfu.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d=%d \n"</span>,a, b, a - b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d+%d=%d \n"</span>,a, b, a + b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d*%d=%d \n"</span>,a, b, a * b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d/%d=%d \n"</span>,a, b, a / b);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d%%%d=%d \n"</span>,a, b, a % b);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a++=%d \n"</span>,a++);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a--=%d \n"</span>,++a);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a--=%d \n"</span>,a--);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--a=%d \n"</span>,--a);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a+=a=%d \n"</span>,a+=a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a-=a=%d \n"</span>,a-=a);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,a!=b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,a=b);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>隐式类型转换<ul><li>自动转换，小类型转大类型</li><li>char/short -&gt; signed int -&gt; unsigned int -&gt; long -&gt; double &lt;- short</li></ul></li><li>强制类型转换<ul><li>int a = 10</li><li>(double)a = 10;</li><li>变量或表达式都可强制转换。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/14.</span></div><div class="line"><span class="comment">  * FileName: 0x04_qiangzhuan.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main04</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 做一个隐式类型转换。</span></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10.123</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 写一个强制类型转换转换变量</span></div><div class="line">    <span class="keyword">int</span> b = <span class="number">10.123</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>, (<span class="keyword">double</span>) b);</div><div class="line">    <span class="comment">// 写一个强制类型转换转换表达式</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>, (<span class="keyword">double</span>) b * a);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>条件判断语句<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 猜数字大小</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">int</span> num = rand() % <span class="number">100</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请输入猜测的数字："</span>);</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (num &lt; value) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"大大大大大大大大大大大大了\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; value) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"小小小小小小小小小小小小了\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"猜对对对对对对对对对对对了\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="宏定义的三目运算符："><a href="#宏定义的三目运算符：" class="headerlink" title="宏定义的三目运算符："></a>宏定义的三目运算符：</h2><ul><li>#define MAX(m,n) (m)(n)?(m):(n)</li></ul><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break是一个关键字</p><ul><li>1、跳出循环（for、while、do..while）</li><li>2、switch分支 case 中使用。</li></ul><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>结束当前循环，只应用在循环语句中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d \n"</span>, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><ul><li>只能精确匹配，无法匹配范围</li><li>比if效率高</li><li>每一个case分支都必须有一个break，否则会发生case穿透<ul><li>case穿透：执行完当前case之后若无break将继续向下执行下一个case中的语句。</li></ul></li></ul><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><ul><li>break,一次跳一层循环<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="number">1</span> == i)&#123; <span class="comment">// 将值放在前面是为了防止少写一个等号</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><ul><li>先执行一次，再看表达式<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span>&#123;</div><div class="line"></div><div class="line">&#125; <span class="keyword">while</span>()&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="for-嵌套"><a href="#for-嵌套" class="headerlink" title="for 嵌套"></a>for 嵌套</h2><p>外循环一次，内循环一整个条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></div><div class="line"><span class="comment">  * Created by 忘了.</span></div><div class="line"><span class="comment">  * Date: 2018/5/12.</span></div><div class="line"><span class="comment">  * FileName: 0x02_for.c.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//***** Code is coming! *****//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 九九乘法表</span></div><div class="line"><span class="comment"> * 嵌套循环</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">            <span class="keyword">int</span> s = i * j;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d*%d=%2d\t "</span>, i, j, s);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><p>跳转至自定义标签处。<br>使用dowhile替代goto<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代替方法：</span></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line"><span class="keyword">if</span>（）</div><div class="line">   <span class="keyword">break</span>；</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;小知识&lt;br&gt;随机数：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 放入随机数种子，若无则随机数将只有一个值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 限定随机数范围&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = rand() % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
</feed>
