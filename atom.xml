<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘lele</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gmle.github.io/"/>
  <updated>2018-07-12T13:45:06.505Z</updated>
  <id>http://gmle.github.io/</id>
  
  <author>
    <name>忘了</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树</title>
    <link href="http://gmle.github.io/2018/07/12/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://gmle.github.io/2018/07/12/二叉树/</id>
    <published>2018-07-12T13:36:40.536Z</published>
    <updated>2018-07-12T13:45:06.505Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>n（n≥0）个结点的有限集合，由一个根结点以及两棵互不相交的、分别称为左子树和右子树的二叉树组成。</p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>一对二</p><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ul><li>每个结点最多只有两棵子树（不存在度大于2的结点）；</li><li>左子树和右子树次序不能颠倒（有序树）。</li></ul><h2 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h2><p>二叉树的遍历</p><ul><li>DLR — 先序遍历，即先根再左再右</li><li>LDR — 中序遍历，即先左再根再右</li><li>LRD — 后序遍历，即先左再右再根</li></ul><p>“先、中、后”的意思是指访问的结点D是先于子树出现还是后于子树出现。<br>从递归的角度看，这三种算法是完全相同的，或者说这三种遍历算法的访问路径是相同的，只是访问结点的时机不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">LeftChirld</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">RightChirld</span>;</span></div><div class="line">&#125; BubaryNode;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(BubaryNode *pBINARYNODE)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">    BubaryNode nodeA = &#123;<span class="string">'A'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeB = &#123;<span class="string">'B'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeC = &#123;<span class="string">'C'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeD = &#123;<span class="string">'D'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeE = &#123;<span class="string">'E'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeF = &#123;<span class="string">'F'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeG = &#123;<span class="string">'G'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BubaryNode nodeH = &#123;<span class="string">'H'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 建立关系</span></div><div class="line">    nodeA.LeftChirld = &amp;nodeB;</div><div class="line">    nodeA.RightChirld = &amp;nodeF;</div><div class="line">    nodeB.RightChirld = &amp;nodeC;</div><div class="line">    nodeC.LeftChirld = &amp;nodeD;</div><div class="line">    nodeC.RightChirld = &amp;nodeE;</div><div class="line">    nodeF.RightChirld = &amp;nodeG;</div><div class="line">    nodeG.LeftChirld = &amp;nodeH;</div><div class="line"></div><div class="line">    recursion(&amp;nodeA);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 二叉树递归</span></div><div class="line"><span class="comment"> * @param rootNode</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(BubaryNode *rootNode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (rootNode == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 先序遍历 ：先根，再左，再右。</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c "</span>, rootNode-&gt;ch);</div><div class="line">    recursion(rootNode-&gt;LeftChirld);</div><div class="line">    recursion(rootNode-&gt;RightChirld);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 中序遍历 ：先左，再右，再根。</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    recursion(rootNode-&gt;LeftChirld);</span></div><div class="line"><span class="comment">    printf("%c ", rootNode-&gt;ch);</span></div><div class="line"><span class="comment">    recursion(rootNode-&gt;RightChirld);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 后序遍历 ： 先左，再右，再根。</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">    recursion(rootNode-&gt;LeftChirld);</span></div><div class="line"><span class="comment">    recursion(rootNode-&gt;RightChirld);</span></div><div class="line"><span class="comment">    printf("%c ", rootNode-&gt;ch);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test1();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二叉树的使用"><a href="#二叉树的使用" class="headerlink" title="二叉树的使用"></a>二叉树的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">LeftChirld</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">RightChirld</span>;</span></div><div class="line">&#125; BinaryNode;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 计算二叉树高度：左子树与右子树同时为NULL，则为叶子</span></div><div class="line"><span class="comment"> * @param rootnode</span></div><div class="line"><span class="comment"> * @param p</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calLeaves</span><span class="params">(BinaryNode *rootnode, <span class="keyword">int</span> *p)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (rootnode == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (rootnode-&gt;LeftChirld == <span class="literal">NULL</span> &amp;&amp; rootnode-&gt;RightChirld == <span class="literal">NULL</span>) &#123;</div><div class="line">        (*p)++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    calLeaves(rootnode-&gt;LeftChirld, p);</div><div class="line">    calLeaves(rootnode-&gt;RightChirld, p);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 二叉树遍历</span></div><div class="line"><span class="comment"> * @param rootNode</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(BinaryNode *rootNode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (rootNode == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c "</span>, rootNode-&gt;ch);</div><div class="line">    recursion(rootNode-&gt;LeftChirld);</div><div class="line">    recursion(rootNode-&gt;RightChirld);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinaryTreeHeight</span><span class="params">(BinaryNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> left = BinaryTreeHeight(root-&gt;LeftChirld);</div><div class="line">    <span class="keyword">int</span> right = BinaryTreeHeight(root-&gt;RightChirld);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 拷贝二叉树</span></div><div class="line"><span class="comment"> * @param root</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> BinaryNode *<span class="title">copyTree</span><span class="params">(BinaryNode *root)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BinaryNode *leftChild = copyTree(root-&gt;LeftChirld);</div><div class="line">    BinaryNode *rightChild = copyTree(root-&gt;RightChirld);</div><div class="line"></div><div class="line">    BinaryNode *newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinaryNode));</div><div class="line">    newNode-&gt;ch = root-&gt;ch;</div><div class="line"></div><div class="line">    newNode-&gt;LeftChirld = leftChild;</div><div class="line">    newNode-&gt;RightChirld = rightChild;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 二叉树的内存释放</span></div><div class="line"><span class="comment"> * @param root</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">freeTree</span><span class="params">(BinaryNode *root)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (root==<span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    freeTree(root-&gt;LeftChirld);</div><div class="line">    freeTree(root-&gt;RightChirld);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Free:%c\n"</span>, root-&gt;ch);</div><div class="line">    <span class="built_in">free</span>(root);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    BinaryNode nodeA = &#123;<span class="string">'A'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeB = &#123;<span class="string">'B'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeC = &#123;<span class="string">'C'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeD = &#123;<span class="string">'D'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeE = &#123;<span class="string">'E'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeF = &#123;<span class="string">'F'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeG = &#123;<span class="string">'G'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    BinaryNode nodeH = &#123;<span class="string">'H'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 建立关系</span></div><div class="line">    nodeA.LeftChirld = &amp;nodeB;</div><div class="line">    nodeA.RightChirld = &amp;nodeF;</div><div class="line">    nodeB.RightChirld = &amp;nodeC;</div><div class="line">    nodeC.LeftChirld = &amp;nodeD;</div><div class="line">    nodeC.RightChirld = &amp;nodeE;</div><div class="line">    nodeF.RightChirld = &amp;nodeG;</div><div class="line">    nodeG.LeftChirld = &amp;nodeH;</div><div class="line"></div><div class="line">    calLeaves(&amp;nodeA, &amp;num);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"二叉树叶子数量：%d\n"</span>, num);</div><div class="line"></div><div class="line"></div><div class="line">    BinaryNode *newTree = copyTree(&amp;nodeA);</div><div class="line">    recursion(newTree);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n二叉树高度：%d\n"</span>, BinaryTreeHeight(&amp;nodeA));</div><div class="line"></div><div class="line">    freeTree(newTree);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">":::%c\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">char</span>) newTree-&gt;RightChirld-&gt;RightChirld);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://gmle.github.io/2018/07/12/%E9%98%9F%E5%88%97/"/>
    <id>http://gmle.github.io/2018/07/12/队列/</id>
    <published>2018-07-12T13:27:23.985Z</published>
    <updated>2018-07-12T13:36:59.498Z</updated>
    
    <content type="html"><![CDATA[<p>队列的链表实现</p><a id="more"></a><p>FILE1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LINKQUEUE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _LINKQUEUE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">QUEUENODE</span>&#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QUEUENODE</span> *<span class="title">next</span>;</span></div><div class="line">&#125;QueueNode;</div><div class="line"></div><div class="line"><span class="comment">// 队列结构体</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LISTQUEUE</span>&#123;</span></div><div class="line">    QueueNode header;</div><div class="line">    <span class="keyword">int</span> ListQueueSize;</div><div class="line"></div><div class="line">    QueueNode *tail;</div><div class="line"></div><div class="line">&#125; ListQueue;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *LinkQueue;</div><div class="line"></div><div class="line"><span class="comment">// 初始化</span></div><div class="line"><span class="function">LinkQueue <span class="title">init_LinkQueue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 入队</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_LinkQueue</span><span class="params">(LinkQueue q, <span class="keyword">void</span> *data)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 出队</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop__LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 队列大小</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 队列是否为空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 队列头</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">front_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 队列尾</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">back_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_LINKQUEUE_H</span></span></div></pre></td></tr></table></figure><p>FILE2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linkQueue.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// 初始化</span></div><div class="line"><span class="function">LinkQueue <span class="title">init_LinkQueue</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    ListQueue *<span class="built_in">queue</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListQueue));</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">queue</span>-&gt;header.next = <span class="literal">NULL</span>;</div><div class="line">    <span class="built_in">queue</span>-&gt;ListQueueSize = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>-&gt;tail = &amp;<span class="built_in">queue</span>-&gt;header;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_LinkQueue</span><span class="params">(LinkQueue lq, <span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lq == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ListQueue *<span class="built_in">queue</span> = lq;</div><div class="line">    QueueNode *qNode = data;</div><div class="line"></div><div class="line">    <span class="comment">// 尾插</span></div><div class="line">    <span class="built_in">queue</span>-&gt;tail-&gt;next = qNode;</div><div class="line">    qNode-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>-&gt;tail = qNode;</div><div class="line"></div><div class="line">    <span class="built_in">queue</span>-&gt;ListQueueSize++;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop__LinkQueue</span><span class="params">(LinkQueue q)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ListQueue *listQueue = q;</div><div class="line"></div><div class="line">    <span class="comment">// 没有要删除的元素</span></div><div class="line">    <span class="keyword">if</span> (listQueue-&gt;ListQueueSize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果只有一个节点，则将尾部节点指向头节点。</span></div><div class="line">    <span class="keyword">if</span> (listQueue-&gt;ListQueueSize == <span class="number">1</span>) &#123;</div><div class="line">        listQueue-&gt;header.next = <span class="literal">NULL</span>;</div><div class="line">        listQueue-&gt;tail = &amp;listQueue-&gt;header;</div><div class="line">        listQueue-&gt;ListQueueSize--;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 大于一个节点的情况</span></div><div class="line">    QueueNode *headNode = listQueue-&gt;header.next;</div><div class="line"></div><div class="line">    listQueue-&gt;header.next = headNode-&gt;next;</div><div class="line"></div><div class="line">    listQueue-&gt;ListQueueSize--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_LinkQueue</span><span class="params">(LinkQueue q)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ListQueue *<span class="built_in">queue</span> = q;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;ListQueueSize;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_LinkQueue</span><span class="params">(LinkQueue q)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ListQueue *<span class="built_in">queue</span> = q;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;ListQueueSize == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">front_LinkQueue</span><span class="params">(LinkQueue q)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ListQueue *<span class="built_in">queue</span> = q;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;header.next;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">back_LinkQueue</span><span class="params">(LinkQueue q)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ListQueue *<span class="built_in">queue</span> = q;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;tail;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory_LinkQueue</span><span class="params">(LinkQueue q)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(q);</div><div class="line">    q = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FILE3:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linkQueue.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> *node;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//初始化队列</span></div><div class="line">    LinkQueue myQueue = init_LinkQueue();</div><div class="line"></div><div class="line">    <span class="comment">//准备数据</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p1</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"aaa"</span>, <span class="number">10</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p2</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"bbb"</span>, <span class="number">20</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p3</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ccc"</span>, <span class="number">30</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p4</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ddd"</span>, <span class="number">40</span>&#125;;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//入队</span></div><div class="line">    push_LinkQueue(myQueue, &amp;p1);</div><div class="line">    push_LinkQueue(myQueue, &amp;p2);</div><div class="line">    push_LinkQueue(myQueue, &amp;p3);</div><div class="line">    push_LinkQueue(myQueue, &amp;p4);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"队列大小为：%d\n"</span>, size_LinkQueue(myQueue));</div><div class="line">    <span class="keyword">while</span> (isEmpty_LinkQueue(myQueue) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//访问队头</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">pFront</span> = <span class="title">front_LinkQueue</span>(<span class="title">myQueue</span>);</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"链式存储::队头元素 -- 姓名：%s  年龄： %d\n"</span>, pFront-&gt;name, pFront-&gt;age);</div><div class="line">        <span class="comment">//访问队尾</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">pBack</span> = <span class="title">back_LinkQueue</span>(<span class="title">myQueue</span>);</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"链式存储::队尾元素 -- 姓名：%s  年龄： %d\n"</span>, pBack-&gt;name, pBack-&gt;age);</div><div class="line">        <span class="comment">//出队</span></div><div class="line">        pop__LinkQueue(myQueue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"队列大小为：%d\n"</span>, size_LinkQueue(myQueue));</div><div class="line"></div><div class="line">    <span class="comment">//销毁队列</span></div><div class="line">    destory_LinkQueue(myQueue);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;队列的链表实现&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://gmle.github.io/2018/07/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://gmle.github.io/2018/07/12/插入排序/</id>
    <published>2018-07-12T13:24:43.925Z</published>
    <updated>2018-07-12T13:27:16.043Z</updated>
    
    <content type="html"><![CDATA[<p>插入排序实现思路：</p><ul><li>从I = 1位置开始  做外层循环 </li><li>判断 如果  I -1 &gt; I 将i指向的数据缓存</li><li>j开始做内侧循环，找到要插入的位置 将缓存数据插入到 j +1位置上</li><li>i++</li></ul><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 插入排序.</span></div><div class="line"><span class="comment"> * @param arr</span></div><div class="line"><span class="comment"> * @param len</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i]) &#123;</div><div class="line">            <span class="keyword">int</span> temp = arr[i];</div><div class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]; j--) &#123;</div><div class="line">                <span class="comment">//数据后移</span></div><div class="line">                arr[j + <span class="number">1</span>] = arr[j];</div><div class="line">            &#125;</div><div class="line">            arr[j + <span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    insertSort(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</div><div class="line"></div><div class="line">    assert(arr[<span class="number">0</span>]==<span class="number">0</span>);</div><div class="line">    assert(arr[<span class="number">1</span>]==<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;插入排序实现思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从I = 1位置开始  做外层循环 &lt;/li&gt;
&lt;li&gt;判断 如果  I -1 &amp;gt; I 将i指向的数据缓存&lt;/li&gt;
&lt;li&gt;j开始做内侧循环，找到要插入的位置 将缓存数据插入到 j +1位置上&lt;/li&gt;
&lt;li&gt;i++&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>利用栈规则做就近括号匹配</title>
    <link href="http://gmle.github.io/2018/07/11/%E5%88%A9%E7%94%A8%E6%A0%88%E8%A7%84%E5%88%99%E5%81%9A%E5%B0%B1%E8%BF%91%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>http://gmle.github.io/2018/07/11/利用栈规则做就近括号匹配/</id>
    <published>2018-07-11T13:50:43.276Z</published>
    <updated>2018-07-11T13:53:48.751Z</updated>
    
    <content type="html"><![CDATA[<p>利用栈规则做就近括号匹配<br><a id="more"></a></p><p>从第一个字符开始扫描<br>当遇见普通字符时忽略，<br>当遇见左括号时压入栈中<br>当遇见右括号时从栈中弹出栈顶符号，并进行匹配<br>匹配成功：继续读入下一个字符<br>匹配失败：立即停止，并报错<br>结束：<br>成功: 所有字符扫描完毕，且栈为空<br>失败：匹配失败或所有字符扫描完毕但栈非空</p><p>FILE1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SEQSTACK_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _SEQSTACK_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX 1024</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> *data[MAX];  <span class="comment">//栈的数组</span></div><div class="line">    <span class="keyword">int</span> m_Size; <span class="comment">//栈大小</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *SeqStack;</div><div class="line"></div><div class="line"><span class="comment">//初始化栈</span></div><div class="line"><span class="function">SeqStack <span class="title">init_SeqStack</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//入栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">void</span> *data)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//出栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//返回栈顶</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//返回栈大小</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//判断栈是否为空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//销毁栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_SEQSTACK_H</span></span></div></pre></td></tr></table></figure><p>FILE2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SeqStack.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//初始化栈</span></div><div class="line"><span class="function">SeqStack <span class="title">init_SeqStack</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">myStack</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">SStack</span>));</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (myStack == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化数组</span></div><div class="line">    <span class="built_in">memset</span>(myStack-&gt;data, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * MAX);</div><div class="line"></div><div class="line">    <span class="comment">//初始化栈大小</span></div><div class="line">    myStack-&gt;m_Size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> myStack;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//入栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line">    <span class="comment">//入栈本质  --- 数组尾插</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></div><div class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == MAX) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mystack-&gt;data[mystack-&gt;m_Size] = data;</div><div class="line"></div><div class="line">    mystack-&gt;m_Size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//出栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</div><div class="line">    <span class="comment">//出栈本质  --- 数组尾删</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mystack-&gt;data[mystack-&gt;m_Size - <span class="number">1</span>] = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    mystack-&gt;m_Size--;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//返回栈顶</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mystack-&gt;data[mystack-&gt;m_Size - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//返回栈大小</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> mystack-&gt;m_Size;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//判断栈是否为空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回-1代表真  空栈</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//返回0 代表 不是空栈</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//销毁栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</div><div class="line">    <span class="built_in">stack</span> = <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FILE3:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLeft</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ch == <span class="string">'('</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isRight</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ch == <span class="string">')'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *str = <span class="string">"123*(was)s(sd)sdb(fs())())))(()"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = str;</div><div class="line"></div><div class="line">    SeqStack *<span class="built_in">stack</span> = init_SeqStack();</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (*p != <span class="string">'\0'</span>) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//如果是左括号，入栈</span></div><div class="line">        <span class="keyword">if</span> (isLeft(*p)) &#123;</div><div class="line">            push_SeqStack(<span class="built_in">stack</span>, p);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isRight(*p)) &#123;</div><div class="line">            <span class="keyword">if</span> (size_SeqStack(<span class="built_in">stack</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">                pop_SeqStack(<span class="built_in">stack</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                error(str, <span class="string">"Error!"</span>, p);</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        p++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (size_SeqStack(<span class="built_in">stack</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        error(str, <span class="string">"Error"</span>, top_SeqStack(<span class="built_in">stack</span>));</div><div class="line">        pop_SeqStack(<span class="built_in">stack</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    destroy_SeqStack(<span class="built_in">stack</span>);</div><div class="line"></div><div class="line">    <span class="built_in">stack</span> = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> b = isEmpty_SeqStack(<span class="built_in">stack</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n=-=-=-=-=-=-=-====-=-=\n%d\n"</span>,b);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">char</span> *<span class="built_in">string</span>, <span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, <span class="built_in">string</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num = (<span class="keyword">int</span>) (p - str);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> b = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用栈规则做就近括号匹配&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>链表的开发实现</title>
    <link href="http://gmle.github.io/2018/07/11/C%E8%AF%AD%E8%A8%80%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>http://gmle.github.io/2018/07/11/C语言的链表/</id>
    <published>2018-07-11T13:20:20.691Z</published>
    <updated>2018-07-12T13:28:30.357Z</updated>
    
    <content type="html"><![CDATA[<p>链表的开发实现<br><a id="more"></a></p><h2 id="普通实现"><a href="#普通实现" class="headerlink" title="普通实现"></a>普通实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKNODE</span> &#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKNODE</span> *<span class="title">next</span>;</span></div><div class="line"></div><div class="line">&#125; LinkNode;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKLIST</span> &#123;</span></div><div class="line">    LinkNode linkHeader;</div><div class="line">    <span class="keyword">int</span> linkNodeSize;</div><div class="line">&#125; LinkLists;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *LinkList;</div><div class="line"></div><div class="line"><span class="function">LinkList <span class="title">LINKLIST_INIT</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    LinkLists *<span class="built_in">list</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkLists));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">list</span>-&gt;linkHeader.next = <span class="literal">NULL</span>;</div><div class="line">    <span class="built_in">list</span>-&gt;linkNodeSize = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKLIST_INSERT</span><span class="params">(LinkList <span class="built_in">list</span>, <span class="keyword">int</span> pos, <span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Failed"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LinkLists *lists = <span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; lists-&gt;linkNodeSize) &#123;</div><div class="line">        pos = lists-&gt;linkNodeSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 数据的前四个字节存放的指针，将其强转为LinkNode指针。</span></div><div class="line">    LinkNode *node = data;</div><div class="line"></div><div class="line">    LinkNode *p = &amp;lists-&gt;linkHeader;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    node-&gt;next = p-&gt;next;</div><div class="line">    p-&gt;next = node;</div><div class="line"></div><div class="line">    lists-&gt;linkNodeSize++;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void PRINTF_LINKNODE(LinkList list, void(*print)(void *)) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LinkLists *lists = <span class="built_in">list</span>;</div><div class="line">    LinkNode *node = lists-&gt;linkHeader.next;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists-&gt;linkNodeSize; i++) &#123;</div><div class="line">        print(node);</div><div class="line">        node = node-&gt;next;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKLIST_DELETEBYPOS</span><span class="params">(LinkList <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line"></div><div class="line">    LinkLists *lists = <span class="built_in">list</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || pos &lt; <span class="number">0</span> || pos &gt; lists-&gt;linkNodeSize) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LinkNode *qNode = &amp;lists-&gt;linkHeader;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</div><div class="line">        qNode = qNode-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LinkNode *delNode = qNode-&gt;next;</div><div class="line"></div><div class="line">    qNode-&gt;next = delNode-&gt;next;</div><div class="line">    lists--;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PERSON</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> *node;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125; Person;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintPerson</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line">    Person *p = data;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"姓名： %s  年龄： %d \n"</span>, p-&gt;name, p-&gt;age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//初始化链表</span></div><div class="line">    LinkList mylist = LINKLIST_INIT();</div><div class="line"></div><div class="line">    <span class="comment">//创建数据</span></div><div class="line">    Person p1 = &#123;<span class="literal">NULL</span>, <span class="string">"aaa"</span>, <span class="number">10</span>&#125;;</div><div class="line">    Person p2 = &#123;<span class="literal">NULL</span>, <span class="string">"bbb"</span>, <span class="number">20</span>&#125;;</div><div class="line">    Person p3 = &#123;<span class="literal">NULL</span>, <span class="string">"ccc"</span>, <span class="number">30</span>&#125;;</div><div class="line">    Person p4 = &#123;<span class="literal">NULL</span>, <span class="string">"ddd"</span>, <span class="number">40</span>&#125;;</div><div class="line">    Person p5 = &#123;<span class="literal">NULL</span>, <span class="string">"eee"</span>, <span class="number">50</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//插入节点</span></div><div class="line">    LINKLIST_INSERT(mylist, <span class="number">0</span>, &amp;p1);</div><div class="line">    LINKLIST_INSERT(mylist, <span class="number">2</span>, &amp;p2);</div><div class="line">    LINKLIST_INSERT(mylist, <span class="number">1</span>, &amp;p3);</div><div class="line">    LINKLIST_INSERT(mylist, <span class="number">-1</span>, &amp;p4);</div><div class="line">    LINKLIST_INSERT(mylist, <span class="number">0</span>, &amp;p5);</div><div class="line"></div><div class="line">    <span class="comment">//遍历</span></div><div class="line">    PRINTF_LINKNODE(mylist, myPrintPerson);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=-=-=-=-=-=-=-=-=-=-=-=\n"</span>);</div><div class="line"></div><div class="line">    LINKLIST_DELETEBYPOS(mylist, <span class="number">1</span>);</div><div class="line">    PRINTF_LINKNODE(mylist, myPrintPerson);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKNODE_RESET</span><span class="params">(LinkList <span class="built_in">list</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">    LinkLists *lists = <span class="built_in">list</span>;</div><div class="line">    lists-&gt;linkHeader = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKNODE_DESTORY</span><span class="params">(LinkList <span class="built_in">list</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</div><div class="line"></div><div class="line">    <span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> &#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> *<span class="title">next</span>;</span></div><div class="line">&#125; StackNode;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> &#123;</span></div><div class="line">    StackNode nodeHead;</div><div class="line">    <span class="keyword">int</span> nodesize;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *LinkStack;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">LinkStack <span class="title">init_LinkStack</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">LStack</span>));</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>-&gt;nodeHead.next = <span class="literal">NULL</span>;</div><div class="line">    <span class="built_in">stack</span>-&gt;nodesize = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 对于链表而言，入栈本质为头插</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_LinkStack</span><span class="params">(LinkStack s, <span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></div><div class="line"></div><div class="line">    <span class="comment">// 将用户数据取出钱四个字节用于地址。</span></div><div class="line"></div><div class="line">    StackNode *node = data;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 更改指针指向</span></div><div class="line">    node-&gt;next = <span class="built_in">stack</span>-&gt;nodeHead.next;</div><div class="line">    <span class="built_in">stack</span>-&gt;nodeHead.next = node;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>-&gt;nodesize++;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_LinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;nodesize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    StackNode *firstNode = <span class="built_in">stack</span>-&gt;nodeHead.next;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>-&gt;nodeHead.next = firstNode-&gt;next;</div><div class="line"></div><div class="line">    <span class="built_in">stack</span>-&gt;nodesize--;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_LinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;nodesize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;nodeHead.next;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_LinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;nodesize;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty_Linstack</span><span class="params">(LinkStack s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;nodesize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryLinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(s);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> *node;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//初始化栈</span></div><div class="line">    LinkStack myStack = init_LinkStack();</div><div class="line"></div><div class="line">    <span class="comment">//创建数据</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p1</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"aaa"</span>, <span class="number">10</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p2</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"bbb"</span>, <span class="number">20</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p3</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ccc"</span>, <span class="number">30</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p4</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ddd"</span>, <span class="number">40</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p5</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"eee"</span>, <span class="number">50</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//入栈</span></div><div class="line">    push_LinkStack(myStack, &amp;p1);</div><div class="line">    push_LinkStack(myStack, &amp;p2);</div><div class="line">    push_LinkStack(myStack, &amp;p3);</div><div class="line">    push_LinkStack(myStack, &amp;p4);</div><div class="line">    push_LinkStack(myStack, &amp;p5);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"链式存储 -- 栈的元素个数为：%d\n"</span>, size_LinkStack(myStack));</div><div class="line"></div><div class="line">    <span class="comment">//栈不为空，查看栈顶元素，出栈</span></div><div class="line">    <span class="keyword">while</span> (isEmpty_Linstack(myStack) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">p</span> = <span class="title">top_LinkStack</span>(<span class="title">myStack</span>);</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"姓名：%s 年龄：%d\n"</span>, p-&gt;name, p-&gt;age);</div><div class="line"></div><div class="line">        <span class="comment">//出栈</span></div><div class="line">        pop_LinkStack(myStack);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"链式存储 -- 栈的元素个数为：%d\n"</span>, size_LinkStack(myStack));</div><div class="line"></div><div class="line">    <span class="comment">//销毁栈</span></div><div class="line">    destoryLinkStack(myStack);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链表的开发实现&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下CLion的使用</title>
    <link href="http://gmle.github.io/2018/07/08/Clion%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8BMacOS%E7%AF%87/"/>
    <id>http://gmle.github.io/2018/07/08/Clion的使用技巧之MacOS篇/</id>
    <published>2018-07-08T00:57:35.372Z</published>
    <updated>2018-07-09T01:22:57.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CLIon介绍"><a href="#CLIon介绍" class="headerlink" title="CLIon介绍"></a>CLIon介绍</h2><p>CLion是<a href="https://jetbrains.com" target="_blank" rel="external">Jetbrains</a>公司开发的一款编写C/C++的IDE；<br>而且Jetbrains有特别多的IDE去供不同语言的开发者去使用,涵盖了大多数主流开发语言。</p><p>有句话说，Jetbrains出品，必属精品，作为一款有着昂贵收费的IDE，我在使用后就感受到了CLion的强大之处。<br><strong>我所使用的Jetbrains产品激活码由 </strong><a href="https://hsweb.me" target="_blank" rel="external">hsweb</a><strong> 作者提供，感谢支持。</strong></p><a id="more"></a><h2 id="CLion开篇"><a href="#CLion开篇" class="headerlink" title="CLion开篇"></a>CLion开篇</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><center><br>    <img src="/images/clion/01_start.png" height="50%" width="50%"><br>    启动界面<br></center><h3 id="启动界面说明"><a href="#启动界面说明" class="headerlink" title="启动界面说明"></a>启动界面说明</h3><center><br>    <img src="/images/clion/02_shuoming.png" height="50%" width="50%"><br>    启动界面说明<br></center><h3 id="各个按钮-选项说明"><a href="#各个按钮-选项说明" class="headerlink" title="各个按钮/选项说明"></a>各个按钮/选项说明</h3><h4 id="New-Project"><a href="#New-Project" class="headerlink" title="New Project"></a>New Project</h4><p>顾名思义，新建工程。点击效果图：</p><center><br>    <img src="/images/clion/03_newproject.png"><br>    新建工程界面<br></center><p><strong>页面介绍：</strong></p><ul><li>C++ Executable<ul><li>C++的可执行程序</li></ul></li><li>C++ Library<ul><li>C++的动态库/静态库</li></ul></li><li>C Executable<ul><li>C的可执行程序</li></ul></li><li>C Library<ul><li>C的动态库/静态库<br>…<br>其余不再叙述，因本帖旨在介绍C/C++的IDE，若有兴趣，读者可自行尝试。</li></ul></li></ul><h5 id="C-Library-C-Library"><a href="#C-Library-C-Library" class="headerlink" title="C++ Library/C Library"></a>C++ Library/C Library</h5><p>这两个选项提供了C/C++的动态库与静态库的生成，若是对CMake比较熟悉的人应该不会陌生，<br>因为这两个选项只是在CMakeLists.txt中提供了一个CMake的命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 生成动态库</div><div class="line">ADD_LIBRARY(libname SHARED library.c library.h)</div></pre></td></tr></table></figure><center><br>    <img src="/images/clion/04_cpplibrary.png"><br>    新建一个静/动态库工程<br></center><h5 id="C-Executable-C-Executable"><a href="#C-Executable-C-Executable" class="headerlink" title="C++ Executable/C Executable"></a>C++ Executable/C Executable</h5><p>这两个选项提供的是执行项目的创建。<br>最简单的HelloWorld会通过这两个工程项去建立。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CLIon介绍&quot;&gt;&lt;a href=&quot;#CLIon介绍&quot; class=&quot;headerlink&quot; title=&quot;CLIon介绍&quot;&gt;&lt;/a&gt;CLIon介绍&lt;/h2&gt;&lt;p&gt;CLion是&lt;a href=&quot;https://jetbrains.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jetbrains&lt;/a&gt;公司开发的一款编写C/C++的IDE；&lt;br&gt;而且Jetbrains有特别多的IDE去供不同语言的开发者去使用,涵盖了大多数主流开发语言。&lt;/p&gt;
&lt;p&gt;有句话说，Jetbrains出品，必属精品，作为一款有着昂贵收费的IDE，我在使用后就感受到了CLion的强大之处。&lt;br&gt;&lt;strong&gt;我所使用的Jetbrains产品激活码由 &lt;/strong&gt;&lt;a href=&quot;https://hsweb.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hsweb&lt;/a&gt;&lt;strong&gt; 作者提供，感谢支持。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CLion" scheme="http://gmle.github.io/categories/CLion/"/>
    
    
      <category term="CLion" scheme="http://gmle.github.io/tags/CLion/"/>
    
  </entry>
  
  <entry>
    <title>C语言中的函数指针</title>
    <link href="http://gmle.github.io/2018/07/06/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/06/C语言的函数指针/</id>
    <published>2018-07-06T13:36:43.611Z</published>
    <updated>2018-07-06T13:56:58.883Z</updated>
    
    <content type="html"><![CDATA[<p>函数名本质就是一个函数指针。<br>它是一个指向函数的地址。</p><a id="more"></a><h2 id="函数指针的定义"><a href="#函数指针的定义" class="headerlink" title="函数指针的定义"></a>函数指针的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 函数指针和指针函数的区别：</span></div><div class="line"><span class="comment"> *      函数指针：指向了函数的指针。</span></div><div class="line"><span class="comment"> *      指针函数：函数返回至是指针的函数。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Aaa"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 先定义出函数类型，再通过类型定义函数指针。</span></div><div class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(FUNC_TYPE)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>)</span></span>;</div><div class="line"></div><div class="line">    FUNC_TYPE *pFunc = func;</div><div class="line"></div><div class="line">    pFunc(<span class="number">10</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 先定义出函数指针类型，再通过类型定义函数指针。</span></div><div class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FUNC_TYPE)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>)</span></span>;</div><div class="line"></div><div class="line">    FUNC_TYPE pFunc = func;</div><div class="line"></div><div class="line">    pFunc(<span class="number">10</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 直接定义函数指针变量。</span></div><div class="line">    <span class="keyword">void</span> (*pFunc)(<span class="keyword">int</span>, <span class="keyword">char</span>) = func;</div><div class="line"></div><div class="line">    pFunc(<span class="number">10</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"aaa"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"bbb"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ccc"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 一次性调用多个相同返回值，相同形参的函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> (*pFuncArr[<span class="number">3</span>])();</div><div class="line"></div><div class="line">    pFuncArr[<span class="number">0</span>] = func1;</div><div class="line">    pFuncArr[<span class="number">1</span>] = func2;</div><div class="line">    pFuncArr[<span class="number">2</span>] = func3;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        pFuncArr[i]();</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    test01();</span></div><div class="line"><span class="comment">//    test02();</span></div><div class="line"><span class="comment">//    test03();</span></div><div class="line">    test04();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="函数指针作函数返回值"><a href="#函数指针作函数返回值" class="headerlink" title="函数指针作函数返回值"></a>函数指针作函数返回值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line">static void printTest(void *data, void(*print)(void *))&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"打印调用："</span>);</div><div class="line">    print(data);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInt</span><span class="params">(<span class="keyword">void</span> *data)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *pData = data;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pData);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"></div><div class="line"></div><div class="line">    printInt(&amp;a);</div><div class="line"></div><div class="line">    <span class="comment">// 回调函数</span></div><div class="line">    printTest(&amp;a, printInt);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span>&#123;</span></div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125; per;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(<span class="keyword">void</span> *data)</span></span>&#123;</div><div class="line"></div><div class="line">    per *person = data;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s, %d\n"</span>, person-&gt;name, person-&gt;age);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</div><div class="line">    per person = &#123;<span class="string">"abc"</span>, <span class="number">10</span>&#125;;</div><div class="line"></div><div class="line">    printPerson(&amp;person);</div><div class="line"></div><div class="line">    printTest(&amp;person, &amp;printPerson);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//    test01();</span></div><div class="line">    test02();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="回调函数小例子-打印任意类型的数组"><a href="#回调函数小例子-打印任意类型的数组" class="headerlink" title="回调函数小例子:打印任意类型的数组"></a>回调函数小例子:打印任意类型的数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 打印任意类型的数组</span></div><div class="line"></div><div class="line">static void printArray(void *pArray, int lenth, int elementSize, void (*print)(void *)) &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">char</span> *p = pArray;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenth; i++) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">char</span> *elementAddress = p + elementSize * i;</div><div class="line"></div><div class="line">        print(elementAddress);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 打印int类型数组回调函数实现</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printIntArr</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *pArr = data;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pArr);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 打印int类型数组</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arrLen = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    printArray(arr, arrLen, <span class="number">4</span>, printIntArr);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEOPLE</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">&#125; pp;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPeople</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</div><div class="line"></div><div class="line">    pp *p = data;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s, %d\n"</span>, p-&gt;name, p-&gt;age);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    pp p[<span class="number">3</span>] = &#123;</div><div class="line">            &#123;<span class="string">"aaa"</span>, <span class="number">10</span>&#125;,</div><div class="line">            &#123;<span class="string">"bbb"</span>, <span class="number">20</span>&#125;,</div><div class="line">            &#123;<span class="string">"ccc"</span>, <span class="number">30</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> pSize = <span class="keyword">sizeof</span>(p) / <span class="keyword">sizeof</span>(pp);</div><div class="line"></div><div class="line">    printArray(p, pSize, <span class="keyword">sizeof</span>(pp), printPeople);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line">    test02();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数名本质就是一个函数指针。&lt;br&gt;它是一个指向函数的地址。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>链表与链表的基本操作</title>
    <link href="http://gmle.github.io/2018/07/06/%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://gmle.github.io/2018/07/06/链表与基本操作/</id>
    <published>2018-07-06T13:18:32.712Z</published>
    <updated>2018-07-12T13:28:46.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用链表："><a href="#为什么要使用链表：" class="headerlink" title="为什么要使用链表："></a>为什么要使用链表：</h2><ul><li>数组缺陷<ul><li>一旦分配好内存，不能再动态扩展。</li><li>如果分配过多，会造成资源浪费</li></ul></li><li>对于头部插入或删除的效率低</li></ul><a id="more"></a><h2 id="链表的组成"><a href="#链表的组成" class="headerlink" title="链表的组成"></a>链表的组成</h2><ul><li>数据域<ul><li>存放所存储的其类型的数据</li></ul></li><li>指针域<ul><li>存放节点指针(根据链表类型指定，单向链表存放下一节点指针)</li></ul></li></ul><h2 id="链表的分类"><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h2><ul><li>链表分类一：<ul><li>静态链表：在栈区分配内存</li><li>动态链表：在堆区分配内存</li></ul></li><li>链表分类二：<ul><li>单向链表；双向链表：指针域记录 一个/多个 指针</li><li>单向循环链表；双向循环链表：尾部指针域指向链表首位。</li></ul></li></ul><h2 id="静态链表和动态链表"><a href="#静态链表和动态链表" class="headerlink" title="静态链表和动态链表"></a>静态链表和动态链表</h2><ul><li>静态链表分配在栈上</li><li>动态链表分配到堆区</li></ul><h3 id="静态链表的初始化以及遍历"><a href="#静态链表的初始化以及遍历" class="headerlink" title="静态链表的初始化以及遍历"></a>静态链表的初始化以及遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> &#123;</span></div><div class="line">    <span class="comment">//数据域</span></div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="comment">// 指针域</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> *<span class="title">next</span>;</span></div><div class="line">&#125; lineNode;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 创建节点</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node1</span> = &#123;</span><span class="number">10</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node2</span> = &#123;</span><span class="number">20</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node3</span> = &#123;</span><span class="number">30</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node4</span> = &#123;</span><span class="number">40</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node5</span> = &#123;</span><span class="number">50</span>, <span class="literal">NULL</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 建立关系</span></div><div class="line">    node1.next = &amp;node2;</div><div class="line">    node2.next = &amp;node3;</div><div class="line">    node3.next = &amp;node4;</div><div class="line">    node4.next = &amp;node5;</div><div class="line">    node5.next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    lineNode *node = &amp;node1;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (node != <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, node-&gt;num);</div><div class="line">        node = node-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="动态链表的初始化与遍历"><a href="#动态链表的初始化与遍历" class="headerlink" title="动态链表的初始化与遍历"></a>动态链表的初始化与遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> &#123;</span></div><div class="line">    <span class="comment">//数据域</span></div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="comment">// 指针域</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">next</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node1</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node2</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node3</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node4</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node5</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></div><div class="line"></div><div class="line">    node1-&gt;num = <span class="number">10</span>;</div><div class="line">    node1-&gt;num = <span class="number">20</span>;</div><div class="line">    node1-&gt;num = <span class="number">30</span>;</div><div class="line">    node1-&gt;num = <span class="number">40</span>;</div><div class="line">    node1-&gt;num = <span class="number">50</span>;</div><div class="line"></div><div class="line">    node1-&gt;next = node2;</div><div class="line">    node2-&gt;next = node3;</div><div class="line">    node3-&gt;next = node4;</div><div class="line">    node4-&gt;next = node5;</div><div class="line">    node5-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(node1);</div><div class="line">    <span class="built_in">free</span>(node2);</div><div class="line">    <span class="built_in">free</span>(node3);</div><div class="line">    <span class="built_in">free</span>(node4);</div><div class="line">    <span class="built_in">free</span>(node5);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 动态链表创建在堆上</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="带头链表的基本操作"><a href="#带头链表的基本操作" class="headerlink" title="带头链表的基本操作"></a>带头链表的基本操作</h2><p>FILE1: headLinkTable.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEADLINKTABLE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEADLINKTABLE_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  once</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">next</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 初始化链表</span></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">initLinkList</span>();</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foreach_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 插入链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> oldVal, <span class="keyword">int</span> newVal)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 删除链表节点</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> val)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 清空链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 销毁链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _HEADLINKTABLE_H</span></span></div></pre></td></tr></table></figure><p>FILE2:_headLinkTable_imp.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"_headLinkTable.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//初始化链表</span></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">initLinkList</span>() &#123;</span></div><div class="line">    <span class="comment">//创建头节点</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pHeader</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LinkNode</span>));</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化头节点</span></div><div class="line">    <span class="comment">//pHeader-&gt;num = -1;  //头节点 不维护数据域</span></div><div class="line">    pHeader-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">//记录尾节点位置，方便插入新的数据</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pTail</span> = <span class="title">pHeader</span>;</span></div><div class="line">    <span class="keyword">int</span> val = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">//让用户初始化几个节点，如果用户输入的是-1，代表插入结束</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请初始化链表，如果输入-1代表结束\n"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (val == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果输入不是-1  插入节点到链表中</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">newNode</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LinkNode</span>));</span></div><div class="line">        newNode-&gt;num = val;</div><div class="line">        newNode-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">        <span class="comment">//更改指针的指向</span></div><div class="line">        pTail-&gt;next = newNode;</div><div class="line">        <span class="comment">//更新新的尾节点的指向</span></div><div class="line">        pTail = newNode;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> pHeader;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foreach_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span> <span class="comment">//指定第一个有真实数据的节点</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pCurrent-&gt;num);</div><div class="line">        pCurrent = pCurrent-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//插入链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> oldVal, <span class="keyword">int</span> newVal)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//创建两个临时的节点</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pPrve</span> = <span class="title">pHeader</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (pCurrent-&gt;num == oldVal) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果没找到对应的位置,辅助指针向后移动</span></div><div class="line">        pPrve = pCurrent;</div><div class="line">        pCurrent = pCurrent-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//创建新节点</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">newNode</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LinkNode</span>));</span></div><div class="line">    newNode-&gt;num = newVal;</div><div class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">//建立关系</span></div><div class="line">    newNode-&gt;next = pCurrent;</div><div class="line">    pPrve-&gt;next = newNode;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除链表节点</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 一前一后两个辅助指针变量</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pPrev</span> = <span class="title">pHeader</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span></div><div class="line"></div><div class="line">    <span class="comment">// 循环查找val</span></div><div class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (pCurrent-&gt;num == val) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//没有找到数据，辅助指针向后移动</span></div><div class="line">        pPrev = pCurrent;</div><div class="line">        pCurrent = pCurrent-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 没找到节点则返回</span></div><div class="line">    <span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 若找到该数据节点，则更改前一指针指向到目标数据节点的下一节点指针。</span></div><div class="line">    pPrev-&gt;next = pCurrent-&gt;next;</div><div class="line"></div><div class="line">    <span class="comment">//删除掉待删除的节点并置空</span></div><div class="line">    <span class="built_in">free</span>(pCurrent);</div><div class="line">    pCurrent = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 清空链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">nextNode</span> = <span class="title">pCurrent</span>-&gt;<span class="title">next</span>;</span></div><div class="line">        <span class="built_in">free</span>(pCurrent);</div><div class="line"></div><div class="line">        pCurrent = nextNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    pHeader-&gt;next = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 销毁链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clear_LinkList(pHeader);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(pHeader);</div><div class="line">    pHeader = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FILE3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 带头链表的基本操作</span></div><div class="line"><span class="comment"> * @param argc</span></div><div class="line"><span class="comment"> * @param argv</span></div><div class="line"><span class="comment"> * @return</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"_headLinkTable.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//初始化链表</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pHeader</span> = <span class="title">initLinkList</span>();</span></div><div class="line"></div><div class="line">    <span class="comment">//遍历链表</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"遍历链表结果为：\n"</span>);</div><div class="line">    foreach_LinkList(pHeader);</div><div class="line"></div><div class="line">    <span class="comment">//插入链表</span></div><div class="line">    <span class="comment">// 10 1000  2000 20 3000 30  500</span></div><div class="line">    insert_LinkList(pHeader, <span class="number">20</span>, <span class="number">1000</span>);</div><div class="line">    insert_LinkList(pHeader, <span class="number">20</span>, <span class="number">2000</span>);</div><div class="line">    insert_LinkList(pHeader, <span class="number">-1</span>, <span class="number">500</span>);</div><div class="line">    insert_LinkList(pHeader, <span class="number">30</span>, <span class="number">3000</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"插入链表后，遍历链表结果为：\n"</span>);</div><div class="line">    foreach_LinkList(pHeader);</div><div class="line"></div><div class="line">    deleteNode_LinkList(pHeader, <span class="number">1000</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"删除1000元素后，遍历链表结果为：\n"</span>);</div><div class="line">    foreach_LinkList(pHeader);</div><div class="line"></div><div class="line">    clear_LinkList(pHeader);</div><div class="line"></div><div class="line">    destroy_LinkList(pHeader);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要使用链表：&quot;&gt;&lt;a href=&quot;#为什么要使用链表：&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用链表：&quot;&gt;&lt;/a&gt;为什么要使用链表：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组缺陷&lt;ul&gt;
&lt;li&gt;一旦分配好内存，不能再动态扩展。&lt;/li&gt;
&lt;li&gt;如果分配过多，会造成资源浪费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于头部插入或删除的效率低&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C语言的文件读写小案例</title>
    <link href="http://gmle.github.io/2018/07/05/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
    <id>http://gmle.github.io/2018/07/05/C语言的文件读写小案例/</id>
    <published>2018-07-05T13:45:32.417Z</published>
    <updated>2018-07-06T13:58:58.887Z</updated>
    
    <content type="html"><![CDATA[<p>C语言一个读写配置的简单案例</p><a id="more"></a><p>FILE1：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CONFIG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CONFIG_H</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ConfigInfo</span>&#123;</span></div><div class="line">    <span class="keyword">char</span> key[<span class="number">64</span>];</div><div class="line">    <span class="keyword">char</span> value[<span class="number">64</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getConfigFileLines</span><span class="params">(<span class="keyword">char</span> *path)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isValidLine</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileResolving</span><span class="params">(<span class="keyword">char</span> * filePath, <span class="keyword">int</span> lines, struct  ConfigInfo ** config)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getValueByKey</span><span class="params">(<span class="keyword">char</span> *key, struct ConfigInfo *config, <span class="keyword">int</span> lines)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeConfigInfo</span><span class="params">(struct ConfigInfo *configinfo)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_CONFIG_H</span></span></div></pre></td></tr></table></figure></p><p>FILE2:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getConfigFileLines</span><span class="params">(<span class="keyword">char</span> *ConfigPath)</span> </span>&#123;</div><div class="line"></div><div class="line">    FILE *configFile = fopen(ConfigPath, <span class="string">"r"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (configFile == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> tmpBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> configLine = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (fgets(tmpBuf, <span class="number">1024</span>, configFile) != <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line"><span class="comment">//        printf("000+");</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isValidLine(tmpBuf)) &#123;</div><div class="line">            configLine++;</div><div class="line">            <span class="built_in">memset</span>(tmpBuf, <span class="number">0</span>, <span class="number">1024</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(configFile);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> configLine;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isValidLine</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strchr</span>(<span class="built_in">string</span>, <span class="string">':'</span>) == <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileResolving</span><span class="params">(<span class="keyword">char</span> *filePath, <span class="keyword">int</span> lines, struct ConfigInfo **config)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ConfigInfo</span> *<span class="title">configInfo</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">ConfigInfo</span>) * <span class="title">lines</span>);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (configInfo == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FILE *file = fopen(filePath, <span class="string">"r"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</div><div class="line">        perror(<span class="string">"Failed"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">char</span> key[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">char</span> value[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> tmpBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> configNum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (fgets(tmpBuf, <span class="number">1024</span>, file) != <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isValidLine(tmpBuf)) &#123;</div><div class="line">            <span class="built_in">memset</span>(configInfo[configNum].key, <span class="number">0</span>, <span class="number">1024</span>);</div><div class="line">            <span class="built_in">memset</span>(configInfo[configNum].value, <span class="number">0</span>, <span class="number">1024</span>);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">char</span> *pos = <span class="built_in">strchr</span>(tmpBuf, <span class="string">':'</span>);</div><div class="line">            <span class="built_in">strncpy</span>(configInfo[configNum].key, tmpBuf, pos - tmpBuf);</div><div class="line">            <span class="built_in">strncpy</span>(configInfo[configNum].value, pos + <span class="number">1</span>, <span class="built_in">strlen</span>(pos + <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0000000000:%s\n"</span>, configInfo[configNum].key);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"1111111111:%s\n"</span>, configInfo[configNum].value);</div><div class="line"></div><div class="line">            configNum++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(tmpBuf, <span class="number">0</span>, <span class="number">1024</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *config = configInfo;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getValueByKey</span><span class="params">(<span class="keyword">char</span> *key, struct ConfigInfo *config, <span class="keyword">int</span> lines)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"aaa"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (key == <span class="literal">NULL</span> || lines == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        perror(<span class="string">"aaa"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(key, config[i].key) == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> config[i].value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeConfigInfo</span><span class="params">(struct ConfigInfo *configinfo)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (configinfo != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">free</span>(configinfo);</div><div class="line">        configinfo = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>FILE3:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *configPath = <span class="string">"config.ini"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lines = getConfigFileLines(configPath);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lines);</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ConfigInfo</span> *<span class="title">configInfo</span> = <span class="title">NULL</span>;</span></div><div class="line"></div><div class="line">    fileResolving(configPath, lines, &amp;configInfo);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, getValueByKey(<span class="string">"heroId"</span>, configInfo, lines));</div><div class="line"></div><div class="line"></div><div class="line">    freeConfigInfo(configInfo);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言一个读写配置的简单案例&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言中结构体的偏移量与内存对齐</title>
    <link href="http://gmle.github.io/2018/07/05/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    <id>http://gmle.github.io/2018/07/05/C语言中结构体的偏移量/</id>
    <published>2018-07-05T13:28:28.344Z</published>
    <updated>2018-07-05T13:42:02.936Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中结构体在内存中的偏移量问题。<br><a id="more"></a></p><p><strong>查看对齐模数</strong><br>#pragma pack(show)<br>默认对齐模数是8。</p><p><strong>自定义数据的对齐规则</strong></p><ul><li>第一个属性开始  从0开始偏移</li><li>第二个属性开始  要放在 该类型的大小  与  对齐模数比  取小的值  的整数倍</li><li>所有属性都计算完后，再整体做二次偏移，将整体计算的结果 要放在  结构体最大类型 与对齐模数比  取小的值的 整数倍上</li></ul><p><strong>结构体嵌套结构体</strong></p><ul><li>结构体嵌套结构体时候，子结构体放在该结构体中最大类型，和对齐模数比的整数倍上即可</li><li></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> a; <span class="comment">//0 ~ 3</span></div><div class="line">    <span class="keyword">int</span> b;  <span class="comment">//4 ~ 7</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">t1</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> *<span class="title">p</span> = &amp;<span class="title">t1</span>;</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"b的属性偏移量为：%d\n"</span>, (<span class="keyword">int</span>) &amp;(p-&gt;b) - (<span class="keyword">int</span>) p);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"b的属性偏移量为：%d\n"</span>, offsetof(struct Teacher, b));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过偏移量 操作内存</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">t1</span> = &#123;</span><span class="string">'a'</span>, <span class="number">10</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"t1.b = %d\n"</span>, *(<span class="keyword">int</span> *) ((<span class="keyword">char</span> *) &amp;t1 + offsetof(struct Teacher, b)));</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"t1.b = %d\n"</span>, *(<span class="keyword">int</span> *) ((<span class="keyword">int</span> *) &amp;t1 + <span class="number">1</span>));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher2</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> a;</div><div class="line">    <span class="keyword">int</span> b;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">c</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher2</span> <span class="title">t1</span> = &#123;</span><span class="string">'a'</span>, <span class="number">10</span>, <span class="string">'b'</span>, <span class="number">20</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> offset1 = offsetof(struct Teacher2, c);</div><div class="line">    <span class="keyword">int</span> offset2 = offsetof(struct Teacher, b);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span> *) ((<span class="keyword">char</span> *) &amp;t1 + offset1 + offset2));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ((struct Teacher *) ((<span class="keyword">char</span> *) &amp;t1 + offset1))-&gt;b);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//test01();</span></div><div class="line">    <span class="comment">//test02();</span></div><div class="line">    test03();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言中结构体在内存中的偏移量问题。&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言中结构体的二级指针</title>
    <link href="http://gmle.github.io/2018/07/05/C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/05/C语言结构体的二级指针/</id>
    <published>2018-07-05T13:17:17.743Z</published>
    <updated>2018-07-05T13:18:37.342Z</updated>
    
    <content type="html"><![CDATA[<pre><code>C语言中结构体嵌套二级指针申请内存。</code></pre><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">char</span> **students;</div><div class="line">&#125;Teacher;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(struct Teacher ***teachers)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (teachers == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//开辟内存</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> **<span class="title">ts</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Teacher</span> *) * 3);</span></div><div class="line"></div><div class="line">    <span class="comment">//给每个老师分配内存</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        ts[i] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Teacher));</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//给老师的姓名分配内存</span></div><div class="line">        ts[i]-&gt;name = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">64</span>);</div><div class="line"></div><div class="line">        <span class="comment">//给老师起名称</span></div><div class="line">        <span class="built_in">sprintf</span>(ts[i]-&gt;name, <span class="string">"Teacher_%d"</span>, i + <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//给学生的数组分配内存</span></div><div class="line">        ts[i]-&gt;students = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *) * <span class="number">4</span>);</div><div class="line"></div><div class="line">        <span class="comment">//给学生的姓名开辟内存 以及赋值</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">            ts[i]-&gt;students[j] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">64</span>);</div><div class="line">            <span class="built_in">sprintf</span>(ts[i]-&gt;students[j], <span class="string">"%s_Student_%d"</span>, ts[i]-&gt;name, j + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *teachers = ts;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(struct Teacher **pArray)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pArray == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pArray[i]-&gt;name);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"      %s\n"</span>, pArray[i]-&gt;students[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">freeSpace</span><span class="params">(struct Teacher **pArray)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pArray == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        <span class="comment">//先释放老师姓名</span></div><div class="line">        <span class="keyword">if</span> (pArray[i]-&gt;name != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">free</span>(pArray[i]-&gt;name);</div><div class="line">            pArray[i]-&gt;name = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//释放学生姓名</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (pArray[i]-&gt;students[j] != <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="built_in">free</span>(pArray[i]-&gt;students[j]);</div><div class="line">                pArray[i]-&gt;students[j] = <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//释放学生的数组</span></div><div class="line">        <span class="keyword">if</span> (pArray[i]-&gt;students != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">free</span>(pArray[i]-&gt;students);</div><div class="line">            pArray[i]-&gt;students = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//释放老师</span></div><div class="line">        <span class="keyword">if</span> (pArray[i] != <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">free</span>(pArray[i]);</div><div class="line">            pArray[i] = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//释放老师数组</span></div><div class="line">    <span class="keyword">if</span> (pArray != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">free</span>(pArray);</div><div class="line">        pArray = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> **<span class="title">pArray</span> = <span class="title">NULL</span>;</span></div><div class="line">    <span class="comment">//开辟内存</span></div><div class="line">    allocateSpace(&amp;pArray);</div><div class="line"></div><div class="line">    <span class="comment">//打印数组</span></div><div class="line">    printTeachers(pArray);</div><div class="line"></div><div class="line">    <span class="comment">//释放数组</span></div><div class="line">    freeSpace(pArray);</div><div class="line">    pArray = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    test01();</div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;C语言中结构体嵌套二级指针申请内存。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的深拷贝与浅拷贝</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%ADstruct%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中struct的深拷贝与浅拷贝/</id>
    <published>2018-07-03T11:45:05.240Z</published>
    <updated>2018-07-03T11:58:12.221Z</updated>
    
    <content type="html"><![CDATA[<p>系统提供的赋值操作是 浅拷贝 – 简单值拷贝，逐字节拷贝<br>如果结构体中有属性 创建在堆区，就会出现问题，在释放期间，一段内存重复释放，一段内存泄露</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">People</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">&#125; peo;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    peo p1;</div><div class="line">    peo p2;</div><div class="line"></div><div class="line">    p1.name = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">64</span>);</div><div class="line">    <span class="built_in">strcpy</span>(p1.name, <span class="string">"a"</span>);</div><div class="line">    p2.name = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">128</span>);</div><div class="line">    <span class="built_in">strcpy</span>(p2.name, <span class="string">"bbbbbbbbb"</span>);</div><div class="line"></div><div class="line">    p1.age = <span class="number">10</span>;</div><div class="line">    p2.age = <span class="number">20</span>;</div><div class="line"></div><div class="line">    p1 = p2; <span class="comment">// 浅拷贝，值拷贝。</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 出现的问题：</span></div><div class="line"><span class="comment">     *  1、p1指向的内存会发生内存泄漏</span></div><div class="line"><span class="comment">     *  2、p1、p2指向的内存在释放的时候会发生重复释放。</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="comment">// 解决方法</span></div><div class="line">    p1.name = <span class="built_in">realloc</span>(p1.name, <span class="built_in">strlen</span>(p2.name));</div><div class="line">    <span class="built_in">memset</span>(p1.name, <span class="number">0</span>, <span class="built_in">strlen</span>(p2.name));</div><div class="line"></div><div class="line">    <span class="built_in">strcpy</span>(p1.name, p2.name);</div><div class="line">    p1.age = p2.age;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (p1.name != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">free</span>(p1.name);</div><div class="line">        p1.name = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (p2.name != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">free</span>(p2.name);</div><div class="line">        p2.name = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main06</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> &#123;</span></div><div class="line">        <span class="keyword">char</span> name[<span class="number">64</span>];</div><div class="line">        <span class="keyword">int</span> age;</div><div class="line">    &#125; Teacher_t;</div><div class="line">    <span class="keyword">int</span> offset = (<span class="keyword">int</span>)&amp;(((Teacher_t *) <span class="number">0</span>)-&gt;age);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, offset);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统提供的赋值操作是 浅拷贝 – 简单值拷贝，逐字节拷贝&lt;br&gt;如果结构体中有属性 创建在堆区，就会出现问题，在释放期间，一段内存重复释放，一段内存泄露&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的数组选择排序</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的数组之选择排序/</id>
    <published>2018-07-03T11:27:40.679Z</published>
    <updated>2018-07-03T11:49:01.970Z</updated>
    
    <content type="html"><![CDATA[<p><strong>选择排序的核心：</strong><br>开始认定最小值下标为i，从j = i+1的位置起找真实最小值下标，如果计算的真实最小值下标与i不等，互换元素。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chooseSort4Str</span><span class="params">(<span class="keyword">char</span> **arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> min = i;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arr[min], arr[j]) &lt; <span class="number">0</span>) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (i != min) &#123;</div><div class="line">            <span class="keyword">char</span> *temp = arr[i];</div><div class="line">            arr[i] = arr[min];</div><div class="line">            arr[min] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> *pArray[] = &#123;<span class="string">"fff"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"aaa"</span>, <span class="string">"eee"</span>, <span class="string">"ddd"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arrLen = <span class="keyword">sizeof</span>(pArray) / <span class="keyword">sizeof</span>(pArray[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    chooseSort4Str(pArray, arrLen);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pArray[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arrLen);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 选择排序：</span></div><div class="line"><span class="comment"> *  认定最小值下表为i，从开始i+1位置起，找真实下标值，若真实下标值与i不等，则互换元素。</span></div><div class="line"><span class="comment"> * @param arr</span></div><div class="line"><span class="comment"> * @param len</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chooseSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> min = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[min] &gt; arr[j]) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i != min) &#123;</div><div class="line">            <span class="keyword">int</span> temp = arr[i];</div><div class="line">            arr[i] = arr[min];</div><div class="line">            arr[min] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 选择排序</span></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</div><div class="line">    <span class="keyword">int</span> lenArr = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    chooseSort(arr, lenArr);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenArr; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main04</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// test02();</span></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;选择排序的核心：&lt;/strong&gt;&lt;br&gt;开始认定最小值下标为i，从j = i+1的位置起找真实最小值下标，如果计算的真实最小值下标与i不等，互换元素。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言中的二维数组指针</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的二维数组指针/</id>
    <published>2018-07-03T11:18:58.068Z</published>
    <updated>2018-07-03T11:59:42.086Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中的一维数组指针<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;</div><div class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</div><div class="line">            &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</div><div class="line">            &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 除两种特殊情况外，二维数组名称是指向第一个一维数组的指针。</span></div><div class="line"><span class="comment">     * 1、sizeof</span></div><div class="line"><span class="comment">     * 2、对数组名取地址，获取的是二维数组的数组指针，步长是整个二维数组的长度。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">int</span> (*pArr)[<span class="number">3</span>] = arr;</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">int</span> (*pArr2)[<span class="number">3</span>][<span class="number">3</span>] = &amp;arr;</div><div class="line"></div><div class="line">    assert(arr[<span class="number">1</span>][<span class="number">2</span>] == *(*(pArr + <span class="number">1</span>) +<span class="number">2</span>));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[<span class="number">1</span>][<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(*(pArr + <span class="number">1</span>) +<span class="number">2</span>));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// static void print2Arr(int (*arr)[3], int len)&#123;</span></div><div class="line"><span class="comment">// static void print2Arr(int arr[][3], int len)&#123;</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2Arr</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i][j]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    test01();</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;</div><div class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</div><div class="line">            &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</div><div class="line">            &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</div><div class="line">    &#125;;</div><div class="line">    print2Arr(arr, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言中的一维数组指针&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的一维数组指针</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的一维数组指针/</id>
    <published>2018-07-03T11:05:24.699Z</published>
    <updated>2018-07-03T11:59:26.799Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中的一维数组指针<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 数组指针的定义方式：</span></div><div class="line"><span class="comment">  *   1、先定义数组类型，再通过类型定义数组指针。</span></div><div class="line"><span class="comment">  *   2、先定义数组指针类型，再通过类型定义数组指针</span></div><div class="line"><span class="comment">  *   3、直接定义数组指针变量</span></div><div class="line"><span class="comment">  */</span></div><div class="line">&lt;!-- more --&gt;</div><div class="line"></div><div class="line"><span class="comment">//  1、先定义数组类型，再通过类型定义数组指针。</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    typedef int (ARRAY)[5];</div><div class="line">    ARRAY *pArr = &amp;arr;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*pArr)[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 先定义数组指针类型，再通过类型定义数组指针</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    typedef int (*ARRAY)[5];</div><div class="line"></div><div class="line">    ARRAY pArr = &amp;arr;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*pArr)[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 直接定义数组指针变量</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> (*pArr)[<span class="number">5</span>] = &amp;arr;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//test01();</span></div><div class="line">    <span class="comment">//test02();</span></div><div class="line">    test01();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言中的一维数组指针&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的一维数组</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>http://gmle.github.io/2018/07/03/C语言中的一维数组/</id>
    <published>2018-07-03T02:08:34.069Z</published>
    <updated>2018-07-03T11:59:13.299Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中的一维数组<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 一维数组名是不是指针?</span></div><div class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr));</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 两种特殊情况，一维数组不是指向第一个元素的指针：</span></div><div class="line"><span class="comment">     * sizeof。</span></div><div class="line"><span class="comment">     * 对数组名取地址，得到数组指针 步长是整个数组长度</span></div><div class="line"><span class="comment">     * */</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;arr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;arr + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//arr数组名  它是一个指针常量 指针的指向不可以修改的，而指针指向的值可以改 int * const a ;</span></div><div class="line">    <span class="comment">//arr[0] = 1000;</span></div><div class="line">    <span class="comment">//arr = NULL;</span></div><div class="line"></div><div class="line">    <span class="comment">//数组索引 可不可以为负数</span></div><div class="line">    <span class="keyword">int</span> * p = arr;</div><div class="line">    p = p + <span class="number">3</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p[<span class="number">-1</span>]);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言中的一维数组&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现strstr</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0strstr/"/>
    <id>http://gmle.github.io/2018/07/03/C语言实现strstr/</id>
    <published>2018-07-03T00:46:49.906Z</published>
    <updated>2018-07-03T11:58:58.743Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中有一个内置库函数 strstr，实现了一个自己的strstr。<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">isSub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *subs)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 特殊情况</span></div><div class="line">    <span class="keyword">if</span> (!*subs)</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tmp = str;</div><div class="line">    <span class="keyword">while</span> (*tmp != <span class="string">'\0'</span>) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 记录父串地址</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *tmp1 = tmp;</div><div class="line"></div><div class="line">        <span class="comment">// 记录子串地址</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *sub1 = subs;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (*sub1 != <span class="string">'\0'</span> &amp;&amp; *tmp1 != <span class="string">'\0'</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 若不相等则跳出，将父串后移一个字符</span></div><div class="line">            <span class="keyword">if</span> (*sub1 != *tmp1)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 若相等且子串下一个字符是末尾则是这个父串的子串</span></div><div class="line">            <span class="keyword">if</span> (*sub1 == *tmp1 &amp;&amp; *(sub1 + <span class="number">1</span>) == <span class="string">'\0'</span>)</div><div class="line">                <span class="keyword">return</span> tmp;</div><div class="line"></div><div class="line">            <span class="comment">// 若相等则继续比较下一个字符</span></div><div class="line">            <span class="keyword">if</span> (*sub1 == *tmp1) &#123;</div><div class="line">                sub1++;</div><div class="line">                tmp1++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        tmp++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> a[] = <span class="string">"aaaaabbbcdef"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *res = isSub(a, <span class="string">"ab"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;res);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言中有一个内置库函数 strstr，实现了一个自己的strstr。&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的sscanf</title>
    <link href="http://gmle.github.io/2018/07/03/C%E8%AF%AD%E8%A8%80%E7%9A%84sscanf/"/>
    <id>http://gmle.github.io/2018/07/03/C语言的sscanf/</id>
    <published>2018-07-03T00:43:30.123Z</published>
    <updated>2018-07-03T12:00:29.367Z</updated>
    
    <content type="html"><![CDATA[<p>sscanf中正则的使用<br><a id="more"></a></p><h2 id="sscanf的使用"><a href="#sscanf的使用" class="headerlink" title="sscanf的使用"></a>sscanf的使用</h2><p>中间夹取正则表达式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"11111aaaa"</span>;</div><div class="line">    <span class="keyword">char</span> buf[] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%*d%s"</span>, buf);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"11111aaaa"</span>;</div><div class="line">    <span class="keyword">char</span> buf[] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%[0-9]"</span>, buf);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello@123.com"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">char</span> net[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%[^@]%*[@]%s"</span>, name, net);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, name);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, net);</div><div class="line"></div><div class="line">    <span class="built_in">strstr</span>(name, net);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//    test01();</span></div><div class="line"><span class="comment">//    test02();</span></div><div class="line">    test03();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sscanf中正则的使用&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的malloc、calloc、realloc</title>
    <link href="http://gmle.github.io/2018/07/02/C%E8%AF%AD%E8%A8%80%E7%9A%84calloc.malloc.realloc/"/>
    <id>http://gmle.github.io/2018/07/02/C语言的calloc.malloc.realloc/</id>
    <published>2018-07-02T13:50:20.582Z</published>
    <updated>2018-07-03T11:53:41.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="calloc-和-realloc"><a href="#calloc-和-realloc" class="headerlink" title="calloc 和 realloc"></a>calloc 和 realloc</h2><a id="more"></a><ul><li>calloc 和malloc 都是在堆区分配内存</li><li>与malloc不同的是，calloc会将空间初始化为0</li><li>calloc（个数，大小）</li><li>realloc 重新分配内存<ul><li>如果重新分配的内存比原来大，那么不会初始化新空间为0</li><li>先看后续空间，如果足够，那么直接扩展</li><li>如果后续空闲空间不足，那么申请足够大的空间，将原有数据拷贝到新空间下，释放掉原有空间，将新空间的首地址返回</li><li>如果重新分配的内存比原来小，那么释放后序空间，只有权限操作申请空间</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * calloc 自动将开辟的内存置0.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usecalloc</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> *p = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">userelloc</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">        p[i] = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"-------------------\n"</span>);</div><div class="line"></div><div class="line">    p = <span class="built_in">realloc</span>(p, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">20</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, p);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(p);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    usecalloc();</span></div><div class="line">    userelloc();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;calloc-和-realloc&quot;&gt;&lt;a href=&quot;#calloc-和-realloc&quot; class=&quot;headerlink&quot; title=&quot;calloc 和 realloc&quot;&gt;&lt;/a&gt;calloc 和 realloc&lt;/h2&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言的一点语言特性</title>
    <link href="http://gmle.github.io/2018/06/29/C%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E7%82%B9%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
    <id>http://gmle.github.io/2018/06/29/C语言的一点语言特性/</id>
    <published>2018-06-29T13:47:23.022Z</published>
    <updated>2018-06-30T13:35:44.692Z</updated>
    
    <content type="html"><![CDATA[<p>关于C语言的一些特性。</p><a id="more"></a><p>这些特性可能会被称为bug，但它确实是特性。</p><h2 id="malloc开辟char字符串的内存空间"><a href="#malloc开辟char字符串的内存空间" class="headerlink" title="malloc开辟char字符串的内存空间"></a>malloc开辟char字符串的内存空间</h2><p>无论在什么时候出现这样一条语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str));</div></pre></td></tr></table></figure><p>几乎可以判定它是错误的，而</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str)+<span class="number">1</span>);</div></pre></td></tr></table></figure><p>才是正确的。<br>这是因为其它的字符串处理库函数几乎都包含一个额外空间，用于容纳字符串结尾处的‘\0’字符。</p><h2 id="C语言中的const并非真正的cosnt"><a href="#C语言中的const并非真正的cosnt" class="headerlink" title="C语言中的const并非真正的cosnt"></a>C语言中的const并非真正的cosnt</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> one = <span class="number">10</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> two = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> str[<span class="number">10</span>] = &#123;<span class="number">10</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (str)&#123;</div><div class="line">        <span class="keyword">case</span> one:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%u"</span>,one);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> two:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%u"</span>,one);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面这段代码会出现编译错误，这并不是switch语句本身的错误，但这条语句展示了其const并非真正的常量。</p><h2 id="字符串的自动合并"><a href="#字符串的自动合并" class="headerlink" title="字符串的自动合并"></a>字符串的自动合并</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *str[] = &#123;</div><div class="line">            <span class="string">"aaa"</span>,</div><div class="line">            <span class="string">"bbb"</span>  <span class="comment">// 少了个逗号，则在编译的时候回自动合并。</span></div><div class="line">            <span class="string">"ccc"</span>,</div><div class="line">            <span class="string">"ddd"</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (<span class="keyword">char</span> *) str[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, *str);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中，如果在写代码的时候不小心漏掉一个逗号，在程序编译的时候，编译器将不会报错，而是会自动合并为一个字符串。<br>而最后一个字符串的逗号存在与否都没有意义。但这种拖尾的逗号将会抑制程序的正确行为，这对程序没有任何好处。</p><h2 id="缺省关键字的可见性"><a href="#缺省关键字的可见性" class="headerlink" title="缺省关键字的可见性"></a>缺省关键字的可见性</h2><p>定义C函数或者是全局变量的时候，在缺省情况下函数名字是全局可见的。<br>可以在函数或者全局变量的前面加上‘extern’关键字，也可以不加，想过是一样的。<br>如果想限制函数或者变量的访问，则需要加上‘static’关键字。</p><p>事实上，几乎没有人所有人都没有在其前面加上村塾类型说明符的习惯，所以函数大多数是全局可见的。</p><p>根据实际经验，这种缺省的全局可见性多次被证明是个错误。这种太大范围的全局可见性会与C语言的另一个特性相互产生影响，那就是interpositioning。<br>就是用户编写和库函数同名的函数并取而代之的行为</p><p>范围过宽的问题常见于库中：一个库需要让一个对象在另一个库中可见，唯一的方法就是让它全局可见。但这样一来，它对于链接到该库的所有对象都是可见的了，在C语言中，对信息可见性的选择就是这么有限。</p><p>没有人会记得在他们之前加上static限定符，所以它们在缺省情况下是全局可见的。</p><h2 id="C语言简洁之过"><a href="#C语言简洁之过" class="headerlink" title="C语言简洁之过"></a>C语言简洁之过</h2><p>C语言中属于“误做值过”的特性，就是语言中有误导性质或者不适当的特性。这些特性有些跟C语言的简洁有关（部分与符号的过度复用有关），有些则与操作符的有限及有关。</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>许多符号被重载的在不同的上下文环境里有不同的意义。</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:center">static</td><td style="text-align:left">在函数内部，表示该便拉近的值在各个调用间一直保持延续性</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">在函数这一级，表示该函数只对本文件可见</td></tr><tr><td style="text-align:center">extern</td><td style="text-align:left">用于函数定义，表示全局可见（冗余）</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">用于变量，表示它在其他地方定义</td></tr><tr><td style="text-align:center">void</td><td style="text-align:left">作为函数的返回类型，表示不返回任何值</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">在指针声明中，表示通用指针的类型</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">位于参数列表中目标是没有参数</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">乘法运算符</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">用户指针，间接引用</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">在声明中，表示指针</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">位运算符 AND操作符</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">取地址操作符</td></tr><tr><td style="text-align:center">=</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:center">==</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">小于等于运算符</td></tr><tr><td style="text-align:center">&lt;==</td><td style="text-align:left">左移复合运算符</td></tr><tr><td style="text-align:center">()</td><td style="text-align:left">在函数定义中，包围形式参数表</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">调用一个函数</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">改变表达式的运算顺序</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">强制类型转换</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">定义带参数的宏</td></tr><tr><td style="text-align:center"></td><td style="text-align:left">包围sizeof操作符的操作数</td></tr></tbody></table><p>重载问题之例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line">p = N * <span class="keyword">sizeof</span> * p;</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line">r = <span class="built_in">malloc</span>(p);</div><div class="line"></div><div class="line"><span class="comment">// 3 运算符优先级：先括号，所以先算sizeof(int) = 4, 后4*p</span></div><div class="line">a = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * p;</div></pre></td></tr></table></figure><p>让一个符号表达的意思越多，编译器就越难检测到这个符号在你的使用中所存在的异常情况。</p><h3 id="C语言的运算符优先级问题"><a href="#C语言的运算符优先级问题" class="headerlink" title="C语言的运算符优先级问题"></a>C语言的运算符优先级问题</h3><table><thead><tr><th style="text-align:center">优先级问题</th><th style="text-align:left">表达式</th><th style="text-align:left">误以为的结果</th><th style="text-align:left">实际结果</th></tr></thead><tbody><tr><td style="text-align:center">.的优先级高于*， -&gt; 操作符用于消除这个问题。</td><td style="text-align:left">*p.f</td><td style="text-align:left">p所指对象的字段f, (*p).f</td><td style="text-align:left">对p取f偏移，作为指针，然后解引用。 *(p.f)</td></tr><tr><td style="text-align:center">[]高于*</td><td style="text-align:left">int *ap[]</td><td style="text-align:left">ap是个指向int数组的指针。    int (*ap)[]</td><td style="text-align:left">ap是个元素为int指针的数组 int *(ap[])</td></tr><tr><td style="text-align:center">函数()高于*</td><td style="text-align:left">int *fp()</td><td style="text-align:left">fp是个函数指针，所指函数返回int。 int(*fp)()</td><td style="text-align:left">fp是个函数，返回int<em> . int </em>(fp())</td></tr><tr><td style="text-align:center">逗号运算符在所有运算符中优先级最低</td><td style="text-align:left">i=1,2;</td><td style="text-align:left">i=(1,2)</td><td style="text-align:left">(i=1),2</td></tr></tbody></table><p>我们在表达式中如果有布尔操作、算术运算、位操作等混合计算，始终应该在适当的地方加括号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于C语言的一些特性。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
</feed>
