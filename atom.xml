<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘lele</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gmle.github.io/"/>
  <updated>2018-10-18T01:27:21.434Z</updated>
  <id>http://gmle.github.io/</id>
  
  <author>
    <name>忘了</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux-shebang</title>
    <link href="http://gmle.github.io/2018/10/18/linux-shebang%E8%AF%A6%E8%A7%A3/"/>
    <id>http://gmle.github.io/2018/10/18/linux-shebang详解/</id>
    <published>2018-10-18T01:21:21.849Z</published>
    <updated>2018-10-18T01:27:21.434Z</updated>
    
    <content type="html"><![CDATA[<p>shebang 是linux shell脚本中的第一行的符号<br>即 “#!”</p><a id="more"></a><p>Shebang这个符号通常在Unix系统的脚本中第一行开头中写到，它指明了执行这个脚本文件的解释程序。</p><p>如果脚本文件中没有“#！”这一行，那么他执行时会默认使用当前shell去解释这个脚本（即$SHELL环境变量）。</p><p> 如果“#！”之后的解释程序是一个可执行文件，那么执行这个脚本是，他就会把文件名及其参数作为参数传给那个解释程序去执行。</p><p> 如果“#！”指定的解释程序没有可执行权限，则会报错“bad interpreter：Permission denied”（拒绝访问，也就是没有权限）。如果“#！”指定的解释程序不是一个可执行文件，那么指定的解释程序会被忽略，转而给当前的shell去执行这个脚本。</p><p> 如果“#！”指定的解释程序不存在，那么会报错“bad interpret ： No such file ordirectory”，注意：“#！”之后的解释程序，需要些其绝对路径（例如：/bin/bash）,他是不会自动到$PATH中寻找解释器的。</p><p> 当然，如果你使用的“bash test.sh”这样的命令来执行脚本，那么“#！”这一行将被忽略，解释器当然是用命令行中显示式指定的bash。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shebang 是linux shell脚本中的第一行的符号&lt;br&gt;即 “#!”&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://gmle.github.io/categories/linux/"/>
    
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>fastDFS使用与介绍</title>
    <link href="http://gmle.github.io/2018/10/14/fastDFS/"/>
    <id>http://gmle.github.io/2018/10/14/fastDFS/</id>
    <published>2018-10-14T02:21:43.545Z</published>
    <updated>2018-10-15T07:31:52.866Z</updated>
    
    <content type="html"><![CDATA[<p>fastDFS是用c写的一款开源的分布式文件系统，可以很容易地搭建一套分布式文件系统。</p><a id="more"></a><h2 id="fastDFS中的三个角色"><a href="#fastDFS中的三个角色" class="headerlink" title="fastDFS中的三个角色"></a>fastDFS中的三个角色</h2><ul><li>追踪器(Tracker)-&gt;管理者：管理存储节点，类似于Hadoop中的namenode<ul><li>需要多个Tracker以避免单点故障</li><li>与Hadoop不同的是Tracker是以轮询的方式实现的</li></ul></li><li>存储节点(storage)-&gt;存储节点：存储数据，类似于Hadoop中的DataNode</li><li>(实现)客户端(client)-&gt;界面管理：上传下载功能的实现</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载 libfastcommon与fastdfs<br>安装过程相同：<br>​    先安装libfastcommon<br>​    ./make.sh &amp;&amp; ./make.sh install<br>​    再安装fastdfs<br>​    ./make.sh &amp;&amp; ./make.sh install</p><h2 id="工作顺序"><a href="#工作顺序" class="headerlink" title="工作顺序"></a>工作顺序</h2><ul><li>启动Tracker<ul><li>Tracker接收storage的心跳信息并与其建立映射</li></ul></li><li>启动storage<ul><li>单独开启一个线程<ul><li>汇报节点状态</li><li>汇报当前存储节点的磁盘信息</li><li>汇报数据同步情况</li><li>汇报数据被下载的次数</li></ul></li></ul></li><li>启动客户端<ul><li>上传<ul><li>连接Tracker，询问存储节点信息</li><li>Tracker查询符合上传文件大小的存储节点并返回节点信息</li><li>Tracker将节点信息返回给client</li><li>(集群)选择需要连接的Tracker</li><li>发送文件</li><li>选择存储的group</li><li>存储上传文件后返回的一个文件地址</li></ul></li><li>下载<ul><li>连接Tracker，查询文件所在节点</li><li>Tracker返回存储文件的节点信息，返回节点的ip:端口</li><li>(集群)选择需要连接的Tracker</li><li>下载文件</li></ul></li></ul></li></ul><h2 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>libfastcommon-1.36.zip（fastdfs的基础库包 ）</p><ul><li>unzip libfastcommon-1.36.zip </li><li>./make.sh </li><li>./make.sh install</li></ul><p>fastdfs-5.10.tar.gz<br>​    tar zxvf fastdfs-5.10.tar.gz<br>​    ./make.sh<br>​    ./make.sh install</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">fastDFS安装的所有的可执行程序: /usr/bin/fdfs_*</span></span><br><span class="line">fdfs_test</span><br></pre></td></tr></table></figure><h3 id="fastDFS配置文件"><a href="#fastDFS配置文件" class="headerlink" title="fastDFS配置文件"></a>fastDFS配置文件</h3><hr><p>配置文件默认位置: /etc/fdfs</p><ul><li>client.conf.sample</li><li>storage.conf.sample</li><li>storage_ids.conf.sample</li><li>tracker.conf.sample</li></ul><hr><h4 id="tracker-conf"><a href="#tracker-conf" class="headerlink" title="tracker.conf"></a>tracker.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将追踪器和部署的主机的IP地址进程绑定, 也可以不指定</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不指定, 会自动绑定当前主机IP, 如果是云服务器建议不要写 bind_addr=192.168.247.135</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 追踪器监听的端口</span></span><br><span class="line">port=22122</span><br><span class="line"><span class="meta">#</span><span class="bash"> 追踪器存储日志信息的目录, xxx.pid文件, 必须是一个存在的目录 base_path=/home/yuqing/fastdfs</span></span><br></pre></td></tr></table></figure><h4 id="storage-conf"><a href="#storage-conf" class="headerlink" title="storage.conf"></a>storage.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前存储节点对应的主机属于哪一个组 group_name=group1</span></span><br><span class="line">  group_name=group1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前存储节点和所应该的主机进行IP地址的绑定, 如果不写, 有fastdfs自动绑定 bind_addr=</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储节点绑定的端口</span></span><br><span class="line">port=23000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储节点写<span class="built_in">log</span>日志的路径 base_path=/home/yuqing/fastdfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储节点提供的存储文件的路径个数 store_path_count=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具体的存储路径 store_path0=/home/yuqing/fastdfs store_path1=/home/yuqing/fastdfs1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 追踪器的地址信息 tracker_server=192.168.247.135:22122 tracker_server=192.168.247.136:22122</span></span><br><span class="line">tracker_server=192.168.247.135:22122</span><br><span class="line">tracker_server=192.168.247.136:22122</span><br></pre></td></tr></table></figure><h4 id="client-conf"><a href="#client-conf" class="headerlink" title="client.conf"></a>client.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端写<span class="built_in">log</span>日志的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该路径必须存在</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前的用户对于该路径中的文件有读写权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前用户robin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定的路径属于root base_path=/home/yuqing/fastdfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 要连接的追踪器的地址信息 tracker_server=192.168.247.135:22122 tracker_server=192.168.247.136:22122</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="tracker追踪器的启动"><a href="#tracker追踪器的启动" class="headerlink" title="tracker追踪器的启动"></a>tracker追踪器的启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动程序在 /usr/bin/fdfs_*</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">fdfs_trackerd 追踪器的配置文件(/etc/fdfs/tracker.conf)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">fdfs_trackerd 追踪器的配置文件(/etc/fdfs/tracker.conf) stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">fdfs_trackerd 追踪器的配置文件(/etc/fdfs/tracker.conf) restart</span><br></pre></td></tr></table></figure><h4 id="storage存储节点的启动"><a href="#storage存储节点的启动" class="headerlink" title="storage存储节点的启动"></a>storage存储节点的启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">fdfs_storaged 存储节点的配置文件(/etc/fdfs/stroga.conf)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">fdfs_storaged 存储节点的配置文件(/etc/fdfs/stroga.conf) stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">fdfs_storaged 存储节点的配置文件(/etc/fdfs/stroga.conf) restart</span><br></pre></td></tr></table></figure><h4 id="client客户端启动"><a href="#client客户端启动" class="headerlink" title="client客户端启动"></a>client客户端启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 上传</span></span><br><span class="line">fdfs_upload_file 客户端的配置文件(/etc/fdfs/client.conf) 要上传的文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 得到的结果字符串: group1/M00/00/00/wKj3h1vC-PuAJ09iAAAHT1YnUNE31352.c</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">fdfs_download_file 客户端的配置文件(/etc/fdfs/client.conf) 上传成功之后得到的字符串(fileID)</span><br></pre></td></tr></table></figure><h4 id="fastdfs状态检测"><a href="#fastdfs状态检测" class="headerlink" title="fastdfs状态检测"></a>fastdfs状态检测</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检测命令</span></span><br><span class="line">fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure><p>storage的七种状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:INIT:初始化，尚未得到同步已有数据的源服务器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:WAIT_SYNC :等待同步，已得到同步已有数据的源服务器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:SYNCING:同步中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:DELETED:已删除，该服务器从本组中摘除</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:OFFLINE:离线</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:ONLINE:在线，尚不能提供服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> FDFS_STORAGE_STATUS:ACTIVE:在线，可以提供服务</span></span><br></pre></td></tr></table></figure><h2 id="fileID"><a href="#fileID" class="headerlink" title="fileID"></a>fileID</h2><p>file.md -&gt; group1/M00/00/00wKhS_VlrEf0AdIZyAAAJT0wCgr43848.md</p><ul><li>group1<ul><li>文件上传到的存储节点的哪个组</li><li>如果有多个组，组名是变化的</li></ul></li><li>M00<ul><li>虚拟目录</li><li>和存储节点的配置项映射<ul><li>store_path0=/home/yuqing/fastdfs/data -&gt; M00</li><li>store_path1=/home/yuqing/fastdfs1/data -&gt; M01</li></ul></li></ul></li><li>00/00<ul><li>实际路径</li><li>可变</li></ul></li><li>wKhS_VlrEfOAdIZyAAAJTOwCGr43848.md<ul><li>文件名包含的信息，</li><li>Base64编码，信息包括：<ul><li>源storage server ip地址</li><li>文件创建时间</li><li>文件大小</li><li>文件CRC32校验码<ul><li>循环冗余校验</li></ul></li><li>随机数</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fastDFS是用c写的一款开源的分布式文件系统，可以很容易地搭建一套分布式文件系统。&lt;/p&gt;
    
    </summary>
    
      <category term="fastDFS" scheme="http://gmle.github.io/categories/fastDFS/"/>
    
    
      <category term="fastDFS" scheme="http://gmle.github.io/tags/fastDFS/"/>
    
  </entry>
  
  <entry>
    <title>结构体数据对齐详解</title>
    <link href="http://gmle.github.io/2018/09/18/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/"/>
    <id>http://gmle.github.io/2018/09/18/结构体数据对齐/</id>
    <published>2018-09-18T06:46:21.626Z</published>
    <updated>2018-09-20T06:26:32.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据对齐"><a href="#数据对齐" class="headerlink" title="数据对齐"></a>数据对齐</h2><p>结构体数据对齐：指结构体内各个数据的内存地址的对齐<br><strong>在结构体中的第一个成员的首地址等于整个结构体的变量的首地址</strong><br>后面的成员地址随着它声明的首地址和实际占用的字节数递增。<br>而为了总的结构体大小对齐，会在结构体中插入一些没有实际意义的字符填充结构体</p><a id="more"></a><p>通俗点讲，计算机系统对基本类型的数据在内存中存放的位置有限制，系统会要求这些数据的首地址的值是某个数(这个数一般为4或者8的)的倍数，这就是所谓的内存对齐</p><p>而32位机器上默认的对齐模数一般为4，64位机上位8。</p><p>在结构体中，成员数据对齐满足以下规则：</p><ul><li>结构体重的第一个成员的首地址即时结构体变量的首地址。</li><li>结构体中的每一个成员的首地址相对于结构体IDE首地址的偏移量是该成员数据类型大小的整数倍。</li><li>结构体的总大小是对齐模数（对齐模数等于#pragma pack(n)所指定的n与结构体重最大数据类型的成员大小的最小值）的整数倍</li></ul><p>Example：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">One</span>&#123;</span></span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Two</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>struct</th><th>type</th><th>pack(4)</th><th>pack(8)</th></tr></thead><tbody><tr><td>one</td><td>double</td><td>8</td><td>8</td></tr><tr><td></td><td>char</td><td>1+3</td><td>1+3</td></tr><tr><td></td><td>int</td><td>4</td><td>4</td></tr><tr><td>result</td><td></td><td>16</td><td>16</td></tr><tr><td>two</td><td></td><td></td><td></td></tr><tr><td></td><td>char</td><td>1+3</td><td>1+7</td></tr><tr><td></td><td>double</td><td>8</td><td>8</td></tr><tr><td></td><td>int</td><td>4</td><td>4+4</td></tr><tr><td>result</td><td></td><td>16</td><td>24</td></tr></tbody></table><h2 id="进阶C"><a href="#进阶C" class="headerlink" title="进阶C++"></a>进阶C++</h2><h3 id="C-中的数据对齐"><a href="#C-中的数据对齐" class="headerlink" title="C++中的数据对齐"></a>C++中的数据对齐</h3><p>环境：macOS 11.13.6 64位<br>编译器：clang-902.0.39.2<br>系统int大小为4字节，指针大小为8字节。</p><h4 id="空类"><a href="#空类" class="headerlink" title="空类"></a>空类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;;</span><br></pre></td></tr></table></figure><p>空类sizeof的结果为1，为什么不是0呢？因为C++标准规定两个不同实例的内存地址必须不同，所以用这一个字节来占用不同的内存地址，让空类的两个实例可以相互区分。</p><h4 id="单个数据类型"><a href="#单个数据类型" class="headerlink" title="单个数据类型"></a>单个数据类型</h4><p>大多数编译器支持空基类优化（Empty Base Class Optimization, EBCO），即从空基类中派生出来的类并不会增加1字节，如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>sizeof(B)的结果为4而不是5或8。</p><h4 id="静态数据成员类型"><a href="#静态数据成员类型" class="headerlink" title="静态数据成员类型"></a>静态数据成员类型</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sizeof 结果为4,静态数据成员被存放在类对象之外。</p><h4 id="带非虚函数成员的类"><a href="#带非虚函数成员的类" class="headerlink" title="带非虚函数成员的类"></a>带非虚函数成员的类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(D)结果为1，无论是普通成员函数还是静态成员函数都被存放在类对象之外。</p><h4 id="带虚函数成员的类"><a href="#带虚函数成员的类" class="headerlink" title="带虚函数成员的类"></a>带虚函数成员的类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(E)结果为8，带虚函数成员的类对象会包含一个指向该类的virtual table的指针。</p><h4 id="普通派生类"><a href="#普通派生类" class="headerlink" title="普通派生类"></a>普通派生类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span> :</span> <span class="keyword">public</span> C &#123;</span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(G)的结果为8，派生类会存放基类中非静态数据成员(C中的a)的副本。</p><h4 id="基类带虚函数的派生类"><a href="#基类带虚函数的派生类" class="headerlink" title="基类带虚函数的派生类"></a>基类带虚函数的派生类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span> :</span> <span class="keyword">public</span> E &#123;&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(H)结果为8，由于基类中带虚函数，派生类中也必须保存一个指向派生类的virtual table的指针。</p><h4 id="多重继承的派生类"><a href="#多重继承的派生类" class="headerlink" title="多重继承的派生类"></a>多重继承的派生类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E3</span> :</span><span class="keyword">public</span> E1, <span class="keyword">public</span> E2&#123;&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(E3)结果为16，子类中保存了两个virtual table的指针</p><h4 id="虚继承的派生类"><a href="#虚继承的派生类" class="headerlink" title="虚继承的派生类"></a>虚继承的派生类</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H1</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H2</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H3</span>:</span><span class="keyword">public</span> <span class="keyword">virtual</span> H1, <span class="keyword">public</span> <span class="keyword">virtual</span> H2&#123;&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(H3)的结果为16，是两个基类中的virtual table指针</p><h3 id="普通类的对齐规则"><a href="#普通类的对齐规则" class="headerlink" title="普通类的对齐规则"></a>普通类的对齐规则</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> a;</span><br><span class="line">  <span class="keyword">int</span>  b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(F)的结果为8而不是5，由于F的最大对齐值为4（int），因此a和b之间被补齐3字节。</p><h3 id="多重继承下的对齐规则"><a href="#多重继承下的对齐规则" class="headerlink" title="多重继承下的对齐规则"></a>多重继承下的对齐规则</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G1</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> *b;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G2</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G3</span>:</span><span class="keyword">public</span> G1, <span class="keyword">public</span> G2&#123;&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(G3)的结果为48，默认对齐模数为8的情况下<br>G1 = （8）+（4）+（8）+（8）<br>G2 = （4+4）+（1+7）+（8）<br>G3 = 48</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据对齐&quot;&gt;&lt;a href=&quot;#数据对齐&quot; class=&quot;headerlink&quot; title=&quot;数据对齐&quot;&gt;&lt;/a&gt;数据对齐&lt;/h2&gt;&lt;p&gt;结构体数据对齐：指结构体内各个数据的内存地址的对齐&lt;br&gt;&lt;strong&gt;在结构体中的第一个成员的首地址等于整个结构体的变量的首地址&lt;/strong&gt;&lt;br&gt;后面的成员地址随着它声明的首地址和实际占用的字节数递增。&lt;br&gt;而为了总的结构体大小对齐，会在结构体中插入一些没有实际意义的字符填充结构体&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>kill &amp;&amp; kill -9</title>
    <link href="http://gmle.github.io/2018/08/25/kill%E4%B8%8Ekill%20-9%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://gmle.github.io/2018/08/25/kill与kill -9的区别/</id>
    <published>2018-08-25T01:35:51.228Z</published>
    <updated>2018-09-20T01:42:36.403Z</updated>
    
    <content type="html"><![CDATA[<p>测试kill和kill -9信号的区别。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></span><br><span class="line"><span class="comment">  * Created by 王乐.</span></span><br><span class="line"><span class="comment">  * Date: 2018/8/25.</span></span><br><span class="line"><span class="comment">  * FileName: kill.c.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***** Code is coming! *****//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigHandler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"signo = %d\n"</span>, sig);</span><br><span class="line">    kill(getpid(), SIGKILL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sigset_t</span> signals;</span><br><span class="line"></span><br><span class="line">    signal(SIGINT, sigHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 置空信号集</span></span><br><span class="line">    sigemptyset(&amp;signals);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将所有位置1，与上个函数相反</span></span><br><span class="line">    <span class="comment">// sigfillset(&amp;signals);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加和删除信号。</span></span><br><span class="line">    sigaddset(&amp;signals, SIGINT);</span><br><span class="line">    sigaddset(&amp;signals, SIGQUIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SIGKILL 进程不能被阻塞和拦截，该处阻塞无效</span></span><br><span class="line">    sigaddset(&amp;signals, SIGKILL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合中的信号加入到阻塞信号集中</span></span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;signals, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sigset_t</span> pending;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取未决信号集</span></span><br><span class="line">        sigemptyset(&amp;pending);</span><br><span class="line">        sigpending(&amp;pending);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sigismember(&amp;pending, i) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j++ % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sigprocmask(SIG_UNBLOCK, &amp;signals, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行<br>按CTRL-C可以发送信号SIGINT。<br>按CTRL-\可以发送信号SIGQUIT。</p><p>发送完成可直接捕获到这两个信号。<br>我们可以使用man手册查看信号部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 7 signal</span><br></pre></td></tr></table></figure><p>其中有一句话：<br> The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.</p><p> 表示SIGKILL和SIGSTOP信号不能被捕获。</p><p> 再查看信号的详细信息：<br>  SIGKILL       9       Term    Kill signal<br>  SIGTERM      15       Term    Termination signal</p><p>  不难发现 信号9是kill信号，直接杀死该进程，而kill默认发送的信号SIGTERM则是kill命令(例：kill 1234)则默认发送15号信号。</p><p>  15号信号可以被捕获到，而我们的程序捕获到15号信号之后可以做一些回收资源、打印日志等操作。<br>  但当接收到信号9的时候，则直接被杀死，不会来得及释放内存，打印日志等。</p><p>  综合来看，我们应尽量使用kill而不是kill -9.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试kill和kill -9信号的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>利用栈规则做就近括号匹配</title>
    <link href="http://gmle.github.io/2018/07/11/%E5%88%A9%E7%94%A8%E6%A0%88%E8%A7%84%E5%88%99%E5%81%9A%E5%B0%B1%E8%BF%91%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>http://gmle.github.io/2018/07/11/利用栈规则做就近括号匹配/</id>
    <published>2018-07-11T13:50:43.276Z</published>
    <updated>2018-07-11T13:53:48.751Z</updated>
    
    <content type="html"><![CDATA[<p>利用栈规则做就近括号匹配<br><a id="more"></a></p><p>从第一个字符开始扫描<br>当遇见普通字符时忽略，<br>当遇见左括号时压入栈中<br>当遇见右括号时从栈中弹出栈顶符号，并进行匹配<br>匹配成功：继续读入下一个字符<br>匹配失败：立即停止，并报错<br>结束：<br>成功: 所有字符扫描完毕，且栈为空<br>失败：匹配失败或所有字符扫描完毕但栈非空</p><p>FILE1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SEQSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SEQSTACK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *data[MAX];  <span class="comment">//栈的数组</span></span><br><span class="line">    <span class="keyword">int</span> m_Size; <span class="comment">//栈大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">SeqStack <span class="title">init_SeqStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_SEQSTACK_H</span></span></span><br></pre></td></tr></table></figure><p>FILE2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SeqStack.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">SeqStack <span class="title">init_SeqStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">myStack</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">SStack</span>));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (myStack == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化数组</span></span><br><span class="line">    <span class="built_in">memset</span>(myStack-&gt;data, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * MAX);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化栈大小</span></span><br><span class="line">    myStack-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//入栈本质  --- 数组尾插</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;data[mystack-&gt;m_Size] = data;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;m_Size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//出栈本质  --- 数组尾删</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;data[mystack-&gt;m_Size - <span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;m_Size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mystack-&gt;data[mystack-&gt;m_Size - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mystack-&gt;m_Size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回-1代表真  空栈</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//返回0 代表 不是空栈</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">stack</span> = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FILE3:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLeft</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">'('</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isRight</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"123*(was)s(sd)sdb(fs())())))(()"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p = str;</span><br><span class="line"></span><br><span class="line">    SeqStack *<span class="built_in">stack</span> = init_SeqStack();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="string">'\0'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是左括号，入栈</span></span><br><span class="line">        <span class="keyword">if</span> (isLeft(*p)) &#123;</span><br><span class="line">            push_SeqStack(<span class="built_in">stack</span>, p);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isRight(*p)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size_SeqStack(<span class="built_in">stack</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pop_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error(str, <span class="string">"Error!"</span>, p);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (size_SeqStack(<span class="built_in">stack</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        error(str, <span class="string">"Error"</span>, top_SeqStack(<span class="built_in">stack</span>));</span><br><span class="line">        pop_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destroy_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> b = isEmpty_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n=-=-=-=-=-=-=-====-=-=\n%d\n"</span>,b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">char</span> *<span class="built_in">string</span>, <span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = (<span class="keyword">int</span>) (p - str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用栈规则做就近括号匹配&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Shell的加减乘除操作</title>
    <link href="http://gmle.github.io/2018/05/15/Shell%E4%B8%AD%E7%9A%84%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
    <id>http://gmle.github.io/2018/05/15/Shell中的加减乘除/</id>
    <published>2018-05-15T03:06:09.818Z</published>
    <updated>2018-10-18T01:26:55.838Z</updated>
    
    <content type="html"><![CDATA[<p>写了这么长时间的Shell竟然不知道乘除怎么写。。。</p><a id="more"></a><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">((i=$j+$k))   i=`expr $j + $k`</span><br><span class="line">((i=$j-$k))   i=`expr $j -$k`</span><br><span class="line">((i=$j*$k))   i=`expr $j \*$k`</span><br><span class="line">((i=$j/$k))   i=`expr $j /$k`</span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><hr><p>Let expressions 执行一个或多个表达式。表达式中的变量前不必有$.</p><p>如果表达式中包含了空格或其他特殊字符，则必须引起来。</p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let “I = I + 1”</span><br><span class="line"></span><br><span class="line">let i=i+1</span><br></pre></td></tr></table></figure><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>算术运算符指的是可以在程序中实现加、减、乘、除等数学运算的运算符。Shell中常用的数学运算符如下所示。</p><hr><p>— +：对两个变量做加法。</p><p>— -：对两个变量做减法。</p><p>— *：对两个变量做乘法。</p><p>— /：对两个变量做除法。</p><p>— **：对两个变量做幂运算。</p><p>— %：取模运算，第一个变量除以第二个变量求余数。</p><p>— +=：加等于，在自身基础上加第二个变量。</p><p>— -=：减等于，在第一个变量的基础上减去第二个变量。</p><p>— *=：乘等于，在第一个变量的基础上乘以第二个变量。</p><p>— /=：除等于，在第一个变量的基础上除以第二个变量。</p><p>— %=：取模赋值，第一个变量对第二个变量取模运算，再赋值给第一个变量。</p><hr><p>在使用这些运算符时，需要注意到运算顺序的问题。例如输入下面的命令，输出1+2的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1+2</span><br></pre></td></tr></table></figure><p>Shell并没有输出结果3，而是输出了1+2。在shell中有三种方法可以更改运算顺序。</p><ul><li><p>用expr改变运算顺序。可以用echo <code>expr 1 +2</code>来输出1+2的结果，用expr表示后面的表达式为一个数学运算。需要注意的是，`并不是一个单引号，而是“Tab”键上面的那个符号。</p></li><li><p>用let指示数学运算。可以先将运算的结果赋值给变量b，运算命令是b=let 1 + 2。然后用echo$b来输出b的值。如果没有let，则会输出1+2。</p></li><li><p>用$[]表示数学运算。将一个数学运算写到$[]符号的中括号中，中括号中的内容将先进行数学运算。例如命令echo$[1+2]，将输出结果3。</p></li></ul><p>下面是一个shell程序实例，实现数学函数S=3(xy)+4x2+5y+6的运算。在程序中以位置变量的方式输入x与y的值。程序的编写步骤如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4.4.sh</span></span><br><span class="line"></span><br><span class="line">s=0                                    #定义一个求和变量，初值为0。</span><br><span class="line"></span><br><span class="line">t=`expr$1**$2`                        #用expr改变运算顺序，求x的y次方。</span><br><span class="line"></span><br><span class="line">t=$[t*3]                               #t乘以3。</span><br><span class="line"></span><br><span class="line">s=$[s+t]                               #结果相加。</span><br><span class="line"></span><br><span class="line">t=$[$1**2]                             #求x的平方。</span><br><span class="line"></span><br><span class="line">t=$[t*4]                               #结果乘以4。</span><br><span class="line"></span><br><span class="line">s=$[s+t]                               #结果相加。</span><br><span class="line"></span><br><span class="line">t=`expr$2*5`                          #求5y的值。</span><br><span class="line"></span><br><span class="line">s=$[s+t]                               #结果相加。</span><br><span class="line"></span><br><span class="line">s=$[s+6]                               #结果加上6。</span><br><span class="line"></span><br><span class="line"><span class="meta">echo$</span><span class="bash">s                                <span class="comment">#输出结果。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">echo$</span><span class="bash">((a%b))                          <span class="comment">#取余</span></span></span><br></pre></td></tr></table></figure><p>在这个程序中，需要注意算术运算的写法。如果没有expr或$[]更改运算顺序，则会将运算式以字符串的形式赋值，而不会赋值运算结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写了这么长时间的Shell竟然不知道乘除怎么写。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://gmle.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>不同编译器下的差异</title>
    <link href="http://gmle.github.io/2018/03/16/%E4%B8%8D%E5%90%8C%E7%BC%96%E8%AF%91%E5%99%A8%E5%AF%B9C++%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BD%B1%E5%93%8D/"/>
    <id>http://gmle.github.io/2018/03/16/不同编译器对C++的一些影响/</id>
    <published>2018-03-16T10:21:43.000Z</published>
    <updated>2018-07-21T13:54:52.341Z</updated>
    
    <content type="html"><![CDATA[<p>在学习C++的时候遇到了一些问题。<br>在不同编译器下 某些代码无法实现。<br><a id="more"></a></p><p>在Mac 默认的编译器 clang下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestType</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> TestType x = &#123;<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">    TestType *x1 = <span class="keyword">const_cast</span>&lt;TestType*&gt;(&amp;x);</span><br><span class="line">    x1-&gt;data = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x.data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x1-&gt;data&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译通过 ，但是运行的时候会出问题。</p><p>检查原因，运行到赋值的地方：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1-&gt;data = <span class="number">200</span>;</span><br></pre></td></tr></table></figure></p><p> 程序会退出。</p><p> 但是在msvc等其他编译器下执行则不会出现问题。</p><p> 其实，我们用const时为了提醒一下自己这个值是个常量，不要动了。但是事实证明 const 常量也是可以改变值的。<br> 但是这就完全没有必要了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习C++的时候遇到了一些问题。&lt;br&gt;在不同编译器下 某些代码无法实现。&lt;br&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>关于Spark环境变量问题</title>
    <link href="http://gmle.github.io/2017/11/06/%E5%85%B3%E4%BA%8ESpark%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://gmle.github.io/2017/11/06/关于Spark环境变量问题/</id>
    <published>2017-11-06T08:44:11.000Z</published>
    <updated>2017-11-06T08:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次因为spark内置环境问题引发的惨案</p><a id="more"></a><h2 id="问题：Spark在spark-env-sh中的环境变量不生效"><a href="#问题：Spark在spark-env-sh中的环境变量不生效" class="headerlink" title="问题：Spark在spark-env.sh中的环境变量不生效"></a>问题：Spark在spark-env.sh中的环境变量不生效</h2><!-- more --><p>错误日志</p><ul><li>Terminal<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ceshi3 sbin]# ./start-slaves.sh </span><br><span class="line">- /usr/local/spark-1.6.0-bin-hadoop2.6/conf/spark-env.sh: line 9: export: `/usr/local/spark-1.6.0-bin-hadoop2.6/lib/spark-assembly-1.6.0-hadoop2.6.0.jar': not a valid identifier</span><br><span class="line">- ceshi3: /usr/local/spark-1.6.0-bin-hadoop2.6/conf/spark-env.sh: line 9: export: `/usr/local/spark-1.6.0-bin-hadoop2.6/lib/spark-assembly-1.6.0-hadoop2.6.0.jar': not a valid identifier</span><br><span class="line">- ceshi3: starting org.apache.spark.deploy.worker.Worker, logging to /usr/local/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-ceshi3.out</span><br><span class="line">- ceshi3: failed to launch org.apache.spark.deploy.worker.Worker:</span><br><span class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: 没有那个文件或目录</span><br><span class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: exec: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: cannot execute: 没有那个文件或目录</span><br><span class="line">- ceshi3: full log in /usr/local/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-ceshi3.out</span><br></pre></td></tr></table></figure></li></ul><p>发现启动worker的时候会出现错误：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: 没有那个文件或目录</span><br><span class="line">- ceshi3:   /usr/local/spark-1.6.0-bin-hadoop2.6/bin/spark-class: line 87: exec: /usr/local/spark-1.6.0-bin-hadoop2.6/bin/java: cannot execute: 没有那个文件或目录</span><br></pre></td></tr></table></figure></p><p>这个bin/java明明是$ JAVA_HOME 的，为什么会变为 $SPARK_HOME 呢</p><p>既然启动报错，而且报的是 $JAVA_HOME，那就要看几个东西:一个是正常的系统变量配置，再一个就是在要启动的服务里是否使用了这个配置变量，再确认下自己的配置是否已经有了。</p><h2 id="查看-spark-关于环境变量的配置文件"><a href="#查看-spark-关于环境变量的配置文件" class="headerlink" title="查看 spark 关于环境变量的配置文件"></a>查看 spark 关于环境变量的配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=dk31:2181,dk32:2181,dk34:2181 -Dspark.deploy.zookeeper.dir=/spark"</span><br><span class="line">export JAVA_HOME=$&#123;JAVA_HOME&#125;</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop-2.6.0</span><br><span class="line">export HADOOP_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</span><br><span class="line">export SCALA_HOME=/usr/local/scala-2.10.4</span><br><span class="line">export SPARK_WORKER_MEMORY=4g</span><br><span class="line">export SPARK_EXECUTOR_MEMORY=2g</span><br><span class="line">export SPARK_DRIVER_MEMORY=1g</span><br><span class="line">export SPARK_WORKER_CORES=4</span><br><span class="line">export SPARK_CLASSPATH=/usr/local/spark-1.6.0-bin-hadoop2.6/lib/mysql-connector-java.jar</span><br><span class="line">export SPARK_CLASSPATH=$SPARK_CLASSPATH:$CLASSPATH</span><br></pre></td></tr></table></figure><p>发现 $JAVA_HOME 变量是取的系统变量·，但是系统变量为什么取不到？</p><p>查了下：在脚本中使用export, 只在脚本中有效，退出这个脚本，设置的变量就没有了。<br>由于spark-class使用了 spark-env.sh 在使用的时候 已经取不到该值，所以无效了。<br>但是想不通为什么会变成 $SPARK_HOME 的变量</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次因为spark内置环境问题引发的惨案&lt;/p&gt;
    
    </summary>
    
      <category term="Spark" scheme="http://gmle.github.io/categories/Spark/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Spark" scheme="http://gmle.github.io/tags/Spark/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Spark-HA的worker问题</title>
    <link href="http://gmle.github.io/2017/11/06/Spark-HA%E7%9A%84worker%E9%97%AE%E9%A2%98/"/>
    <id>http://gmle.github.io/2017/11/06/Spark-HA的worker问题/</id>
    <published>2017-11-06T08:39:00.000Z</published>
    <updated>2017-11-06T08:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 HA 中 Spark worker节点连接Master的问题</p><a id="more"></a><h2 id="问题：Spark-Woker-不去连接ALIVE-Master"><a href="#问题：Spark-Woker-不去连接ALIVE-Master" class="headerlink" title="问题：Spark Woker 不去连接ALIVE Master"></a>问题：Spark Woker 不去连接ALIVE Master</h2><p>机器：</p><ul><li>192.168.1.128 Master</li><li>192.168.1.129 Master Worker</li><li><p>192.168.1.130 Worker</p><p>启动时两个Master的状态不可控，不知道哪个是ALIVE的Master，worker节点在连接Master的时候，会判断当前Master的状态是否为ALIVE，如果为StandBy，则不继续链接，然后去寻找ALIVE，直到找到ALIVE节点的MASTER。</p><p>现在的问题是 Worker在找到StandBy节点后，并没有去寻找新的Master，导致了worker注册不到集群上，自动关闭。</p><p>原因待定。</p><p>根据一些帖子发现，如果配置了Spark on yarn ，则 Spark HA 基本没有任何作用。</p></li></ul><!-- more --><p>错误日志</p><ul><li>Terminal<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">17/10/09 13:05:08 INFO Worker: Registered signal handlers for [TERM, HUP, INT]</span><br><span class="line">17/10/09 13:05:09 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">17/10/09 13:05:09 INFO SecurityManager: Changing view acls to: root</span><br><span class="line">17/10/09 13:05:09 INFO SecurityManager: Changing modify acls to: root</span><br><span class="line">17/10/09 13:05:09 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(root); users with modify permissions: Set(root)</span><br><span class="line">17/10/09 13:05:10 INFO Utils: Successfully started service 'sparkWorker' on port 39766.</span><br><span class="line">17/10/09 13:05:10 INFO Worker: Starting Spark worker 192.168.10.129:39766 with 4 cores, 4.0 GB RAM</span><br><span class="line">17/10/09 13:05:10 INFO Worker: Running Spark version 1.6.0</span><br><span class="line">17/10/09 13:05:10 INFO Worker: Spark home: /opt/dkh/spark-1.6.0-bin-hadoop2.6</span><br><span class="line">17/10/09 13:05:11 INFO Utils: Successfully started service 'WorkerUI' on port 8081.</span><br><span class="line">17/10/09 13:05:11 INFO WorkerWebUI: Started WorkerWebUI at http://192.168.10.129:8081</span><br><span class="line">17/10/09 13:05:11 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:05:11 WARN Worker: Failed to connect to master dkm:7077</span><br><span class="line">java.io.IOException: Failed to connect to dkm/192.168.10.128:7077</span><br><span class="line">at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:216)</span><br><span class="line">at org.apache.spark.network.client.TransportClientFactory.createClient(TransportClientFactory.java:167)</span><br><span class="line">at org.apache.spark.rpc.netty.NettyRpcEnv.createClient(NettyRpcEnv.scala:200)</span><br><span class="line">at org.apache.spark.rpc.netty.Outbox$$anon$1.call(Outbox.scala:187)</span><br><span class="line">at org.apache.spark.rpc.netty.Outbox$$anon$1.call(Outbox.scala:183)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:262)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">Caused by: java.net.ConnectException: 拒绝连接: dkm/192.168.10.128:7077</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:739)</span><br><span class="line">at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:224)</span><br><span class="line">at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:289)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:528)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)</span><br><span class="line">... 1 more</span><br><span class="line">17/10/09 13:05:24 INFO Worker: Retrying connection to master (attempt # 1)</span><br><span class="line">17/10/09 13:05:24 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:05:37 INFO Worker: Retrying connection to master (attempt # 2)</span><br><span class="line">17/10/09 13:05:37 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:05:50 INFO Worker: Retrying connection to master (attempt # 3)</span><br><span class="line">17/10/09 13:05:50 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:06:03 INFO Worker: Retrying connection to master (attempt # 4)</span><br><span class="line">17/10/09 13:06:03 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:06:16 INFO Worker: Retrying connection to master (attempt # 5)</span><br><span class="line">17/10/09 13:06:16 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:06:29 INFO Worker: Retrying connection to master (attempt # 6)</span><br><span class="line">17/10/09 13:06:29 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:07:47 INFO Worker: Retrying connection to master (attempt # 7)</span><br><span class="line">17/10/09 13:07:47 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:09:05 INFO Worker: Retrying connection to master (attempt # 8)</span><br><span class="line">17/10/09 13:09:05 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:10:23 INFO Worker: Retrying connection to master (attempt # 9)</span><br><span class="line">17/10/09 13:10:23 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:11:41 INFO Worker: Retrying connection to master (attempt # 10)</span><br><span class="line">17/10/09 13:11:41 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:12:59 INFO Worker: Retrying connection to master (attempt # 11)</span><br><span class="line">17/10/09 13:12:59 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:14:17 INFO Worker: Retrying connection to master (attempt # 12)</span><br><span class="line">17/10/09 13:14:17 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:15:35 INFO Worker: Retrying connection to master (attempt # 13)</span><br><span class="line">17/10/09 13:15:35 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:16:53 INFO Worker: Retrying connection to master (attempt # 14)</span><br><span class="line">17/10/09 13:16:53 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:18:11 INFO Worker: Retrying connection to master (attempt # 15)</span><br><span class="line">17/10/09 13:18:11 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:19:29 INFO Worker: Retrying connection to master (attempt # 16)</span><br><span class="line">17/10/09 13:19:29 INFO Worker: Connecting to master dkm:7077...</span><br><span class="line">17/10/09 13:20:47 ERROR Worker: All masters are unresponsive! Giving up.</span><br></pre></td></tr></table></figure></li></ul><p>既然如此，那干脆不启动第二个Master，Start-all 后，会发现集群正常，但是没有第二个Master。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 HA 中 Spark worker节点连接Master的问题&lt;/p&gt;
    
    </summary>
    
      <category term="Spark" scheme="http://gmle.github.io/categories/Spark/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Spark" scheme="http://gmle.github.io/tags/Spark/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Maven一键安装 centos平台</title>
    <link href="http://gmle.github.io/2017/09/12/yum%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85maven/"/>
    <id>http://gmle.github.io/2017/09/12/yum一键安装maven/</id>
    <published>2017-09-12T02:48:22.000Z</published>
    <updated>2017-09-12T02:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>maven一键安装</code></pre><a id="more"></a><h2 id="添加maven的仓库"><a href="#添加maven的仓库" class="headerlink" title="添加maven的仓库"></a>添加maven的仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo</span><br></pre></td></tr></table></figure><h2 id="yum-安装"><a href="#yum-安装" class="headerlink" title="yum 安装"></a>yum 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install apache-maven</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;maven一键安装
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="linux" scheme="http://gmle.github.io/categories/linux/"/>
    
    
      <category term="Centos" scheme="http://gmle.github.io/tags/Centos/"/>
    
      <category term="maven" scheme="http://gmle.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Bash/Shell调用MySQL并忽略警告</title>
    <link href="http://gmle.github.io/2017/06/25/Bash%E8%B0%83%E7%94%A8MySql/"/>
    <id>http://gmle.github.io/2017/06/25/Bash调用MySql/</id>
    <published>2017-06-25T09:26:19.000Z</published>
    <updated>2017-06-25T09:26:19.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Shell对MySQL的调用与脚本中如何写</code></pre><h2 id="Shell脚本如何搞定-MySQL的增删改查"><a href="#Shell脚本如何搞定-MySQL的增删改查" class="headerlink" title="Shell脚本如何搞定 MySQL的增删改查"></a>Shell脚本如何搞定 MySQL的增删改查</h2><a id="more"></a><p>用Shell对mysql操作非常的简单<br>我们利用 mysql 命令去操作数据库里面的所有东西。</p><ul><li>shell脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一坨一坨的运行：</span></span><br><span class="line">mysql -uroot -p123456 -e <span class="string">"</span></span><br><span class="line"><span class="string">select * from tmp_test where tmp_name = 'a';</span></span><br><span class="line"><span class="string">select * from tmp_test where tmp_name = 'b';</span></span><br><span class="line"><span class="string">select * from tmp_test where tmp_id = 1;</span></span><br><span class="line"><span class="string">select tmp_name from tmp_test where tmp_id = 2;</span></span><br><span class="line"><span class="string">quit</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值：</span></span><br><span class="line">id=$(mysql -uroot -p123456 -e <span class="string">"SELECT tmp_id from tmp_test WHERE tmp_name = 'a';"</span>)</span><br><span class="line"><span class="comment"># 会发现还有字段名字，加参数去掉字段名，只保留我们要查询的：</span></span><br><span class="line">id=$(mysql -uroot -p123456 -Bse <span class="string">"SELECT tmp_id from tmp_test WHERE tmp_name = 'a';"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>过后我们会发现每次查询之后会出现警告，每次都出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br></pre></td></tr></table></figure></p><h2 id="MySQL-版本-5-6-的安全策略"><a href="#MySQL-版本-5-6-的安全策略" class="headerlink" title="MySQL 版本 5.6+ 的安全策略"></a>MySQL 版本 5.6+ 的安全策略</h2><p>MySQL5.6版本向上有一个密码安全问题，即在命令行输入密码会出现警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot  </span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br></pre></td></tr></table></figure><p>读取配置文件的参数也不可以，这样我们 需要指定一个mysql的配置文件作为mysql的配置输入进去：</p><p>cnf配置文件<br>my.cnf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">[mysql]</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure></p><p>然后再在脚本中调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 继续赋值，这样就不会出现警告信息：</span></span><br><span class="line">id=$(mysql --defaults-file=./my.cnf -uroot -Bse <span class="string">"SELECT tmp_id from tmp_test WHERE tmp_name = 'a';"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Shell对MySQL的调用与脚本中如何写
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Shell脚本如何搞定-MySQL的增删改查&quot;&gt;&lt;a href=&quot;#Shell脚本如何搞定-MySQL的增删改查&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本如何搞定 MySQL的增删改查&quot;&gt;&lt;/a&gt;Shell脚本如何搞定 MySQL的增删改查&lt;/h2&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://gmle.github.io/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://gmle.github.io/tags/Shell/"/>
    
      <category term="Bash" scheme="http://gmle.github.io/tags/Bash/"/>
    
      <category term="MySQL" scheme="http://gmle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在Centos6.5下升级python至3.6.0</title>
    <link href="http://gmle.github.io/2017/05/11/centos6.5%E4%B8%8Bpython2.6.6%E5%8D%87%E7%BA%A7%E8%87%B33.6/"/>
    <id>http://gmle.github.io/2017/05/11/centos6.5下python2.6.6升级至3.6/</id>
    <published>2017-05-11T07:57:48.000Z</published>
    <updated>2017-05-11T07:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="此次升级保留旧版本的环境。"><a href="#此次升级保留旧版本的环境。" class="headerlink" title="此次升级保留旧版本的环境。"></a>此次升级保留旧版本的环境。</h2><a id="more"></a><h2 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h2><h3 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y developement</span><br></pre></td></tr></table></figure><h3 id="安装python3解码支持包"><a href="#安装python3解码支持包" class="headerlink" title="安装python3解码支持包"></a>安装python3解码支持包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib-devel openssl-devel sqlite-devel bzip2-devel</span><br></pre></td></tr></table></figure><h2 id="准备更新版本"><a href="#准备更新版本" class="headerlink" title="准备更新版本"></a>准备更新版本</h2><h3 id="验证原有的python版本"><a href="#验证原有的python版本" class="headerlink" title="验证原有的python版本"></a>验证原有的python版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure><p>python 2.6.6</p><h3 id="下载python3-6-0包"><a href="#下载python3-6-0包" class="headerlink" title="下载python3.6.0包"></a>下载python3.6.0包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</span><br></pre></td></tr></table></figure><h3 id="解压编译python安装包"><a href="#解压编译python安装包" class="headerlink" title="解压编译python安装包"></a>解压编译python安装包</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d Python-3.6.0.tar.xz</span><br><span class="line">tar -xvf Python-3.6.0.tar</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.6.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置安装路径</span></span><br><span class="line">./configure --prefix=/usr/local</span><br></pre></td></tr></table></figure><ul><li><p>如果出现编译错误可能是因为gcc gcc-c++版本太低或者未安装，使用代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>进行安装，然后重新编译./configure</p><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make altinstall</span><br></pre></td></tr></table></figure></li></ul><h3 id="建立软连接-就是快捷方式"><a href="#建立软连接-就是快捷方式" class="headerlink" title="建立软连接(就是快捷方式)"></a>建立软连接(就是快捷方式)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python2.6.6    ##你的python版本可能不同</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python</span><br></pre></td></tr></table></figure><ul><li><p>重新验证python版本，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure></li><li><p>python3.6.0</p></li></ul><h3 id="yum指令会报错，将其重新指向旧版本的python"><a href="#yum指令会报错，将其重新指向旧版本的python" class="headerlink" title="yum指令会报错，将其重新指向旧版本的python"></a>yum指令会报错，将其重新指向旧版本的python</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><ul><li>将文件的头部#！/usr/bin/python改为#！/usr/bin/python2.6.6</li></ul><h3 id="安装新pip"><a href="#安装新pip" class="headerlink" title="安装新pip"></a>安装新pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://pypi.python.org/packages/<span class="built_in">source</span>/p/pip/pip-1.3.1.tar.gz --no-check-certificate</span></span><br></pre></td></tr></table></figure><h4 id="解压安装pip"><a href="#解压安装pip" class="headerlink" title="解压安装pip"></a>解压安装pip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x pip-1.3.1.tar.gz</span><br><span class="line">tar xzvf pip-1.3.1.tar.gz</span><br><span class="line">cd pip-1.3.1</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h4 id="查看pip安装"><a href="#查看pip安装" class="headerlink" title="查看pip安装"></a>查看pip安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure><ul><li>pip 1.3.1 from /usr/local/lib/python3.6/site-packages/pip-1.3.1-py3.6.egg (python 3.6)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;此次升级保留旧版本的环境。&quot;&gt;&lt;a href=&quot;#此次升级保留旧版本的环境。&quot; class=&quot;headerlink&quot; title=&quot;此次升级保留旧版本的环境。&quot;&gt;&lt;/a&gt;此次升级保留旧版本的环境。&lt;/h2&gt;
    
    </summary>
    
      <category term="Centos" scheme="http://gmle.github.io/categories/Centos/"/>
    
    
      <category term="Centos" scheme="http://gmle.github.io/tags/Centos/"/>
    
      <category term="Python" scheme="http://gmle.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop_玩转 HDFS之 ACL</title>
    <link href="http://gmle.github.io/2017/05/03/%E7%8E%A9%E8%BD%ACHDFS-ACL/"/>
    <id>http://gmle.github.io/2017/05/03/玩转HDFS-ACL/</id>
    <published>2017-05-03T06:38:39.000Z</published>
    <updated>2017-05-03T06:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Hadoop从2.4.0版本开始支持hdfs的ACL，通俗的讲就是文件访问控制权限下面对其进行一些测试：</code></pre><table><thead><tr><th>unnamed user (file owner)</th><th>文件的拥有者</th></tr></thead><tbody><tr><td>unnamed group (file group)</td><td>文件的所属组</td></tr><tr><td>named user</td><td>除了文件的拥有者和拥有组之外，的其它用户</td></tr><tr><td>named group</td><td>除了文件的拥有者和拥有组之外，的其它用户</td></tr><tr><td>mask</td><td>权限掩码，用于过滤named user和named group的权限</td></tr></tbody></table><a id="more"></a><h2 id="一、启用ACL"><a href="#一、启用ACL" class="headerlink" title="一、启用ACL"></a>一、启用ACL</h2><p>启用ACL功能</p><p>修改hdfs-site.xml 增加如下属性 开启ACL<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.acls.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改core-site.xml 设置用户组默认权限.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.permissions.umask-mode<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>002<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>一个访问控制列表（ACL）是一组ACL词目(entries)的集合，每个ACL词目会指定一个用户/组，并赋予读/写/执行上等权限。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user::rw-</span><br><span class="line">   user:bruce:rwx                  #effective:r--</span><br><span class="line">   group::r-x                      #effective:r--</span><br><span class="line">   group:sales:rwx                 #effective:r--</span><br><span class="line">   mask::r--</span><br><span class="line">  other::r--</span><br></pre></td></tr></table></figure></p><p>这里面，没有命名的用户/组即该文件的基本所属用户/组。每一个ACL都有一个掩码(mask)，如果用户不提供掩码，那么该掩码会自动根据所有ACL条目的并集来获得(属主除外）。在该文件上运行chmod会改变掩码的权限。由于掩码用于过滤，这有效地限制了权限的扩展ACL条目，而不是仅仅改变组条目，并可能丢失的其他扩展ACL条目。</p><p>定义默认 （default）ACL条目，新的子文件和目录会自动继承默认的ACL条目设置，而只有目录会有默认的ACL条目。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user::rwx</span><br><span class="line">  group::r-x</span><br><span class="line">  other::r-x</span><br><span class="line">  <span class="keyword">default</span>:user::rwx</span><br><span class="line">  default:user:bruce:rwx #effective:r-x</span><br><span class="line">  <span class="keyword">default</span>:group::r-x</span><br><span class="line">  default:group:sales:rwx#effective:r-x</span><br><span class="line">  <span class="keyword">default</span>:mask::r-x</span><br><span class="line">  <span class="keyword">default</span>:other::r-x</span><br></pre></td></tr></table></figure><h3 id="ACL相关的文件API："><a href="#ACL相关的文件API：" class="headerlink" title="ACL相关的文件API："></a>ACL相关的文件API：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyAclEntries</span><span class="params">(Path path, List aclSpec)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAclEntries</span><span class="params">(Path path, List aclSpec)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeDefaultAcl</span><span class="params">(Path path)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAcl</span><span class="params">(Path path)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcl</span><span class="params">(Path path, List aclSpec)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AclStatus <span class="title">getAclStatus</span><span class="params">(Path path)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><h3 id="命令行命令："><a href="#命令行命令：" class="headerlink" title="命令行命令："></a>命令行命令：</h3><p>显示文件和目录的访问控制列表。如果一个目录有默认的ACL，getfacl也可以显示默认的ACL设置。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -getfacl [-R] path</span><br></pre></td></tr></table></figure></p><p>设置文件和目录的ACL<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -setfacl [-R] [-b|-k -m|-x acl_spec path]|[--set acl_spec path]</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-R: Use this option to recursively list ACLs for all files and directories.</span><br><span class="line">-b: Revoke all permissions except the base ACLs for user, groups and others.</span><br><span class="line">-k: Remove the default ACL.</span><br><span class="line">-m: Add new permissions to the ACL with this option. Does not affect existing permissions.</span><br><span class="line">-x: Remove only the ACL specified.</span><br></pre></td></tr></table></figure><p>当ls的权限位输出以+结束时，那么该文件或目录正在启用一个ACL。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls args</span><br></pre></td></tr></table></figure></p><h2 id="实际使用："><a href="#实际使用：" class="headerlink" title="实际使用："></a>实际使用：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"># 默认只有基本的权限控制</span><br><span class="line">hdfs dfs -getfacl /data</span><br><span class="line"># file: /data</span><br><span class="line"># owner: hive</span><br><span class="line"># group: hadoop</span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br><span class="line">#递归显示/data下所有文件的ACL</span><br><span class="line">hdfs dfs -getfacl -R /data</span><br><span class="line"># file: /data</span><br><span class="line"># owner: hive</span><br><span class="line"># group: hadoop</span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line"># file: /data/test.zero</span><br><span class="line"># owner: hive</span><br><span class="line"># group: hadoop</span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line"># file: /data/test.zero.2</span><br><span class="line"># owner: hive</span><br><span class="line"># group: hadoop</span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br><span class="line">#添加一个用户ACL条目</span><br><span class="line">hdfs dfs -setfacl -m user:hbase:rw- /data/test.zero</span><br><span class="line">#添加一个组ACL条目和一个用户ACL条目（如果设置一个未命名条目，可以用user::r-x，group::r-w或者other::r-x等来设置）</span><br><span class="line">hdfs dfs -setfacl -m group:crm:--x,user:app1:rwx /data/test.zero.2</span><br><span class="line">#移除一个ACL条目</span><br><span class="line">hdfs dfs -setfacl -x user:app1 /data/test.zero.2</span><br><span class="line">#“+”已开启了ACL功能</span><br><span class="line">hdfs dfs -ls -R /data</span><br><span class="line">-rw-rwxr--+  <span class="number">3</span> hive hadoop <span class="number">1073741824</span> <span class="number">2014</span>-<span class="number">12</span>-<span class="number">21</span> <span class="number">15</span>:<span class="number">32</span> /data/test.zero</span><br><span class="line">-rw-r-xr--+  <span class="number">3</span> hive hadoop <span class="number">1073741824</span> <span class="number">2014</span>-<span class="number">12</span>-<span class="number">21</span> <span class="number">15</span>:<span class="number">50</span> /data/test.zero.2</span><br><span class="line"># 查看当前ACL，此时mask已经被生成</span><br><span class="line">hdfs dfs -getfacl -R /data/test.zero.2</span><br><span class="line"># file: /data/test.zero.2</span><br><span class="line"># owner: hive</span><br><span class="line"># group: hadoop</span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">group:crm:--x</span><br><span class="line">mask::r-x</span><br><span class="line">other::r--</span><br><span class="line">hdfs dfs -getfacl /data/test.zero.2</span><br><span class="line"># 为data目录添加default权限</span><br><span class="line">hdfs dfs -setfacl -m <span class="keyword">default</span>:user:debugo:rwx /data</span><br><span class="line">hdfs dfs -mkdir /data/d1</span><br><span class="line">hdfs dfs -getfacl /data/d1</span><br><span class="line">user::rwx</span><br><span class="line">user:debugo:rwx#effective:r-x</span><br><span class="line">group::r-x</span><br><span class="line">mask::r-x</span><br><span class="line">other::r-x</span><br><span class="line"><span class="keyword">default</span>:user::rwx</span><br><span class="line"><span class="keyword">default</span>:user:debugo:rwx</span><br><span class="line"><span class="keyword">default</span>:group::r-x</span><br><span class="line"><span class="keyword">default</span>:mask::rwx</span><br><span class="line"><span class="keyword">default</span>:other::r-x</span><br><span class="line">#可以看出，default虽然继承给了d1，但是被mask=r-x所过滤，所以这里还需要设置mask。此时debugo用户的权限可以被正常访问。</span><br><span class="line">hdfs dfs -setfacl -m mask::rwx /data/d1</span><br><span class="line">hdfs dfs -getfacl /data/d1</span><br><span class="line"># file: /data/d1</span><br><span class="line"># owner: hdfs</span><br><span class="line"># group: hadoop</span><br><span class="line">user::rwx</span><br><span class="line">user:debugo:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Hadoop从2.4.0版本开始支持hdfs的ACL，
通俗的讲就是文件访问控制权限
下面对其进行一些测试：
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;unnamed user (file owner)&lt;/th&gt;
&lt;th&gt;文件的拥有者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;unnamed group (file group)&lt;/td&gt;
&lt;td&gt;文件的所属组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;named user&lt;/td&gt;
&lt;td&gt;除了文件的拥有者和拥有组之外，的其它用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;named group&lt;/td&gt;
&lt;td&gt;除了文件的拥有者和拥有组之外，的其它用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mask&lt;/td&gt;
&lt;td&gt;权限掩码，用于过滤named user和named group的权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://gmle.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://gmle.github.io/tags/HDFS/"/>
    
      <category term="ACL" scheme="http://gmle.github.io/tags/ACL/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下配置Hadoop和Spark</title>
    <link href="http://gmle.github.io/2017/05/03/MacOS%E5%AE%89%E8%A3%85Hadoop&amp;Spark/"/>
    <id>http://gmle.github.io/2017/05/03/MacOS安装Hadoop&amp;Spark/</id>
    <published>2017-05-03T06:37:38.000Z</published>
    <updated>2017-05-03T06:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先，准备MacOS环境"><a href="#首先，准备MacOS环境" class="headerlink" title="首先，准备MacOS环境"></a>首先，准备MacOS环境</h2><pre><code>略过Java、Scala、Python的环境安装，从Hadoop和Spark说起</code></pre><a id="more"></a><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><p>安装Hadoop，最简单的安装方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install hadoop</span><br></pre></td></tr></table></figure></p><h4 id="找到安装目录"><a href="#找到安装目录" class="headerlink" title="找到安装目录"></a>找到安装目录</h4><pre><code>安装完成后，找到Hadoop配置文件目录：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec/etc/hadoop</span><br></pre></td></tr></table></figure><h4 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/Cellar/hadoop/2.7.3/libexec/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/Cellar/hadoop/2.7.3/libexec/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/Cellar/hadoop/2.7.3/libexec/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Hadoop environment configs  </span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/libexec  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure><h4 id="格式化HDFS"><a href="#格式化HDFS" class="headerlink" title="格式化HDFS"></a>格式化HDFS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/bin  </span><br><span class="line">./hdfs namenode -format</span><br></pre></td></tr></table></figure><h4 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/hadoop/2.7.3/sbin  </span><br><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure><p>在终端输入 jps 查看java进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1206 DataNode  </span><br><span class="line">1114 NameNode  </span><br><span class="line">1323 SecondaryNameNode</span><br></pre></td></tr></table></figure></p><h2 id="安装Spark"><a href="#安装Spark" class="headerlink" title="安装Spark"></a>安装Spark</h2><p>Spark的安装也是使用 brew<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install apache-spark</span><br></pre></td></tr></table></figure></p><h4 id="找到安装目录-1"><a href="#找到安装目录-1" class="headerlink" title="找到安装目录"></a>找到安装目录</h4><p>找到Spark配置文件目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec/conf</span><br></pre></td></tr></table></figure></p><h4 id="修改spark-env-sh"><a href="#修改spark-env-sh" class="headerlink" title="修改spark-env.sh"></a>修改spark-env.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp spark-env.sh.template spark-env.sh</span><br><span class="line">vi spark-env.sh</span><br><span class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec  </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home</span><br></pre></td></tr></table></figure><h4 id="加入环境变量"><a href="#加入环境变量" class="headerlink" title="加入环境变量"></a>加入环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;SPARK_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure><h4 id="启动Spark"><a href="#启动Spark" class="headerlink" title="启动Spark"></a>启动Spark</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/Cellar/apache-spark/1.6.0/bin  </span><br><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"></span><br><span class="line">6052 Worker</span><br><span class="line">6022 Master</span><br><span class="line">6728 Jps</span><br><span class="line">5546 NameNode</span><br><span class="line">5739 SecondaryNameNode</span><br><span class="line">5947 NodeManager</span><br><span class="line">5630 DataNode</span><br><span class="line">5855 ResourceManager</span><br></pre></td></tr></table></figure><h2 id="配置Pycharm开发spark应用"><a href="#配置Pycharm开发spark应用" class="headerlink" title="配置Pycharm开发spark应用"></a>配置Pycharm开发spark应用</h2><p>打开Pycharm（我的python版本是2.7）<br>新建xxxx，新建类：一个简单的wordcount<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"></span><br><span class="line">logFile = <span class="string">"/Users/admin/Desktop/BackUp"</span></span><br><span class="line">sc = SparkContext(<span class="string">"local"</span>,<span class="string">"Simple App"</span>)</span><br><span class="line">logData = sc.textFile(logFile).cache()</span><br><span class="line"></span><br><span class="line">numAs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'a'</span> <span class="keyword">in</span> s).count()</span><br><span class="line">numBs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'b'</span> <span class="keyword">in</span> s).count()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Lines with a: %i, lines with b: %i"</span>%(numAs, numBs))</span><br></pre></td></tr></table></figure></p><p>F4打开当前可运行代码的配置项<br>Environment Variables 选项填写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PYTHONPATH    /usr/<span class="built_in">local</span>/Cellar/apache-spark/2.1.0/libexec/python</span><br></pre></td></tr></table></figure></p><p>至此，环境完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先，准备MacOS环境&quot;&gt;&lt;a href=&quot;#首先，准备MacOS环境&quot; class=&quot;headerlink&quot; title=&quot;首先，准备MacOS环境&quot;&gt;&lt;/a&gt;首先，准备MacOS环境&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;略过Java、Scala、Python的环境安装，从Hadoop和Spark说起
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="MacOS" scheme="http://gmle.github.io/categories/MacOS/"/>
    
    
      <category term="Hadoop" scheme="http://gmle.github.io/tags/Hadoop/"/>
    
      <category term="MacOS" scheme="http://gmle.github.io/tags/MacOS/"/>
    
      <category term="Spark" scheme="http://gmle.github.io/tags/Spark/"/>
    
  </entry>
  
</feed>
