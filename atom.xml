<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘lele</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gmle.github.io/"/>
  <updated>2018-09-18T09:21:55.941Z</updated>
  <id>http://gmle.github.io/</id>
  
  <author>
    <name>忘了</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>结构体数据对齐详解</title>
    <link href="http://gmle.github.io/2018/09/18/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/"/>
    <id>http://gmle.github.io/2018/09/18/结构体数据对齐/</id>
    <published>2018-09-18T06:46:21.626Z</published>
    <updated>2018-09-18T09:21:55.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据对齐"><a href="#数据对齐" class="headerlink" title="数据对齐"></a>数据对齐</h2><p>结构体数据对齐：指结构体内各个数据的内存地址的对齐<br><strong>在结构体中的第一个成员的首地址等于整个结构体的变量的首地址</strong><br>后面的成员地址随着它声明的首地址和实际占用的字节数递增。<br>而为了总的结构体大小对齐，会在结构体中插入一些没有实际意义的字符填充结构体</p><a id="more"></a><p>通俗点讲，计算机系统对基本类型的数据在内存中存放的位置有限制，系统会要求这些数据的首地址的值是某个数(这个数一般为4或者8的)的倍数，这就是所谓的内存对齐</p><p>而32位机器上默认的对齐模数一般为4，64位机上位8。</p><p>在结构体中，成员数据对齐满足以下规则：</p><ul><li>结构体重的第一个成员的首地址即时结构体变量的首地址。</li><li>结构体中的每一个成员的首地址相对于结构体IDE首地址的偏移量是该成员数据类型大小的整数倍。</li><li>结构体的总大小是对齐模数（对齐模数等于#pragma pack(n)所指定的n与结构体重最大数据类型的成员大小的最小值）的整数倍</li></ul><p>Example：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">One</span>&#123;</span></span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Two</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>struct</th><th>type</th><th>pack(4)</th><th>pack(8)</th></tr></thead><tbody><tr><td>one</td><td>double</td><td>8</td><td>8</td></tr><tr><td></td><td>char</td><td>1+3</td><td>1+3</td></tr><tr><td></td><td>int</td><td>4</td><td>4</td></tr><tr><td>result</td><td></td><td>16</td><td>16</td></tr><tr><td>two</td><td></td><td></td><td></td></tr><tr><td></td><td>char</td><td>1+3</td><td>1+7</td></tr><tr><td></td><td>double</td><td>8</td><td>8</td></tr><tr><td></td><td>int</td><td>4</td><td>4+4</td></tr><tr><td>result</td><td></td><td>16</td><td>24</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据对齐&quot;&gt;&lt;a href=&quot;#数据对齐&quot; class=&quot;headerlink&quot; title=&quot;数据对齐&quot;&gt;&lt;/a&gt;数据对齐&lt;/h2&gt;&lt;p&gt;结构体数据对齐：指结构体内各个数据的内存地址的对齐&lt;br&gt;&lt;strong&gt;在结构体中的第一个成员的首地址等于整个结构体的变量的首地址&lt;/strong&gt;&lt;br&gt;后面的成员地址随着它声明的首地址和实际占用的字节数递增。&lt;br&gt;而为了总的结构体大小对齐，会在结构体中插入一些没有实际意义的字符填充结构体&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>网络分层模型</title>
    <link href="http://gmle.github.io/2018/08/30/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
    <id>http://gmle.github.io/2018/08/30/网络分层模型/</id>
    <published>2018-08-30T01:33:31.120Z</published>
    <updated>2018-09-03T02:04:04.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络分层模型"><a href="#网络分层模型" class="headerlink" title="网络分层模型"></a>网络分层模型</h2><a id="more"></a><h3 id="网络分层OSI七层模型-自底向上-："><a href="#网络分层OSI七层模型-自底向上-：" class="headerlink" title="网络分层OSI七层模型(自底向上)："></a>网络分层OSI七层模型(自底向上)：</h3><ul><li>物理层        - 通信介质：双绞线、光纤等，将模拟信号转换为数字信号的设备<ul><li>网络传输开始发送的为高低电平，八个为一比特位</li></ul></li><li>数据链路层     - 数据校验，定义了网络传输的基本单位：帧</li><li>网络层        - 定义网络，两台机器之间传输的路径选择点到点的传输协议：ip协议，设备：路由器(链接不同网段的桥梁)</li><li>传输层        - 传输数据，TCP、UDP，端到端的传输</li><li>会话层        - 建立会话和保持会话：通过传输层建立数据传输的通道。</li><li>表示层        - 编码、解码，翻译工作</li><li>应用层        - 为客户停工各种应用服务</li></ul><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><pre><code>两个字节的数据发送后还是两个字节吗？</code></pre><p>数据发送方将数据层层打包，将数据发送到对方处接受，然后按照发送方的解包方式进行解包，最终再得到原始数据。</p><p>所以，数据通信过程就是发送方层层打包的过程<br>接收方层层解包的过程</p><h2 id="网络应用程序常见的两种模式"><a href="#网络应用程序常见的两种模式" class="headerlink" title="网络应用程序常见的两种模式"></a>网络应用程序常见的两种模式</h2><p>用户所使用的模式有两种</p><ul><li>C/S模式<ul><li>客户端、服务器模式<ul><li>例：游戏客户端</li></ul></li><li>优点：<ul><li>可以缓存数据、对网络要求不大，不需要频繁访问服务器</li><li>协议选择灵活</li></ul></li><li>缺点：<ul><li>开发周期长</li><li>无法确定程序是否携带木马、病毒等</li></ul></li></ul></li><li>B/S模式<ul><li>浏览器、服务器模式</li><li>优点：<ul><li>开发周期短</li></ul></li><li>缺点：<ul><li>由于浏览器限制，只能选择少数协议</li></ul></li></ul></li></ul><h2 id="大端和小端"><a href="#大端和小端" class="headerlink" title="大端和小端"></a>大端和小端</h2><p>指网络字节序的存储方式。</p><p>查看机器大小端的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">short</span> s;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="keyword">sizeof</span>(<span class="keyword">short</span>)];</span><br><span class="line">&#125; un2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">char</span> c[<span class="keyword">sizeof</span>(<span class="keyword">int</span>)];</span><br><span class="line">&#125; un4;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[%zu][%zu][%zu]\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>), <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试short类型</span></span><br><span class="line">    un2.s = <span class="number">0x0102</span>;<span class="comment">// 0x0102 =? 16*16+2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d\n"</span>, un2.c[<span class="number">0</span>], un2.c[<span class="number">1</span>], un2.s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试int类型</span></span><br><span class="line">    <span class="comment">//un4.s = 0x12345678;</span></span><br><span class="line">    un4.s = <span class="number">0x01020304</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d,%d,%d\n"</span>, un4.c[<span class="number">0</span>], un4.c[<span class="number">1</span>], un4.c[<span class="number">2</span>], un4.c[<span class="number">3</span>], un4.s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-S开发流程"><a href="#C-S开发流程" class="headerlink" title="C/S开发流程"></a>C/S开发流程</h2><ul><li><p>服务端</p><ul><li>创建socket，返回文件描述符用于监听客户端连接：socket</li><li>将文件描述符和ip port进行绑定：bind</li><li>将文件描述符由主动变为被动监听：listen()</li><li>接受一个新的连接，得到一个文件描述符：accept(用于与客户端进行通信)</li><li>接收数据：read、recv<ul><li>若读不到数据则阻塞</li></ul></li><li>发送数据：write、send</li><li>关闭文件描述符：close</li></ul></li><li><p>客户端</p><ul><li>创建socket，返回文件描述符用于与服务端通信：socket</li><li>连接服务端：connect()</li><li>发送数据：write、send</li><li>接收数据：read、recv<ul><li>若读不到数据则阻塞</li></ul></li><li>关闭文件描述符：close</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络分层模型&quot;&gt;&lt;a href=&quot;#网络分层模型&quot; class=&quot;headerlink&quot; title=&quot;网络分层模型&quot;&gt;&lt;/a&gt;网络分层模型&lt;/h2&gt;
    
    </summary>
    
      <category term="网络" scheme="http://gmle.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="linux" scheme="http://gmle.github.io/tags/linux/"/>
    
      <category term="服务器" scheme="http://gmle.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>kill &amp;&amp; kill -9</title>
    <link href="http://gmle.github.io/2018/08/25/kill%E4%B8%8Ekill%20-9%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://gmle.github.io/2018/08/25/kill与kill -9的区别/</id>
    <published>2018-08-25T01:35:51.228Z</published>
    <updated>2018-08-27T11:53:45.404Z</updated>
    
    <content type="html"><![CDATA[<p>测试kill和kill -9信号的区别。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Powered by Jetbrains Clion.</span></span><br><span class="line"><span class="comment">  * Created by 王乐.</span></span><br><span class="line"><span class="comment">  * Date: 2018/8/25.</span></span><br><span class="line"><span class="comment">  * FileName: kill.c.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***** Code is coming! *****//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigHandler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"signo = %d\n"</span>, sig);</span><br><span class="line">    kill(getpid(), SIGKILL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sigset_t</span> signals;</span><br><span class="line"></span><br><span class="line">    signal(SIGINT, sigHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 置空信号集</span></span><br><span class="line">    sigemptyset(&amp;signals);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将所有位置1，与上个函数相反</span></span><br><span class="line">    <span class="comment">// sigfillset(&amp;signals);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加和删除信号。</span></span><br><span class="line">    sigaddset(&amp;signals, SIGINT);</span><br><span class="line">    sigaddset(&amp;signals, SIGQUIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SIGKILL 进程不能被阻塞和拦截，该处阻塞无效</span></span><br><span class="line">    sigaddset(&amp;signals, SIGKILL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合中的信号加入到阻塞信号集中</span></span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;signals, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sigset_t</span> pending;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取未决信号集</span></span><br><span class="line">        sigemptyset(&amp;pending);</span><br><span class="line">        sigpending(&amp;pending);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sigismember(&amp;pending, i) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j++ % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sigprocmask(SIG_UNBLOCK, &amp;signals, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行<br>按CTRL-C可以发送信号SIGINT。<br>按CTRL-\可以发送信号SIGQUIT。</p><p>发送完成可直接捕获到这两个信号。<br>我们可以使用man手册查看信号部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 7 signal</span><br></pre></td></tr></table></figure><p>其中有一句话：<br> The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.</p><p> 表示SIGKILL和SIGSTOP信号不能被捕获。</p><p> 再查看信号的详细信息：<br>  SIGKILL       9       Term    Kill signal<br>  SIGTERM      15       Term    Termination signal</p><p>  不难发现 信号9是kill信号，直接杀死该进程，而kill默认发送的信号SIGTERM则是kill命令(例：kill 1234)则默认发送15号信号。</p><p>  15号信号可以被捕获到，而我们的程序捕获到15号信号之后可以做一些回收资源、打印日志等操作。<br>  但当接收到信号9的时候，则直接被杀死，不会来得及释放内存，打印日志等。</p><p>  综合来看，我们应尽量使用kill而不是kill -9.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试kill和kill -9信号的区别。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
      <category term="Linux" scheme="http://gmle.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>for与while循环</title>
    <link href="http://gmle.github.io/2018/07/30/for&amp;while/"/>
    <id>http://gmle.github.io/2018/07/30/for&amp;while/</id>
    <published>2018-07-30T12:02:11.266Z</published>
    <updated>2018-07-30T12:04:48.763Z</updated>
    
    <content type="html"><![CDATA[<pre><code>C/C++中for循环和while循环的使用时机</code></pre><a id="more"></a><p>在循环次数已知的情况下，显然使用for循环更加合适，而且更为简洁<br>而循环次数未知时，使用while循环。用特定条件控制while循环是否继续执行，循环体中的条件语句可能会影响循环判定条件发生变化。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;C/C++中for循环和while循环的使用时机
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>范围for语句</title>
    <link href="http://gmle.github.io/2018/07/21/%E8%8C%83%E5%9B%B4%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>http://gmle.github.io/2018/07/21/范围循环语句/</id>
    <published>2018-07-21T13:02:16.969Z</published>
    <updated>2018-07-21T13:55:41.669Z</updated>
    
    <content type="html"><![CDATA[<p>范围for语句是C++11的特性，这种语句可以遍历容器或其他序列的所有元素。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 范围for语句语法：</span></span><br><span class="line">    <span class="comment">// 范围变量必须是引用类型，这样才能对元素执行写操作。</span></span><br><span class="line">    <span class="comment">// 对于arr中的每个元素 ：</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:arr)&#123;  </span><br><span class="line">        i *= <span class="number">2</span>; <span class="comment">// 将arr中的每个元素值翻倍。</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n®----------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:arr)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;范围for语句是C++11的特性，这种语句可以遍历容器或其他序列的所有元素。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>运算符重载</title>
    <link href="http://gmle.github.io/2018/07/21/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://gmle.github.io/2018/07/21/运算符重载/</id>
    <published>2018-07-21T11:42:34.903Z</published>
    <updated>2018-07-21T13:55:56.456Z</updated>
    
    <content type="html"><![CDATA[<p>运算符重载：</p><ul><li>对于系统内置的数据类型，编译器知道如何运算。</li><li>对于自定义的数据类型则不会运算了。</li><li>利用运算符重载，可以让符号有新的含义。</li></ul><a id="more"></a><p>Example: + 运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m_A;</span><br><span class="line">    <span class="keyword">int</span> m_B;</span><br><span class="line"></span><br><span class="line">    Person() : m_A(), m_B() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : m_A(a), m_B(b) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Person <span class="keyword">operator</span>+(Person &amp;person) &#123;</span><br><span class="line">        Person tmp;</span><br><span class="line">        tmp.m_A = <span class="keyword">this</span>-&gt;m_A + person.m_A;</span><br><span class="line">        tmp.m_B = <span class="keyword">this</span>-&gt;m_B + person.m_B;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person <span class="keyword">operator</span>+(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        Person temp;</span><br><span class="line">        temp.m_A = <span class="keyword">this</span>-&gt;m_A + num;</span><br><span class="line">        temp.m_B = <span class="keyword">this</span>-&gt;m_B + num;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Person p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">":::"</span> &lt;&lt; p3.m_B;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Person p3 = p1 + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">":::"</span> &lt;&lt; p3.m_B;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a+b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line">    test03();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example：&lt;&lt; 左移运算符重载<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getM_A</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setM_A</span><span class="params">(<span class="keyword">int</span> m_A)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getM_B</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setM_B</span><span class="params">(<span class="keyword">int</span> m_B)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Person &amp;person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_A;</span><br><span class="line">    <span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::getM_A() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m_A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Person::setM_A(<span class="keyword">int</span> m_A) &#123;</span><br><span class="line">    Person::m_A = m_A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::getM_B() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m_B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Person::setM_B(<span class="keyword">int</span> m_B) &#123;</span><br><span class="line">    Person::m_B = m_B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="keyword">const</span> Person &amp;person) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">"m_A: "</span> &lt;&lt; person.getM_A() &lt;&lt; <span class="string">" m_B: "</span> &lt;&lt; person.getM_B();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person p1;</span><br><span class="line"></span><br><span class="line">    p1.setM_A(<span class="number">10</span>);</span><br><span class="line">    p1.setM_B(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Example: ++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInter</span> &#123;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, MyInter &amp;inter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyInter() &#123;</span><br><span class="line">        m_Num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置++重载</span></span><br><span class="line">    MyInter &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Num++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置++重载</span></span><br><span class="line">    MyInter <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line"></span><br><span class="line">        MyInter tmp = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Num++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, MyInter &amp;inter) &#123;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; inter.m_Num;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MyInter inter;</span><br><span class="line"></span><br><span class="line">    inter++;</span><br><span class="line"></span><br><span class="line">    ++inter;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (inter);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example：指针运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Person的有参构造调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"年龄为： "</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Person() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Person的析构调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPoint</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SmartPoint</span><span class="params">(Person *person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载-&gt;运算符</span></span><br><span class="line">    Person *<span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载 * 运算符</span></span><br><span class="line">    Person &amp;<span class="keyword">operator</span>*() &#123;</span><br><span class="line">        <span class="keyword">return</span> *m_person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~SmartPoint() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_person) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_person;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_person = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Person *m_person;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Person * p = new Person(18);</span></span><br><span class="line">    <span class="comment">//(*p).showAge();</span></span><br><span class="line">    <span class="comment">//p-&gt;showAge();</span></span><br><span class="line">    <span class="comment">//delete p;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用智能指针 管理 new出来的person的释放操作</span></span><br><span class="line">    SmartPoint sp(new Person(18));</span><br><span class="line"></span><br><span class="line"><span class="comment">//    sp-&gt;showAge(); // 本质sp-&gt;-&gt;showAge(); 编译器简化为 sp-&gt;showAge();</span></span><br><span class="line"></span><br><span class="line">    sp.m_person-&gt;showAge();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    (*sp).showAge();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example：赋值运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器 默认给一个类4个函数   默认构造   析构   拷贝构造 （值拷贝）  operator= (值拷贝)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="keyword">char</span> *name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(name) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;m_Name, name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载 =</span></span><br><span class="line">    Person &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Person &amp;p) &#123;</span><br><span class="line">        <span class="comment">//先判断原来堆区释放有内容，如果有先释放</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_Name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(p.m_Name) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;m_Name, p.m_Name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = p.m_Age;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    Person(<span class="keyword">const</span> Person &amp;p) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(p.m_Name) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;m_Name, p.m_Name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = p.m_Age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Person() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;m_Name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"Tom"</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"Jerry"</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line">    p2 = p1;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">""</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    p3 = p2 = p1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Person p4 = p3;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"p1姓名： "</span> &lt;&lt; p1.m_Name &lt;&lt; <span class="string">"  p1年龄： "</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"p2姓名： "</span> &lt;&lt; p2.m_Name &lt;&lt; <span class="string">"  p2年龄： "</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"p3姓名： "</span> &lt;&lt; p3.m_Name &lt;&lt; <span class="string">" p3年龄： "</span> &lt;&lt; p3.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*int a = 10;</span></span><br><span class="line"><span class="comment">    int b = 20;</span></span><br><span class="line"><span class="comment">    int c;</span></span><br><span class="line"><span class="comment">    c = a = b;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; " b = " &lt;&lt; b &lt;&lt; " c = " &lt;&lt; c &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运算符重载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于系统内置的数据类型，编译器知道如何运算。&lt;/li&gt;
&lt;li&gt;对于自定义的数据类型则不会运算了。&lt;/li&gt;
&lt;li&gt;利用运算符重载，可以让符号有新的含义。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>构造函数的初始化列表</title>
    <link href="http://gmle.github.io/2018/07/21/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
    <id>http://gmle.github.io/2018/07/21/构造函数的初始化列表/</id>
    <published>2018-07-21T11:38:22.516Z</published>
    <updated>2018-07-21T13:55:29.003Z</updated>
    
    <content type="html"><![CDATA[<p>初始化列表语法。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数名称后  ： 属性(值), 属性（值）...</span></span><br><span class="line">    Person(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) : m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m_A;</span><br><span class="line">    <span class="keyword">int</span> m_B;</span><br><span class="line">    <span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m_A = "</span> &lt;&lt; p.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m_B = "</span> &lt;&lt; p.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m_C = "</span> &lt;&lt; p.m_C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初始化列表语法。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>构造、析构。拷贝构造</title>
    <link href="http://gmle.github.io/2018/07/21/%E6%9E%84%E9%80%A0%E3%80%81%E6%9E%90%E6%9E%84%E3%80%81%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0/"/>
    <id>http://gmle.github.io/2018/07/21/构造、析构、拷贝构造/</id>
    <published>2018-07-21T11:35:00.189Z</published>
    <updated>2018-07-21T13:55:17.361Z</updated>
    
    <content type="html"><![CDATA[<p>构造函数、析构函数、拷贝构造函数</p><p>构造函数：</p><ul><li>构造函数在函数被调用的时候调用并初始化。</li><li>构造函数必须要声明在全局作用域。</li><li>没有返回值，也不需要写void</li><li>函数名与类名相同</li><li>可以有参数，可以发生重载</li><li>构造函数由编译器自动调用且只调用一次，无需手动调用。</li></ul><a id="more"></a><p>构造函数分类：</p><ul><li>按照参数分类：无参构造（默认构造函数）和有参构造。</li><li>按照类型分类：普通构造函数，拷贝构造函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数：</span></span><br><span class="line"><span class="comment">     *  构造函数在函数被调用的时候调用并初始化。</span></span><br><span class="line"><span class="comment">     *  构造函数必须要声明在全局作用域。</span></span><br><span class="line"><span class="comment">     *  没有返回值，也不需要写void</span></span><br><span class="line"><span class="comment">     *  函数名与类名相同</span></span><br><span class="line"><span class="comment">     *  可以有参数，可以发生重载</span></span><br><span class="line"><span class="comment">     *  构造函数由编译器自动调用且只调用一次，无需手动调用。</span></span><br><span class="line"><span class="comment">     * 构造函数分类：</span></span><br><span class="line"><span class="comment">     *  按照参数分类：无参构造（默认构造函数）和有参构造。</span></span><br><span class="line"><span class="comment">     *  按照类型分类：普通构造函数，拷贝构造函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Person() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hei二狗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">        _age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hei有参二狗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝构造</span></span><br><span class="line"><span class="comment">     * 1、用已有对象初始化新的对象。</span></span><br><span class="line"><span class="comment">     * 2、值传递的方式给函数参数传值。</span></span><br><span class="line"><span class="comment">     * 3、以值的方式返回局部对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Person(<span class="keyword">const</span> Person &amp;person) &#123;</span><br><span class="line">        _age = person._age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 析构函数</span></span><br><span class="line"><span class="comment">     * 没有返回值，不需要写void</span></span><br><span class="line"><span class="comment">     * 函数名与类名相同 函数名前加 ~</span></span><br><span class="line"><span class="comment">     * 不可以有参数，不可以重载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ~Person() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ha二狗"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_age</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_age</span><span class="params">(<span class="keyword">int</span> _age)</span> </span>&#123;</span><br><span class="line">        Person::_age = _age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">person</span><span class="params">(<span class="number">19</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名对象：特点：当执行完该函数后立即释放。</span></span><br><span class="line">    <span class="comment">// 不要用拷贝构造函数初始化匿名对象。</span></span><br><span class="line">    Person(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    Person person1 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; person.get_age() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main03</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;构造函数、析构函数、拷贝构造函数&lt;/p&gt;
&lt;p&gt;构造函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数在函数被调用的时候调用并初始化。&lt;/li&gt;
&lt;li&gt;构造函数必须要声明在全局作用域。&lt;/li&gt;
&lt;li&gt;没有返回值，也不需要写void&lt;/li&gt;
&lt;li&gt;函数名与类名相同&lt;/li&gt;
&lt;li&gt;可以有参数，可以发生重载&lt;/li&gt;
&lt;li&gt;构造函数由编译器自动调用且只调用一次，无需手动调用。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>友元函数</title>
    <link href="http://gmle.github.io/2018/07/21/%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0/"/>
    <id>http://gmle.github.io/2018/07/21/友元函数/</id>
    <published>2018-07-21T11:29:27.206Z</published>
    <updated>2018-07-21T13:55:00.073Z</updated>
    
    <content type="html"><![CDATA[<p>友元函数：</p><ul><li>为在该类中提供一个对外访问的接口</li><li>友元函数不属于该类的成员函数</li><li>友元函数是定义在类外的普通函数，只是在类中声明该函数可以直接访问类中的private或者protected成员</li></ul><a id="more"></a><p>使用注意：</p><ul><li>类中通过使用关键字friend 来修饰友元函数，但该函数并不是类的成员函数，其声明可以放在类的私有部分，也可放在共有部分。友元函数的定义在类体外实现，不需要加类限定。</li><li>一个类中的成员函数可以是另外一个类的友元函数，而且一个函数可以是多个类友元函数。</li><li>友元函数可以访问类中的私有成员和其他数据，但是访问不可直接使用数据成员，需要通过对对象进行引用。</li><li>友元函数在调用上同一般函数一样，不必通过对对象进行引用。</li></ul><p>例子：好基友进卧室。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Gay</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Home(<span class="built_in">string</span> sitting, <span class="built_in">string</span> bed);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> SittingRoom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> BedRoom;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Home::Home() &#123;</span></span><br><span class="line"><span class="comment">//    this-&gt;setBedRoom("卧室");</span></span><br><span class="line"><span class="comment">//    this-&gt;setSittingRoom("客厅");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gay</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Gay(Home* h);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Home *home&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Home::Home(<span class="built_in">string</span> sitting, <span class="built_in">string</span> bed) &#123;</span><br><span class="line"><span class="comment">//    this-&gt;SittingRoom = sitting;</span></span><br><span class="line"><span class="comment">//    this-&gt;BedRoom = bed;</span></span><br><span class="line"></span><br><span class="line">    Home::BedRoom = bed;</span><br><span class="line">    Home::SittingRoom = sitting;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Gay::Gay(Home* h) &#123;</span><br><span class="line"><span class="comment">//    this-&gt;home = new Home;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;home = h;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    this-&gt;home = &amp;h;</span></span><br><span class="line"><span class="comment">//        this-&gt;home = &amp;h;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Gay::visit() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Gay vising "</span> &lt;&lt; <span class="keyword">this</span>-&gt;home-&gt;SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Gay vising "</span> &lt;&lt; <span class="keyword">this</span>-&gt;home-&gt;BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Home <span class="title">hh</span><span class="params">(<span class="string">"客厅"</span>,<span class="string">"卧室"</span>)</span></span>;</span><br><span class="line">    <span class="function">Gay <span class="title">gay</span><span class="params">(&amp;hh)</span></span>;</span><br><span class="line">    gay.visit();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;友元函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为在该类中提供一个对外访问的接口&lt;/li&gt;
&lt;li&gt;友元函数不属于该类的成员函数&lt;/li&gt;
&lt;li&gt;友元函数是定义在类外的普通函数，只是在类中声明该函数可以直接访问类中的private或者protected成员&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>设计模式：单例</title>
    <link href="http://gmle.github.io/2018/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://gmle.github.io/2018/07/21/设计模式：单例模式/</id>
    <published>2018-07-21T11:15:24.799Z</published>
    <updated>2018-07-21T13:55:50.724Z</updated>
    
    <content type="html"><![CDATA[<p>单例设计模式的设计思想：<br>    在一些情形下，保持类的实例只有一个非常重要。例如：一个表示文件系统的Class。一个操作系统一定是只有一个文件系统的，因此，我们希望表示文件系统的类实例有且仅有一个。单例模式 是设计模式中一种实现这一类需求的设计方法。</p><a id="more"></a><p>该代码线程不安全。<br>线程安全的两个操作：</p><ul><li>对象在类外创建。</li><li>加锁。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton *<span class="title">GetInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_pInstance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_pInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printTest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;test)</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; test &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现一个内嵌垃圾回收类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CGarbo</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        ~CGarbo() &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"销毁"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">delete</span> Singleton::m_pInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ~Singleton()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1123123"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">//delete m_pInstance;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数私有化，防止创建多个对象。</span></span><br><span class="line">    Singleton() : count(<span class="number">0</span>) &#123;</span><br><span class="line">        setCount(<span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数私有化，防止在堆区创建对象。</span></span><br><span class="line">    Singleton(Singleton <span class="keyword">const</span> &amp;) : count() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Singleton *m_pInstance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton *Singleton::m_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Singleton::getCount() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::setCount(<span class="keyword">int</span> count) &#123;</span><br><span class="line">    Singleton::count = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton::CGarbo Garbo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Singleton *s1 = Singleton::GetInstance();</span><br><span class="line"></span><br><span class="line">    s1-&gt;printTest(<span class="string">"1"</span>);</span><br><span class="line">    s1-&gt;printTest(<span class="string">"2"</span>);</span><br><span class="line">    s1-&gt;printTest(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"s1:count"</span> &lt;&lt; s1-&gt;getCount() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Singleton *s2 = Singleton::GetInstance();</span><br><span class="line"></span><br><span class="line">    s2-&gt;printTest(<span class="string">"4"</span>);</span><br><span class="line">    s2-&gt;printTest(<span class="string">"5"</span>);</span><br><span class="line">    s2-&gt;printTest(<span class="string">"6"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"s2:count"</span> &lt;&lt; s2-&gt;getCount() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例设计模式的设计思想：&lt;br&gt;    在一些情形下，保持类的实例只有一个非常重要。例如：一个表示文件系统的Class。一个操作系统一定是只有一个文件系统的，因此，我们希望表示文件系统的类实例有且仅有一个。单例模式 是设计模式中一种实现这一类需求的设计方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="http://gmle.github.io/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="http://gmle.github.io/tags/Cpp/"/>
    
      <category term="设计模式" scheme="http://gmle.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://gmle.github.io/2018/07/12/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://gmle.github.io/2018/07/12/二叉树/</id>
    <published>2018-07-12T13:36:40.536Z</published>
    <updated>2018-07-12T13:45:06.505Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>n（n≥0）个结点的有限集合，由一个根结点以及两棵互不相交的、分别称为左子树和右子树的二叉树组成。</p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>一对二</p><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ul><li>每个结点最多只有两棵子树（不存在度大于2的结点）；</li><li>左子树和右子树次序不能颠倒（有序树）。</li></ul><h2 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h2><p>二叉树的遍历</p><ul><li>DLR — 先序遍历，即先根再左再右</li><li>LDR — 中序遍历，即先左再根再右</li><li>LRD — 后序遍历，即先左再右再根</li></ul><p>“先、中、后”的意思是指访问的结点D是先于子树出现还是后于子树出现。<br>从递归的角度看，这三种算法是完全相同的，或者说这三种遍历算法的访问路径是相同的，只是访问结点的时机不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">LeftChirld</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">RightChirld</span>;</span></span><br><span class="line">&#125; BubaryNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(BubaryNode *pBINARYNODE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BubaryNode nodeA = &#123;<span class="string">'A'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeB = &#123;<span class="string">'B'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeC = &#123;<span class="string">'C'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeD = &#123;<span class="string">'D'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeE = &#123;<span class="string">'E'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeF = &#123;<span class="string">'F'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeG = &#123;<span class="string">'G'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BubaryNode nodeH = &#123;<span class="string">'H'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立关系</span></span><br><span class="line">    nodeA.LeftChirld = &amp;nodeB;</span><br><span class="line">    nodeA.RightChirld = &amp;nodeF;</span><br><span class="line">    nodeB.RightChirld = &amp;nodeC;</span><br><span class="line">    nodeC.LeftChirld = &amp;nodeD;</span><br><span class="line">    nodeC.RightChirld = &amp;nodeE;</span><br><span class="line">    nodeF.RightChirld = &amp;nodeG;</span><br><span class="line">    nodeG.LeftChirld = &amp;nodeH;</span><br><span class="line"></span><br><span class="line">    recursion(&amp;nodeA);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树递归</span></span><br><span class="line"><span class="comment"> * @param rootNode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(BubaryNode *rootNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rootNode == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先序遍历 ：先根，再左，再右。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c "</span>, rootNode-&gt;ch);</span><br><span class="line">    recursion(rootNode-&gt;LeftChirld);</span><br><span class="line">    recursion(rootNode-&gt;RightChirld);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历 ：先左，再右，再根。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    recursion(rootNode-&gt;LeftChirld);</span></span><br><span class="line"><span class="comment">    printf("%c ", rootNode-&gt;ch);</span></span><br><span class="line"><span class="comment">    recursion(rootNode-&gt;RightChirld);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历 ： 先左，再右，再根。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    recursion(rootNode-&gt;LeftChirld);</span></span><br><span class="line"><span class="comment">    recursion(rootNode-&gt;RightChirld);</span></span><br><span class="line"><span class="comment">    printf("%c ", rootNode-&gt;ch);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的使用"><a href="#二叉树的使用" class="headerlink" title="二叉树的使用"></a>二叉树的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">LeftChirld</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">BINARYNODE</span> *<span class="title">RightChirld</span>;</span></span><br><span class="line">&#125; BinaryNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算二叉树高度：左子树与右子树同时为NULL，则为叶子</span></span><br><span class="line"><span class="comment"> * @param rootnode</span></span><br><span class="line"><span class="comment"> * @param p</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calLeaves</span><span class="params">(BinaryNode *rootnode, <span class="keyword">int</span> *p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rootnode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rootnode-&gt;LeftChirld == <span class="literal">NULL</span> &amp;&amp; rootnode-&gt;RightChirld == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        (*p)++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    calLeaves(rootnode-&gt;LeftChirld, p);</span><br><span class="line">    calLeaves(rootnode-&gt;RightChirld, p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树遍历</span></span><br><span class="line"><span class="comment"> * @param rootNode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(BinaryNode *rootNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rootNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c "</span>, rootNode-&gt;ch);</span><br><span class="line">    recursion(rootNode-&gt;LeftChirld);</span><br><span class="line">    recursion(rootNode-&gt;RightChirld);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinaryTreeHeight</span><span class="params">(BinaryNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = BinaryTreeHeight(root-&gt;LeftChirld);</span><br><span class="line">    <span class="keyword">int</span> right = BinaryTreeHeight(root-&gt;RightChirld);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left &gt; right ? left + <span class="number">1</span> : right + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝二叉树</span></span><br><span class="line"><span class="comment"> * @param root</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> BinaryNode *<span class="title">copyTree</span><span class="params">(BinaryNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BinaryNode *leftChild = copyTree(root-&gt;LeftChirld);</span><br><span class="line">    BinaryNode *rightChild = copyTree(root-&gt;RightChirld);</span><br><span class="line"></span><br><span class="line">    BinaryNode *newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinaryNode));</span><br><span class="line">    newNode-&gt;ch = root-&gt;ch;</span><br><span class="line"></span><br><span class="line">    newNode-&gt;LeftChirld = leftChild;</span><br><span class="line">    newNode-&gt;RightChirld = rightChild;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树的内存释放</span></span><br><span class="line"><span class="comment"> * @param root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">freeTree</span><span class="params">(BinaryNode *root)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    freeTree(root-&gt;LeftChirld);</span><br><span class="line">    freeTree(root-&gt;RightChirld);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Free:%c\n"</span>, root-&gt;ch);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    BinaryNode nodeA = &#123;<span class="string">'A'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeB = &#123;<span class="string">'B'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeC = &#123;<span class="string">'C'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeD = &#123;<span class="string">'D'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeE = &#123;<span class="string">'E'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeF = &#123;<span class="string">'F'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeG = &#123;<span class="string">'G'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    BinaryNode nodeH = &#123;<span class="string">'H'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立关系</span></span><br><span class="line">    nodeA.LeftChirld = &amp;nodeB;</span><br><span class="line">    nodeA.RightChirld = &amp;nodeF;</span><br><span class="line">    nodeB.RightChirld = &amp;nodeC;</span><br><span class="line">    nodeC.LeftChirld = &amp;nodeD;</span><br><span class="line">    nodeC.RightChirld = &amp;nodeE;</span><br><span class="line">    nodeF.RightChirld = &amp;nodeG;</span><br><span class="line">    nodeG.LeftChirld = &amp;nodeH;</span><br><span class="line"></span><br><span class="line">    calLeaves(&amp;nodeA, &amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"二叉树叶子数量：%d\n"</span>, num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    BinaryNode *newTree = copyTree(&amp;nodeA);</span><br><span class="line">    recursion(newTree);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n二叉树高度：%d\n"</span>, BinaryTreeHeight(&amp;nodeA));</span><br><span class="line"></span><br><span class="line">    freeTree(newTree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">":::%c\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">char</span>) newTree-&gt;RightChirld-&gt;RightChirld);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>队列的链表存储结构</title>
    <link href="http://gmle.github.io/2018/07/12/%E9%98%9F%E5%88%97/"/>
    <id>http://gmle.github.io/2018/07/12/队列/</id>
    <published>2018-07-12T13:27:23.985Z</published>
    <updated>2018-07-21T13:55:59.396Z</updated>
    
    <content type="html"><![CDATA[<p>队列的链表存储结构实现</p><a id="more"></a><p>FILE1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LINKQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LINKQUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">QUEUENODE</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QUEUENODE</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QueueNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LISTQUEUE</span>&#123;</span></span><br><span class="line">    QueueNode header;</span><br><span class="line">    <span class="keyword">int</span> ListQueueSize;</span><br><span class="line"></span><br><span class="line">    QueueNode *tail;</span><br><span class="line"></span><br><span class="line">&#125; ListQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function">LinkQueue <span class="title">init_LinkQueue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_LinkQueue</span><span class="params">(LinkQueue q, <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop__LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">front_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列尾</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">back_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory_LinkQueue</span><span class="params">(LinkQueue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_LINKQUEUE_H</span></span></span><br></pre></td></tr></table></figure><p>FILE2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linkQueue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function">LinkQueue <span class="title">init_LinkQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListQueue *<span class="built_in">queue</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListQueue));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>-&gt;header.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;ListQueueSize = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;tail = &amp;<span class="built_in">queue</span>-&gt;header;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_LinkQueue</span><span class="params">(LinkQueue lq, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lq == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListQueue *<span class="built_in">queue</span> = lq;</span><br><span class="line">    QueueNode *qNode = data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尾插</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;tail-&gt;next = qNode;</span><br><span class="line">    qNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>-&gt;tail = qNode;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>-&gt;ListQueueSize++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop__LinkQueue</span><span class="params">(LinkQueue q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListQueue *listQueue = q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有要删除的元素</span></span><br><span class="line">    <span class="keyword">if</span> (listQueue-&gt;ListQueueSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果只有一个节点，则将尾部节点指向头节点。</span></span><br><span class="line">    <span class="keyword">if</span> (listQueue-&gt;ListQueueSize == <span class="number">1</span>) &#123;</span><br><span class="line">        listQueue-&gt;header.next = <span class="literal">NULL</span>;</span><br><span class="line">        listQueue-&gt;tail = &amp;listQueue-&gt;header;</span><br><span class="line">        listQueue-&gt;ListQueueSize--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大于一个节点的情况</span></span><br><span class="line">    QueueNode *headNode = listQueue-&gt;header.next;</span><br><span class="line"></span><br><span class="line">    listQueue-&gt;header.next = headNode-&gt;next;</span><br><span class="line"></span><br><span class="line">    listQueue-&gt;ListQueueSize--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_LinkQueue</span><span class="params">(LinkQueue q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListQueue *<span class="built_in">queue</span> = q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;ListQueueSize;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_LinkQueue</span><span class="params">(LinkQueue q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListQueue *<span class="built_in">queue</span> = q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;ListQueueSize == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">front_LinkQueue</span><span class="params">(LinkQueue q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListQueue *<span class="built_in">queue</span> = q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;header.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">back_LinkQueue</span><span class="params">(LinkQueue q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListQueue *<span class="built_in">queue</span> = q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;tail;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory_LinkQueue</span><span class="params">(LinkQueue q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FILE3:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linkQueue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *node;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化队列</span></span><br><span class="line">    LinkQueue myQueue = init_LinkQueue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p1</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"aaa"</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p2</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"bbb"</span>, <span class="number">20</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p3</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ccc"</span>, <span class="number">30</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p4</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ddd"</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    push_LinkQueue(myQueue, &amp;p1);</span><br><span class="line">    push_LinkQueue(myQueue, &amp;p2);</span><br><span class="line">    push_LinkQueue(myQueue, &amp;p3);</span><br><span class="line">    push_LinkQueue(myQueue, &amp;p4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"队列大小为：%d\n"</span>, size_LinkQueue(myQueue));</span><br><span class="line">    <span class="keyword">while</span> (isEmpty_LinkQueue(myQueue) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//访问队头</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">pFront</span> = <span class="title">front_LinkQueue</span>(<span class="title">myQueue</span>);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"链式存储::队头元素 -- 姓名：%s  年龄： %d\n"</span>, pFront-&gt;name, pFront-&gt;age);</span><br><span class="line">        <span class="comment">//访问队尾</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">pBack</span> = <span class="title">back_LinkQueue</span>(<span class="title">myQueue</span>);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"链式存储::队尾元素 -- 姓名：%s  年龄： %d\n"</span>, pBack-&gt;name, pBack-&gt;age);</span><br><span class="line">        <span class="comment">//出队</span></span><br><span class="line">        pop__LinkQueue(myQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"队列大小为：%d\n"</span>, size_LinkQueue(myQueue));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁队列</span></span><br><span class="line">    destory_LinkQueue(myQueue);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;队列的链表存储结构实现&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://gmle.github.io/2018/07/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://gmle.github.io/2018/07/12/插入排序/</id>
    <published>2018-07-12T13:24:43.925Z</published>
    <updated>2018-07-12T13:27:16.043Z</updated>
    
    <content type="html"><![CDATA[<p>插入排序实现思路：</p><ul><li>从I = 1位置开始  做外层循环 </li><li>判断 如果  I -1 &gt; I 将i指向的数据缓存</li><li>j开始做内侧循环，找到要插入的位置 将缓存数据插入到 j +1位置上</li><li>i++</li></ul><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序.</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param len</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]; j--) &#123;</span><br><span class="line">                <span class="comment">//数据后移</span></span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    insertSort(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    assert(arr[<span class="number">0</span>]==<span class="number">0</span>);</span><br><span class="line">    assert(arr[<span class="number">1</span>]==<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;插入排序实现思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从I = 1位置开始  做外层循环 &lt;/li&gt;
&lt;li&gt;判断 如果  I -1 &amp;gt; I 将i指向的数据缓存&lt;/li&gt;
&lt;li&gt;j开始做内侧循环，找到要插入的位置 将缓存数据插入到 j +1位置上&lt;/li&gt;
&lt;li&gt;i++&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>利用栈规则做就近括号匹配</title>
    <link href="http://gmle.github.io/2018/07/11/%E5%88%A9%E7%94%A8%E6%A0%88%E8%A7%84%E5%88%99%E5%81%9A%E5%B0%B1%E8%BF%91%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>http://gmle.github.io/2018/07/11/利用栈规则做就近括号匹配/</id>
    <published>2018-07-11T13:50:43.276Z</published>
    <updated>2018-07-11T13:53:48.751Z</updated>
    
    <content type="html"><![CDATA[<p>利用栈规则做就近括号匹配<br><a id="more"></a></p><p>从第一个字符开始扫描<br>当遇见普通字符时忽略，<br>当遇见左括号时压入栈中<br>当遇见右括号时从栈中弹出栈顶符号，并进行匹配<br>匹配成功：继续读入下一个字符<br>匹配失败：立即停止，并报错<br>结束：<br>成功: 所有字符扫描完毕，且栈为空<br>失败：匹配失败或所有字符扫描完毕但栈非空</p><p>FILE1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SEQSTACK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SEQSTACK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *data[MAX];  <span class="comment">//栈的数组</span></span><br><span class="line">    <span class="keyword">int</span> m_Size; <span class="comment">//栈大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">SeqStack <span class="title">init_SeqStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_SEQSTACK_H</span></span></span><br></pre></td></tr></table></figure><p>FILE2:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SeqStack.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">SeqStack <span class="title">init_SeqStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">myStack</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">SStack</span>));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (myStack == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化数组</span></span><br><span class="line">    <span class="built_in">memset</span>(myStack-&gt;data, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) * MAX);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化栈大小</span></span><br><span class="line">    myStack-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> myStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//入栈本质  --- 数组尾插</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;data[mystack-&gt;m_Size] = data;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;m_Size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//出栈本质  --- 数组尾删</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;data[mystack-&gt;m_Size - <span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    mystack-&gt;m_Size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mystack-&gt;data[mystack-&gt;m_Size - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回栈大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mystack-&gt;m_Size;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回-1代表真  空栈</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SStack</span> *<span class="title">mystack</span> = <span class="title">stack</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mystack-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//返回0 代表 不是空栈</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_SeqStack</span><span class="params">(SeqStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">stack</span> = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FILE3:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLeft</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">'('</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isRight</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"123*(was)s(sd)sdb(fs())())))(()"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p = str;</span><br><span class="line"></span><br><span class="line">    SeqStack *<span class="built_in">stack</span> = init_SeqStack();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="string">'\0'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是左括号，入栈</span></span><br><span class="line">        <span class="keyword">if</span> (isLeft(*p)) &#123;</span><br><span class="line">            push_SeqStack(<span class="built_in">stack</span>, p);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isRight(*p)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size_SeqStack(<span class="built_in">stack</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pop_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error(str, <span class="string">"Error!"</span>, p);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (size_SeqStack(<span class="built_in">stack</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        error(str, <span class="string">"Error"</span>, top_SeqStack(<span class="built_in">stack</span>));</span><br><span class="line">        pop_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destroy_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> b = isEmpty_SeqStack(<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n=-=-=-=-=-=-=-====-=-=\n%d\n"</span>,b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">char</span> *<span class="built_in">string</span>, <span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = (<span class="keyword">int</span>) (p - str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用栈规则做就近括号匹配&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>链表的开发实现</title>
    <link href="http://gmle.github.io/2018/07/11/C%E8%AF%AD%E8%A8%80%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>http://gmle.github.io/2018/07/11/C语言的链表/</id>
    <published>2018-07-11T13:20:20.691Z</published>
    <updated>2018-07-12T13:28:30.357Z</updated>
    
    <content type="html"><![CDATA[<p>链表的开发实现<br><a id="more"></a></p><h2 id="普通实现"><a href="#普通实现" class="headerlink" title="普通实现"></a>普通实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKNODE</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKNODE</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125; LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKLIST</span> &#123;</span></span><br><span class="line">    LinkNode linkHeader;</span><br><span class="line">    <span class="keyword">int</span> linkNodeSize;</span><br><span class="line">&#125; LinkLists;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">LINKLIST_INIT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkLists *<span class="built_in">list</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkLists));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>-&gt;linkHeader.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;linkNodeSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKLIST_INSERT</span><span class="params">(LinkList <span class="built_in">list</span>, <span class="keyword">int</span> pos, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkLists *lists = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; lists-&gt;linkNodeSize) &#123;</span><br><span class="line">        pos = lists-&gt;linkNodeSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据的前四个字节存放的指针，将其强转为LinkNode指针。</span></span><br><span class="line">    LinkNode *node = data;</span><br><span class="line"></span><br><span class="line">    LinkNode *p = &amp;lists-&gt;linkHeader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    node-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = node;</span><br><span class="line"></span><br><span class="line">    lists-&gt;linkNodeSize++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void PRINTF_LINKNODE(LinkList list, void(*print)(void *)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkLists *lists = <span class="built_in">list</span>;</span><br><span class="line">    LinkNode *node = lists-&gt;linkHeader.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists-&gt;linkNodeSize; i++) &#123;</span><br><span class="line">        print(node);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKLIST_DELETEBYPOS</span><span class="params">(LinkList <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkLists *lists = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || pos &lt; <span class="number">0</span> || pos &gt; lists-&gt;linkNodeSize) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkNode *qNode = &amp;lists-&gt;linkHeader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</span><br><span class="line">        qNode = qNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkNode *delNode = qNode-&gt;next;</span><br><span class="line"></span><br><span class="line">    qNode-&gt;next = delNode-&gt;next;</span><br><span class="line">    lists--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PERSON</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *node;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; Person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrintPerson</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">    Person *p = data;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"姓名： %s  年龄： %d \n"</span>, p-&gt;name, p-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    LinkList mylist = LINKLIST_INIT();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据</span></span><br><span class="line">    Person p1 = &#123;<span class="literal">NULL</span>, <span class="string">"aaa"</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    Person p2 = &#123;<span class="literal">NULL</span>, <span class="string">"bbb"</span>, <span class="number">20</span>&#125;;</span><br><span class="line">    Person p3 = &#123;<span class="literal">NULL</span>, <span class="string">"ccc"</span>, <span class="number">30</span>&#125;;</span><br><span class="line">    Person p4 = &#123;<span class="literal">NULL</span>, <span class="string">"ddd"</span>, <span class="number">40</span>&#125;;</span><br><span class="line">    Person p5 = &#123;<span class="literal">NULL</span>, <span class="string">"eee"</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入节点</span></span><br><span class="line">    LINKLIST_INSERT(mylist, <span class="number">0</span>, &amp;p1);</span><br><span class="line">    LINKLIST_INSERT(mylist, <span class="number">2</span>, &amp;p2);</span><br><span class="line">    LINKLIST_INSERT(mylist, <span class="number">1</span>, &amp;p3);</span><br><span class="line">    LINKLIST_INSERT(mylist, <span class="number">-1</span>, &amp;p4);</span><br><span class="line">    LINKLIST_INSERT(mylist, <span class="number">0</span>, &amp;p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    PRINTF_LINKNODE(mylist, myPrintPerson);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"=-=-=-=-=-=-=-=-=-=-=-=\n"</span>);</span><br><span class="line"></span><br><span class="line">    LINKLIST_DELETEBYPOS(mylist, <span class="number">1</span>);</span><br><span class="line">    PRINTF_LINKNODE(mylist, myPrintPerson);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKNODE_RESET</span><span class="params">(LinkList <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LinkLists *lists = <span class="built_in">list</span>;</span><br><span class="line">    lists-&gt;linkHeader = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LINKNODE_DESTORY</span><span class="params">(LinkList <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; StackNode;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> &#123;</span></span><br><span class="line">    StackNode nodeHead;</span><br><span class="line">    <span class="keyword">int</span> nodesize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *LinkStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LinkStack <span class="title">init_LinkStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">LStack</span>));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>-&gt;nodeHead.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;nodesize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于链表而言，入栈本质为头插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_LinkStack</span><span class="params">(LinkStack s, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将用户数据取出钱四个字节用于地址。</span></span><br><span class="line"></span><br><span class="line">    StackNode *node = data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改指针指向</span></span><br><span class="line">    node-&gt;next = <span class="built_in">stack</span>-&gt;nodeHead.next;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;nodeHead.next = node;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>-&gt;nodesize++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_LinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;nodesize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    StackNode *firstNode = <span class="built_in">stack</span>-&gt;nodeHead.next;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>-&gt;nodeHead.next = firstNode-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>-&gt;nodesize--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">top_LinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;nodesize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;nodeHead.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size_LinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;nodesize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty_Linstack</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LStack</span> *<span class="title">stack</span> = <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;nodesize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryLinkStack</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *node;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化栈</span></span><br><span class="line">    LinkStack myStack = init_LinkStack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p1</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"aaa"</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p2</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"bbb"</span>, <span class="number">20</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p3</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ccc"</span>, <span class="number">30</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p4</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"ddd"</span>, <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p5</span> = &#123;</span><span class="literal">NULL</span>, <span class="string">"eee"</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    push_LinkStack(myStack, &amp;p1);</span><br><span class="line">    push_LinkStack(myStack, &amp;p2);</span><br><span class="line">    push_LinkStack(myStack, &amp;p3);</span><br><span class="line">    push_LinkStack(myStack, &amp;p4);</span><br><span class="line">    push_LinkStack(myStack, &amp;p5);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链式存储 -- 栈的元素个数为：%d\n"</span>, size_LinkStack(myStack));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈不为空，查看栈顶元素，出栈</span></span><br><span class="line">    <span class="keyword">while</span> (isEmpty_Linstack(myStack) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">p</span> = <span class="title">top_LinkStack</span>(<span class="title">myStack</span>);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"姓名：%s 年龄：%d\n"</span>, p-&gt;name, p-&gt;age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//出栈</span></span><br><span class="line">        pop_LinkStack(myStack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链式存储 -- 栈的元素个数为：%d\n"</span>, size_LinkStack(myStack));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁栈</span></span><br><span class="line">    destoryLinkStack(myStack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链表的开发实现&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下CLion的使用</title>
    <link href="http://gmle.github.io/2018/07/08/Clion%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8BMacOS%E7%AF%87/"/>
    <id>http://gmle.github.io/2018/07/08/Clion的使用技巧之MacOS篇/</id>
    <published>2018-07-08T00:57:35.372Z</published>
    <updated>2018-07-09T01:22:57.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CLIon介绍"><a href="#CLIon介绍" class="headerlink" title="CLIon介绍"></a>CLIon介绍</h2><p>CLion是<a href="https://jetbrains.com" target="_blank" rel="noopener">Jetbrains</a>公司开发的一款编写C/C++的IDE；<br>而且Jetbrains有特别多的IDE去供不同语言的开发者去使用,涵盖了大多数主流开发语言。</p><p>有句话说，Jetbrains出品，必属精品，作为一款有着昂贵收费的IDE，我在使用后就感受到了CLion的强大之处。<br><strong>我所使用的Jetbrains产品激活码由 </strong><a href="https://hsweb.me" target="_blank" rel="noopener">hsweb</a><strong> 作者提供，感谢支持。</strong></p><a id="more"></a><h2 id="CLion开篇"><a href="#CLion开篇" class="headerlink" title="CLion开篇"></a>CLion开篇</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><center><br>    <img src="/images/clion/01_start.png" height="50%" width="50%"><br>    启动界面<br></center><h3 id="启动界面说明"><a href="#启动界面说明" class="headerlink" title="启动界面说明"></a>启动界面说明</h3><center><br>    <img src="/images/clion/02_shuoming.png" height="50%" width="50%"><br>    启动界面说明<br></center><h3 id="各个按钮-选项说明"><a href="#各个按钮-选项说明" class="headerlink" title="各个按钮/选项说明"></a>各个按钮/选项说明</h3><h4 id="New-Project"><a href="#New-Project" class="headerlink" title="New Project"></a>New Project</h4><p>顾名思义，新建工程。点击效果图：</p><center><br>    <img src="/images/clion/03_newproject.png"><br>    新建工程界面<br></center><p><strong>页面介绍：</strong></p><ul><li>C++ Executable<ul><li>C++的可执行程序</li></ul></li><li>C++ Library<ul><li>C++的动态库/静态库</li></ul></li><li>C Executable<ul><li>C的可执行程序</li></ul></li><li>C Library<ul><li>C的动态库/静态库<br>…<br>其余不再叙述，因本帖旨在介绍C/C++的IDE，若有兴趣，读者可自行尝试。</li></ul></li></ul><h5 id="C-Library-C-Library"><a href="#C-Library-C-Library" class="headerlink" title="C++ Library/C Library"></a>C++ Library/C Library</h5><p>这两个选项提供了C/C++的动态库与静态库的生成，若是对CMake比较熟悉的人应该不会陌生，<br>因为这两个选项只是在CMakeLists.txt中提供了一个CMake的命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成动态库</span><br><span class="line">ADD_LIBRARY(libname SHARED library.c library.h)</span><br></pre></td></tr></table></figure><center><br>    <img src="/images/clion/04_cpplibrary.png"><br>    新建一个静/动态库工程<br></center><h5 id="C-Executable-C-Executable"><a href="#C-Executable-C-Executable" class="headerlink" title="C++ Executable/C Executable"></a>C++ Executable/C Executable</h5><p>这两个选项提供的是执行项目的创建。<br>最简单的HelloWorld会通过这两个工程项去建立。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CLIon介绍&quot;&gt;&lt;a href=&quot;#CLIon介绍&quot; class=&quot;headerlink&quot; title=&quot;CLIon介绍&quot;&gt;&lt;/a&gt;CLIon介绍&lt;/h2&gt;&lt;p&gt;CLion是&lt;a href=&quot;https://jetbrains.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jetbrains&lt;/a&gt;公司开发的一款编写C/C++的IDE；&lt;br&gt;而且Jetbrains有特别多的IDE去供不同语言的开发者去使用,涵盖了大多数主流开发语言。&lt;/p&gt;
&lt;p&gt;有句话说，Jetbrains出品，必属精品，作为一款有着昂贵收费的IDE，我在使用后就感受到了CLion的强大之处。&lt;br&gt;&lt;strong&gt;我所使用的Jetbrains产品激活码由 &lt;/strong&gt;&lt;a href=&quot;https://hsweb.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hsweb&lt;/a&gt;&lt;strong&gt; 作者提供，感谢支持。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CLion" scheme="http://gmle.github.io/categories/CLion/"/>
    
    
      <category term="CLion" scheme="http://gmle.github.io/tags/CLion/"/>
    
  </entry>
  
  <entry>
    <title>C语言中的函数指针</title>
    <link href="http://gmle.github.io/2018/07/06/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <id>http://gmle.github.io/2018/07/06/C语言的函数指针/</id>
    <published>2018-07-06T13:36:43.611Z</published>
    <updated>2018-07-06T13:57:27.161Z</updated>
    
    <content type="html"><![CDATA[<p>函数名本质就是一个函数指针。<br>它是一个指向函数的地址。</p><a id="more"></a><h2 id="函数指针的定义"><a href="#函数指针的定义" class="headerlink" title="函数指针的定义"></a>函数指针的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数指针和指针函数的区别：</span></span><br><span class="line"><span class="comment"> *      函数指针：指向了函数的指针。</span></span><br><span class="line"><span class="comment"> *      指针函数：函数返回至是指针的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Aaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先定义出函数类型，再通过类型定义函数指针。</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(FUNC_TYPE)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    FUNC_TYPE *pFunc = func;</span><br><span class="line"></span><br><span class="line">    pFunc(<span class="number">10</span>, <span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先定义出函数指针类型，再通过类型定义函数指针。</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FUNC_TYPE)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    FUNC_TYPE pFunc = func;</span><br><span class="line"></span><br><span class="line">    pFunc(<span class="number">10</span>, <span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 直接定义函数指针变量。</span></span><br><span class="line">    <span class="keyword">void</span> (*pFunc)(<span class="keyword">int</span>, <span class="keyword">char</span>) = func;</span><br><span class="line"></span><br><span class="line">    pFunc(<span class="number">10</span>, <span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bbb"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ccc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次性调用多个相同返回值，相同形参的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> (*pFuncArr[<span class="number">3</span>])();</span><br><span class="line"></span><br><span class="line">    pFuncArr[<span class="number">0</span>] = func1;</span><br><span class="line">    pFuncArr[<span class="number">1</span>] = func2;</span><br><span class="line">    pFuncArr[<span class="number">2</span>] = func3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        pFuncArr[i]();</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param argc</span></span><br><span class="line"><span class="comment"> * @param argv</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    test01();</span></span><br><span class="line"><span class="comment">//    test02();</span></span><br><span class="line"><span class="comment">//    test03();</span></span><br><span class="line">    test04();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数指针作函数返回值"><a href="#函数指针作函数返回值" class="headerlink" title="函数指针作函数返回值"></a>函数指针作函数返回值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void printTest(void *data, void(*print)(void *))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"打印调用："</span>);</span><br><span class="line">    print(data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInt</span><span class="params">(<span class="keyword">void</span> *data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *pData = data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pData);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printInt(&amp;a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数</span></span><br><span class="line">    printTest(&amp;a, printInt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; per;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(<span class="keyword">void</span> *data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    per *person = data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s, %d\n"</span>, person-&gt;name, person-&gt;age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    per person = &#123;<span class="string">"abc"</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    printPerson(&amp;person);</span><br><span class="line"></span><br><span class="line">    printTest(&amp;person, &amp;printPerson);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    test01();</span></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调函数小例子-打印任意类型的数组"><a href="#回调函数小例子-打印任意类型的数组" class="headerlink" title="回调函数小例子:打印任意类型的数组"></a>回调函数小例子:打印任意类型的数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印任意类型的数组</span></span><br><span class="line"></span><br><span class="line">static void printArray(void *pArray, int lenth, int elementSize, void (*print)(void *)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p = pArray;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenth; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *elementAddress = p + elementSize * i;</span><br><span class="line"></span><br><span class="line">        print(elementAddress);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印int类型数组回调函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printIntArr</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *pArr = data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *pArr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印int类型数组</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arrLen = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    printArray(arr, arrLen, <span class="number">4</span>, printIntArr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEOPLE</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125; pp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPeople</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    pp *p = data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s, %d\n"</span>, p-&gt;name, p-&gt;age);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    pp p[<span class="number">3</span>] = &#123;</span><br><span class="line">            &#123;<span class="string">"aaa"</span>, <span class="number">10</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"bbb"</span>, <span class="number">20</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"ccc"</span>, <span class="number">30</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pSize = <span class="keyword">sizeof</span>(p) / <span class="keyword">sizeof</span>(pp);</span><br><span class="line"></span><br><span class="line">    printArray(p, pSize, <span class="keyword">sizeof</span>(pp), printPeople);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数名本质就是一个函数指针。&lt;br&gt;它是一个指向函数的地址。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>链表与链表的基本操作</title>
    <link href="http://gmle.github.io/2018/07/06/%E9%93%BE%E8%A1%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://gmle.github.io/2018/07/06/链表与基本操作/</id>
    <published>2018-07-06T13:18:32.712Z</published>
    <updated>2018-07-21T13:49:51.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用链表："><a href="#为什么要使用链表：" class="headerlink" title="为什么要使用链表："></a>为什么要使用链表：</h2><ul><li>数组缺陷<ul><li>一旦分配好内存，不能再动态扩展。</li><li>如果分配过多，会造成资源浪费</li></ul></li><li>对于头部插入或删除的效率低</li></ul><a id="more"></a><h2 id="链表的组成"><a href="#链表的组成" class="headerlink" title="链表的组成"></a>链表的组成</h2><ul><li>数据域<ul><li>存放所存储的其类型的数据</li></ul></li><li>指针域<ul><li>存放节点指针(根据链表类型指定，单向链表存放下一节点指针)</li></ul></li></ul><h2 id="链表的分类"><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h2><ul><li>链表分类一：<ul><li>静态链表：在栈区分配内存</li><li>动态链表：在堆区分配内存</li></ul></li><li>链表分类二：<ul><li>单向链表；双向链表：指针域记录 一个/多个 指针</li><li>单向循环链表；双向循环链表：尾部指针域指向链表首位。</li></ul></li></ul><h2 id="静态链表和动态链表"><a href="#静态链表和动态链表" class="headerlink" title="静态链表和动态链表"></a>静态链表和动态链表</h2><ul><li>静态链表分配在栈上</li><li>动态链表分配到堆区</li></ul><h3 id="静态链表的初始化以及遍历"><a href="#静态链表的初始化以及遍历" class="headerlink" title="静态链表的初始化以及遍历"></a>静态链表的初始化以及遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> &#123;</span></span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="comment">// 指针域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; lineNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param argc</span></span><br><span class="line"><span class="comment"> * @param argv</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node1</span> = &#123;</span><span class="number">10</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node2</span> = &#123;</span><span class="number">20</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node3</span> = &#123;</span><span class="number">30</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node4</span> = &#123;</span><span class="number">40</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_01</span> <span class="title">node5</span> = &#123;</span><span class="number">50</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立关系</span></span><br><span class="line">    node1.next = &amp;node2;</span><br><span class="line">    node2.next = &amp;node3;</span><br><span class="line">    node3.next = &amp;node4;</span><br><span class="line">    node4.next = &amp;node5;</span><br><span class="line">    node5.next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    lineNode *node = &amp;node1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, node-&gt;num);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态链表的初始化与遍历"><a href="#动态链表的初始化与遍历" class="headerlink" title="动态链表的初始化与遍历"></a>动态链表的初始化与遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> &#123;</span></span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="comment">// 指针域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node1</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node2</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node3</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node4</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LINKENODE_02</span> *<span class="title">node5</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LINKENODE_02</span> *));</span></span><br><span class="line"></span><br><span class="line">    node1-&gt;num = <span class="number">10</span>;</span><br><span class="line">    node1-&gt;num = <span class="number">20</span>;</span><br><span class="line">    node1-&gt;num = <span class="number">30</span>;</span><br><span class="line">    node1-&gt;num = <span class="number">40</span>;</span><br><span class="line">    node1-&gt;num = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = node4;</span><br><span class="line">    node4-&gt;next = node5;</span><br><span class="line">    node5-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(node1);</span><br><span class="line">    <span class="built_in">free</span>(node2);</span><br><span class="line">    <span class="built_in">free</span>(node3);</span><br><span class="line">    <span class="built_in">free</span>(node4);</span><br><span class="line">    <span class="built_in">free</span>(node5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态链表创建在堆上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">(<span class="keyword">int</span>  argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带头链表的基本操作"><a href="#带头链表的基本操作" class="headerlink" title="带头链表的基本操作"></a>带头链表的基本操作</h2><p>FILE1: headLinkTable.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEADLINKTABLE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEADLINKTABLE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span>  once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">initLinkList</span>();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foreach_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> oldVal, <span class="keyword">int</span> newVal)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _HEADLINKTABLE_H</span></span></span><br></pre></td></tr></table></figure><p>FILE2:_headLinkTable_imp.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"_headLinkTable.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">initLinkList</span>() &#123;</span></span><br><span class="line">    <span class="comment">//创建头节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pHeader</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LinkNode</span>));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化头节点</span></span><br><span class="line">    <span class="comment">//pHeader-&gt;num = -1;  //头节点 不维护数据域</span></span><br><span class="line">    pHeader-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录尾节点位置，方便插入新的数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pTail</span> = <span class="title">pHeader</span>;</span></span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//让用户初始化几个节点，如果用户输入的是-1，代表插入结束</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请初始化链表，如果输入-1代表结束\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (val == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果输入不是-1  插入节点到链表中</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">newNode</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LinkNode</span>));</span></span><br><span class="line">        newNode-&gt;num = val;</span><br><span class="line">        newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更改指针的指向</span></span><br><span class="line">        pTail-&gt;next = newNode;</span><br><span class="line">        <span class="comment">//更新新的尾节点的指向</span></span><br><span class="line">        pTail = newNode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pHeader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foreach_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span> <span class="comment">//指定第一个有真实数据的节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pCurrent-&gt;num);</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> oldVal, <span class="keyword">int</span> newVal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建两个临时的节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pPrve</span> = <span class="title">pHeader</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCurrent-&gt;num == oldVal) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没找到对应的位置,辅助指针向后移动</span></span><br><span class="line">        pPrve = pCurrent;</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建新节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">newNode</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> _<span class="title">LinkNode</span>));</span></span><br><span class="line">    newNode-&gt;num = newVal;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立关系</span></span><br><span class="line">    newNode-&gt;next = pCurrent;</span><br><span class="line">    pPrve-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode_LinkList</span><span class="params">(struct _LinkNode *pHeader, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一前一后两个辅助指针变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pPrev</span> = <span class="title">pHeader</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环查找val</span></span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCurrent-&gt;num == val) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到数据，辅助指针向后移动</span></span><br><span class="line">        pPrev = pCurrent;</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没找到节点则返回</span></span><br><span class="line">    <span class="keyword">if</span> (pCurrent == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若找到该数据节点，则更改前一指针指向到目标数据节点的下一节点指针。</span></span><br><span class="line">    pPrev-&gt;next = pCurrent-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除掉待删除的节点并置空</span></span><br><span class="line">    <span class="built_in">free</span>(pCurrent);</span><br><span class="line">    pCurrent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pCurrent</span> = <span class="title">pHeader</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">nextNode</span> = <span class="title">pCurrent</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line">        <span class="built_in">free</span>(pCurrent);</span><br><span class="line"></span><br><span class="line">        pCurrent = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pHeader-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_LinkList</span><span class="params">(struct _LinkNode *pHeader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pHeader == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clear_LinkList(pHeader);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(pHeader);</span><br><span class="line">    pHeader = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FILE3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带头链表的基本操作</span></span><br><span class="line"><span class="comment"> * @param argc</span></span><br><span class="line"><span class="comment"> * @param argv</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"_headLinkTable.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LinkNode</span> *<span class="title">pHeader</span> = <span class="title">initLinkList</span>();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历链表</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"遍历链表结果为：\n"</span>);</span><br><span class="line">    foreach_LinkList(pHeader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入链表</span></span><br><span class="line">    <span class="comment">// 10 1000  2000 20 3000 30  500</span></span><br><span class="line">    insert_LinkList(pHeader, <span class="number">20</span>, <span class="number">1000</span>);</span><br><span class="line">    insert_LinkList(pHeader, <span class="number">20</span>, <span class="number">2000</span>);</span><br><span class="line">    insert_LinkList(pHeader, <span class="number">-1</span>, <span class="number">500</span>);</span><br><span class="line">    insert_LinkList(pHeader, <span class="number">30</span>, <span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"插入链表后，遍历链表结果为：\n"</span>);</span><br><span class="line">    foreach_LinkList(pHeader);</span><br><span class="line"></span><br><span class="line">    deleteNode_LinkList(pHeader, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除1000元素后，遍历链表结果为：\n"</span>);</span><br><span class="line">    foreach_LinkList(pHeader);</span><br><span class="line"></span><br><span class="line">    clear_LinkList(pHeader);</span><br><span class="line"></span><br><span class="line">    destroy_LinkList(pHeader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要使用链表：&quot;&gt;&lt;a href=&quot;#为什么要使用链表：&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用链表：&quot;&gt;&lt;/a&gt;为什么要使用链表：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组缺陷&lt;ul&gt;
&lt;li&gt;一旦分配好内存，不能再动态扩展。&lt;/li&gt;
&lt;li&gt;如果分配过多，会造成资源浪费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于头部插入或删除的效率低&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://gmle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://gmle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C语言的文件读写小案例</title>
    <link href="http://gmle.github.io/2018/07/05/C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
    <id>http://gmle.github.io/2018/07/05/C语言的文件读写小案例/</id>
    <published>2018-07-05T13:45:32.417Z</published>
    <updated>2018-08-27T11:53:42.688Z</updated>
    
    <content type="html"><![CDATA[<p>C语言一个读写配置的简单案例</p><a id="more"></a><p>FILE1：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CONFIG_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ConfigInfo</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> value[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getConfigFileLines</span><span class="params">(<span class="keyword">char</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isValidLine</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileResolving</span><span class="params">(<span class="keyword">char</span> * filePath, <span class="keyword">int</span> lines, struct  ConfigInfo ** config)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getValueByKey</span><span class="params">(<span class="keyword">char</span> *key, struct ConfigInfo *config, <span class="keyword">int</span> lines)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeConfigInfo</span><span class="params">(struct ConfigInfo *configinfo)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_CONFIG_H</span></span></span><br></pre></td></tr></table></figure></p><p>FILE2:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getConfigFileLines</span><span class="params">(<span class="keyword">char</span> *ConfigPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE *configFile = fopen(ConfigPath, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (configFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> tmpBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> configLine = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fgets(tmpBuf, <span class="number">1024</span>, configFile) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        printf("000+");</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isValidLine(tmpBuf)) &#123;</span><br><span class="line">            configLine++;</span><br><span class="line">            <span class="built_in">memset</span>(tmpBuf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(configFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> configLine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isValidLine</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strchr</span>(<span class="built_in">string</span>, <span class="string">':'</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileResolving</span><span class="params">(<span class="keyword">char</span> *filePath, <span class="keyword">int</span> lines, struct ConfigInfo **config)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ConfigInfo</span> *<span class="title">configInfo</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">ConfigInfo</span>) * <span class="title">lines</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (configInfo == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FILE *file = fopen(filePath, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Failed"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> value[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> tmpBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> configNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fgets(tmpBuf, <span class="number">1024</span>, file) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isValidLine(tmpBuf)) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(configInfo[configNum].key, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">            <span class="built_in">memset</span>(configInfo[configNum].value, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> *pos = <span class="built_in">strchr</span>(tmpBuf, <span class="string">':'</span>);</span><br><span class="line">            <span class="built_in">strncpy</span>(configInfo[configNum].key, tmpBuf, pos - tmpBuf);</span><br><span class="line">            <span class="built_in">strncpy</span>(configInfo[configNum].value, pos + <span class="number">1</span>, <span class="built_in">strlen</span>(pos + <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0000000000:%s\n"</span>, configInfo[configNum].key);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1111111111:%s\n"</span>, configInfo[configNum].value);</span><br><span class="line"></span><br><span class="line">            configNum++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(tmpBuf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *config = configInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getValueByKey</span><span class="params">(<span class="keyword">char</span> *key, struct ConfigInfo *config, <span class="keyword">int</span> lines)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"aaa"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">NULL</span> || lines == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        perror(<span class="string">"aaa"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(key, config[i].key) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> config[i].value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeConfigInfo</span><span class="params">(struct ConfigInfo *configinfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (configinfo != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(configinfo);</span><br><span class="line">        configinfo = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>FILE3:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"config.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *configPath = <span class="string">"config.ini"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lines = getConfigFileLines(configPath);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lines);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ConfigInfo</span> *<span class="title">configInfo</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    fileResolving(configPath, lines, &amp;configInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, getValueByKey(<span class="string">"heroId"</span>, configInfo, lines));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    freeConfigInfo(configInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言一个读写配置的简单案例&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言中结构体的偏移量与内存对齐</title>
    <link href="http://gmle.github.io/2018/07/05/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    <id>http://gmle.github.io/2018/07/05/C语言中结构体的偏移量/</id>
    <published>2018-07-05T13:28:28.344Z</published>
    <updated>2018-07-05T13:42:02.936Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中结构体在内存中的偏移量问题。<br><a id="more"></a></p><p><strong>查看对齐模数</strong><br>#pragma pack(show)<br>默认对齐模数是8。</p><p><strong>自定义数据的对齐规则</strong></p><ul><li>第一个属性开始  从0开始偏移</li><li>第二个属性开始  要放在 该类型的大小  与  对齐模数比  取小的值  的整数倍</li><li>所有属性都计算完后，再整体做二次偏移，将整体计算的结果 要放在  结构体最大类型 与对齐模数比  取小的值的 整数倍上</li></ul><p><strong>结构体嵌套结构体</strong></p><ul><li>结构体嵌套结构体时候，子结构体放在该结构体中最大类型，和对齐模数比的整数倍上即可</li><li></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a; <span class="comment">//0 ~ 3</span></span><br><span class="line">    <span class="keyword">int</span> b;  <span class="comment">//4 ~ 7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> *<span class="title">p</span> = &amp;<span class="title">t1</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的属性偏移量为：%d\n"</span>, (<span class="keyword">int</span>) &amp;(p-&gt;b) - (<span class="keyword">int</span>) p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的属性偏移量为：%d\n"</span>, offsetof(struct Teacher, b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过偏移量 操作内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">t1</span> = &#123;</span><span class="string">'a'</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"t1.b = %d\n"</span>, *(<span class="keyword">int</span> *) ((<span class="keyword">char</span> *) &amp;t1 + offsetof(struct Teacher, b)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"t1.b = %d\n"</span>, *(<span class="keyword">int</span> *) ((<span class="keyword">int</span> *) &amp;t1 + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher2</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span> <span class="title">c</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Teacher2</span> <span class="title">t1</span> = &#123;</span><span class="string">'a'</span>, <span class="number">10</span>, <span class="string">'b'</span>, <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset1 = offsetof(struct Teacher2, c);</span><br><span class="line">    <span class="keyword">int</span> offset2 = offsetof(struct Teacher, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span> *) ((<span class="keyword">char</span> *) &amp;t1 + offset1 + offset2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ((struct Teacher *) ((<span class="keyword">char</span> *) &amp;t1 + offset1))-&gt;b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    <span class="comment">//test02();</span></span><br><span class="line">    test03();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言中结构体在内存中的偏移量问题。&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://gmle.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://gmle.github.io/tags/C/"/>
    
  </entry>
  
</feed>
